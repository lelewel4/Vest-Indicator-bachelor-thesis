
nrf_TX_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e5c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08008000  08008000  00018000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800849c  0800849c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800849c  0800849c  0001849c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084a4  080084a4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084a4  080084a4  000184a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084a8  080084a8  000184a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080084ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  200001dc  08008688  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08008688  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e544  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000267a  00000000  00000000  0002e750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00030dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  00031a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b3b  00000000  00000000  00032528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f03e  00000000  00000000  0004b063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095765  00000000  00000000  0005a0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef806  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004244  00000000  00000000  000ef858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007fe4 	.word	0x08007fe4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007fe4 	.word	0x08007fe4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <get_adc_battery_value>:
*//////////////////////////////////////////////////////////////////////////////


//measure battery value (ADC)
uint32_t get_adc_battery_value(void)
{
 8000ebc:	b5b0      	push	{r4, r5, r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af02      	add	r7, sp, #8
    HAL_ADC_Start(&hadc1);
 8000ec2:	4822      	ldr	r0, [pc, #136]	; (8000f4c <get_adc_battery_value+0x90>)
 8000ec4:	f001 fd02 	bl	80028cc <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ecc:	481f      	ldr	r0, [pc, #124]	; (8000f4c <get_adc_battery_value+0x90>)
 8000ece:	f001 fdb1 	bl	8002a34 <HAL_ADC_PollForConversion>
    uint32_t value_adc = HAL_ADC_GetValue(&hadc1);
 8000ed2:	481e      	ldr	r0, [pc, #120]	; (8000f4c <get_adc_battery_value+0x90>)
 8000ed4:	f001 fe39 	bl	8002b4a <HAL_ADC_GetValue>
 8000ed8:	60f8      	str	r0, [r7, #12]
    //values
    float voltage = (3.3f * value_adc / 4096.0f);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	ee07 3a90 	vmov	s15, r3
 8000ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ee4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000f50 <get_adc_battery_value+0x94>
 8000ee8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000eec:	eddf 6a19 	vldr	s13, [pc, #100]	; 8000f54 <get_adc_battery_value+0x98>
 8000ef0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ef4:	edc7 7a02 	vstr	s15, [r7, #8]
    float voltage_real_battery = (3.3f * value_adc / 4096.0f) + 5;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	ee07 3a90 	vmov	s15, r3
 8000efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f02:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000f50 <get_adc_battery_value+0x94>
 8000f06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f0a:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000f54 <get_adc_battery_value+0x98>
 8000f0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f12:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000f16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f1a:	edc7 7a01 	vstr	s15, [r7, #4]
#ifdef DEBUG_PRINTF
    printf("ADC = %lu (%.3f V), Real Battery = %.3f V\n", value_adc,
 8000f1e:	68b8      	ldr	r0, [r7, #8]
 8000f20:	f7ff fb1a 	bl	8000558 <__aeabi_f2d>
 8000f24:	4604      	mov	r4, r0
 8000f26:	460d      	mov	r5, r1
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff fb15 	bl	8000558 <__aeabi_f2d>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	e9cd 2300 	strd	r2, r3, [sp]
 8000f36:	4622      	mov	r2, r4
 8000f38:	462b      	mov	r3, r5
 8000f3a:	68f9      	ldr	r1, [r7, #12]
 8000f3c:	4806      	ldr	r0, [pc, #24]	; (8000f58 <get_adc_battery_value+0x9c>)
 8000f3e:	f004 fdbd 	bl	8005abc <iprintf>
    													  voltage,
														  voltage_real_battery);
#endif
    return value_adc;
 8000f42:	68fb      	ldr	r3, [r7, #12]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f4c:	200001fc 	.word	0x200001fc
 8000f50:	40533333 	.word	0x40533333
 8000f54:	45800000 	.word	0x45800000
 8000f58:	08008000 	.word	0x08008000

08000f5c <battery_level_show>:


//diodes turn ON for battery measurement
void battery_level_show(uint32_t value)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    if(value <= 1365)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f240 5255 	movw	r2, #1365	; 0x555
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d80e      	bhi.n	8000f8c <battery_level_show+0x30>
    {
        HAL_GPIO_WritePin(DR_GPIO_Port, DR_Pin, GPIO_PIN_SET);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2120      	movs	r1, #32
 8000f72:	482c      	ldr	r0, [pc, #176]	; (8001024 <battery_level_show+0xc8>)
 8000f74:	f002 fad2 	bl	800351c <HAL_GPIO_WritePin>
        HAL_Delay(DIODES_ADC_TIME);
 8000f78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f7c:	f001 fc3e 	bl	80027fc <HAL_Delay>
        HAL_GPIO_WritePin(DR_GPIO_Port, DR_Pin, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2120      	movs	r1, #32
 8000f84:	4827      	ldr	r0, [pc, #156]	; (8001024 <battery_level_show+0xc8>)
 8000f86:	f002 fac9 	bl	800351c <HAL_GPIO_WritePin>
        HAL_Delay(DIODES_ADC_TIME);
        HAL_GPIO_WritePin(DR_GPIO_Port, DR_Pin, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(DY_GPIO_Port, DY_Pin, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(DG_GPIO_Port, DG_Pin, GPIO_PIN_RESET);
    }
}
 8000f8a:	e046      	b.n	800101a <battery_level_show+0xbe>
    else if((value > 1365) && (value <= 2730))
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f240 5255 	movw	r2, #1365	; 0x555
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d91d      	bls.n	8000fd2 <battery_level_show+0x76>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f640 22aa 	movw	r2, #2730	; 0xaaa
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d818      	bhi.n	8000fd2 <battery_level_show+0x76>
        HAL_GPIO_WritePin(DR_GPIO_Port, DR_Pin, GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2120      	movs	r1, #32
 8000fa4:	481f      	ldr	r0, [pc, #124]	; (8001024 <battery_level_show+0xc8>)
 8000fa6:	f002 fab9 	bl	800351c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DY_GPIO_Port, DY_Pin, GPIO_PIN_SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2110      	movs	r1, #16
 8000fae:	481d      	ldr	r0, [pc, #116]	; (8001024 <battery_level_show+0xc8>)
 8000fb0:	f002 fab4 	bl	800351c <HAL_GPIO_WritePin>
        HAL_Delay(DIODES_ADC_TIME);
 8000fb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fb8:	f001 fc20 	bl	80027fc <HAL_Delay>
        HAL_GPIO_WritePin(DR_GPIO_Port, DR_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2120      	movs	r1, #32
 8000fc0:	4818      	ldr	r0, [pc, #96]	; (8001024 <battery_level_show+0xc8>)
 8000fc2:	f002 faab 	bl	800351c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DY_GPIO_Port, DY_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2110      	movs	r1, #16
 8000fca:	4816      	ldr	r0, [pc, #88]	; (8001024 <battery_level_show+0xc8>)
 8000fcc:	f002 faa6 	bl	800351c <HAL_GPIO_WritePin>
}
 8000fd0:	e023      	b.n	800101a <battery_level_show+0xbe>
        HAL_GPIO_WritePin(DR_GPIO_Port, DR_Pin, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	4813      	ldr	r0, [pc, #76]	; (8001024 <battery_level_show+0xc8>)
 8000fd8:	f002 faa0 	bl	800351c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DY_GPIO_Port, DY_Pin, GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2110      	movs	r1, #16
 8000fe0:	4810      	ldr	r0, [pc, #64]	; (8001024 <battery_level_show+0xc8>)
 8000fe2:	f002 fa9b 	bl	800351c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DG_GPIO_Port, DG_Pin, GPIO_PIN_SET);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fec:	480e      	ldr	r0, [pc, #56]	; (8001028 <battery_level_show+0xcc>)
 8000fee:	f002 fa95 	bl	800351c <HAL_GPIO_WritePin>
        HAL_Delay(DIODES_ADC_TIME);
 8000ff2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ff6:	f001 fc01 	bl	80027fc <HAL_Delay>
        HAL_GPIO_WritePin(DR_GPIO_Port, DR_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2120      	movs	r1, #32
 8000ffe:	4809      	ldr	r0, [pc, #36]	; (8001024 <battery_level_show+0xc8>)
 8001000:	f002 fa8c 	bl	800351c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DY_GPIO_Port, DY_Pin, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	2110      	movs	r1, #16
 8001008:	4806      	ldr	r0, [pc, #24]	; (8001024 <battery_level_show+0xc8>)
 800100a:	f002 fa87 	bl	800351c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DG_GPIO_Port, DG_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <battery_level_show+0xcc>)
 8001016:	f002 fa81 	bl	800351c <HAL_GPIO_WritePin>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40020400 	.word	0x40020400
 8001028:	40020000 	.word	0x40020000

0800102c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001032:	463b      	mov	r3, r7
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001040:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <MX_ADC1_Init+0x9c>)
 8001042:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001044:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001046:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800104a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_ADC1_Init+0x98>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_ADC1_Init+0x98>)
 800105a:	2200      	movs	r2, #0
 800105c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_ADC1_Init+0x98>)
 800106e:	4a17      	ldr	r2, [pc, #92]	; (80010cc <MX_ADC1_Init+0xa0>)
 8001070:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <MX_ADC1_Init+0x98>)
 800107a:	2201      	movs	r2, #1
 800107c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001088:	2201      	movs	r2, #1
 800108a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800108c:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_ADC1_Init+0x98>)
 800108e:	f001 fbd9 	bl	8002844 <HAL_ADC_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001098:	f000 fc32 	bl	8001900 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800109c:	2301      	movs	r3, #1
 800109e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_ADC1_Init+0x98>)
 80010ae:	f001 fd59 	bl	8002b64 <HAL_ADC_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010b8:	f000 fc22 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200001fc 	.word	0x200001fc
 80010c8:	40012000 	.word	0x40012000
 80010cc:	0f000001 	.word	0x0f000001

080010d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a17      	ldr	r2, [pc, #92]	; (800114c <HAL_ADC_MspInit+0x7c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d127      	bne.n	8001142 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <HAL_ADC_MspInit+0x80>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	4a15      	ldr	r2, [pc, #84]	; (8001150 <HAL_ADC_MspInit+0x80>)
 80010fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001100:	6453      	str	r3, [r2, #68]	; 0x44
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <HAL_ADC_MspInit+0x80>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <HAL_ADC_MspInit+0x80>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <HAL_ADC_MspInit+0x80>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <HAL_ADC_MspInit+0x80>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800112a:	2302      	movs	r3, #2
 800112c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112e:	2303      	movs	r3, #3
 8001130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <HAL_ADC_MspInit+0x84>)
 800113e:	f002 f851 	bl	80031e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	; 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40012000 	.word	0x40012000
 8001150:	40023800 	.word	0x40023800
 8001154:	40020000 	.word	0x40020000

08001158 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b58      	ldr	r3, [pc, #352]	; (80012d4 <MX_GPIO_Init+0x17c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a57      	ldr	r2, [pc, #348]	; (80012d4 <MX_GPIO_Init+0x17c>)
 8001178:	f043 0304 	orr.w	r3, r3, #4
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b55      	ldr	r3, [pc, #340]	; (80012d4 <MX_GPIO_Init+0x17c>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b51      	ldr	r3, [pc, #324]	; (80012d4 <MX_GPIO_Init+0x17c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a50      	ldr	r2, [pc, #320]	; (80012d4 <MX_GPIO_Init+0x17c>)
 8001194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b4e      	ldr	r3, [pc, #312]	; (80012d4 <MX_GPIO_Init+0x17c>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	4b4a      	ldr	r3, [pc, #296]	; (80012d4 <MX_GPIO_Init+0x17c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a49      	ldr	r2, [pc, #292]	; (80012d4 <MX_GPIO_Init+0x17c>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b47      	ldr	r3, [pc, #284]	; (80012d4 <MX_GPIO_Init+0x17c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b43      	ldr	r3, [pc, #268]	; (80012d4 <MX_GPIO_Init+0x17c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a42      	ldr	r2, [pc, #264]	; (80012d4 <MX_GPIO_Init+0x17c>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b40      	ldr	r3, [pc, #256]	; (80012d4 <MX_GPIO_Init+0x17c>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_LATCH_Pin|TL_Pin|DE_Pin|NRF24_CSN_Pin
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 80011e4:	483c      	ldr	r0, [pc, #240]	; (80012d8 <MX_GPIO_Init+0x180>)
 80011e6:	f002 f999 	bl	800351c <HAL_GPIO_WritePin>
                          |TR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DG_GPIO_Port, DG_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011f0:	483a      	ldr	r0, [pc, #232]	; (80012dc <MX_GPIO_Init+0x184>)
 80011f2:	f002 f993 	bl	800351c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DY_Pin|DR_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2170      	movs	r1, #112	; 0x70
 80011fa:	4839      	ldr	r0, [pc, #228]	; (80012e0 <MX_GPIO_Init+0x188>)
 80011fc:	f002 f98e 	bl	800351c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = SPI2_LATCH_Pin|TL_Pin|DE_Pin|NRF24_CSN_Pin
 8001200:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
 8001204:	617b      	str	r3, [r7, #20]
                          |TR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001206:	2301      	movs	r3, #1
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	482f      	ldr	r0, [pc, #188]	; (80012d8 <MX_GPIO_Init+0x180>)
 800121a:	f001 ffe3 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BS_Pin;
 800121e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001224:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BS_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	482a      	ldr	r0, [pc, #168]	; (80012e0 <MX_GPIO_Init+0x188>)
 8001236:	f001 ffd5 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BB_Pin|BL_Pin|BR_Pin;
 800123a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001240:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	4823      	ldr	r0, [pc, #140]	; (80012e0 <MX_GPIO_Init+0x188>)
 8001252:	f001 ffc7 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BE_Pin;
 8001256:	f44f 7300 	mov.w	r3, #512	; 0x200
 800125a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800125c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BE_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	481a      	ldr	r0, [pc, #104]	; (80012d8 <MX_GPIO_Init+0x180>)
 800126e:	f001 ffb9 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DG_Pin;
 8001272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DG_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4619      	mov	r1, r3
 800128a:	4814      	ldr	r0, [pc, #80]	; (80012dc <MX_GPIO_Init+0x184>)
 800128c:	f001 ffaa 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DY_Pin|DR_Pin|NRF24_CE_Pin;
 8001290:	2370      	movs	r3, #112	; 0x70
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	480e      	ldr	r0, [pc, #56]	; (80012e0 <MX_GPIO_Init+0x188>)
 80012a8:	f001 ff9c 	bl	80031e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 1);
 80012ac:	2201      	movs	r2, #1
 80012ae:	2100      	movs	r1, #0
 80012b0:	2017      	movs	r0, #23
 80012b2:	f001 ff60 	bl	8003176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012b6:	2017      	movs	r0, #23
 80012b8:	f001 ff79 	bl	80031ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 2);
 80012bc:	2202      	movs	r2, #2
 80012be:	2100      	movs	r1, #0
 80012c0:	2028      	movs	r0, #40	; 0x28
 80012c2:	f001 ff58 	bl	8003176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012c6:	2028      	movs	r0, #40	; 0x28
 80012c8:	f001 ff71 	bl	80031ae <HAL_NVIC_EnableIRQ>

}
 80012cc:	bf00      	nop
 80012ce:	3728      	adds	r7, #40	; 0x28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020800 	.word	0x40020800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020400 	.word	0x40020400

080012e4 <send_light>:
 	 	 	 	 	 	 	 	 FUNCTIONS OTHER
*//////////////////////////////////////////////////////////////////////////////


void send_light(uint8_t data)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
    sprintf(message, "%d", data);
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4908      	ldr	r1, [pc, #32]	; (8001314 <send_light+0x30>)
 80012f4:	4808      	ldr	r0, [pc, #32]	; (8001318 <send_light+0x34>)
 80012f6:	f004 fbf9 	bl	8005aec <siprintf>
    nRF24_WriteTXPayload(message);
 80012fa:	4807      	ldr	r0, [pc, #28]	; (8001318 <send_light+0x34>)
 80012fc:	f000 fe94 	bl	8002028 <nRF24_WriteTXPayload>
    HAL_Delay(1);
 8001300:	2001      	movs	r0, #1
 8001302:	f001 fa7b 	bl	80027fc <HAL_Delay>
    nRF24_WaitTX();
 8001306:	f000 fe9d 	bl	8002044 <nRF24_WaitTX>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	0800802c 	.word	0x0800802c
 8001318:	20000244 	.word	0x20000244

0800131c <stop_light_logic>:
 	 	 	 	 	 	 	 	 FUNCTIONS STOP
*//////////////////////////////////////////////////////////////////////////////


void stop_light_logic(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
    if(HAL_GPIO_ReadPin(BS_GPIO_Port, BS_Pin) == 1)
 8001320:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001324:	480d      	ldr	r0, [pc, #52]	; (800135c <stop_light_logic+0x40>)
 8001326:	f002 f8e1 	bl	80034ec <HAL_GPIO_ReadPin>
 800132a:	4603      	mov	r3, r0
 800132c:	2b01      	cmp	r3, #1
 800132e:	d109      	bne.n	8001344 <stop_light_logic+0x28>
    {
#ifdef DEBUG_PRINTF
    	//printf("STOP start");
        HAL_UART_Transmit(&huart2, "STOP START ", 11, HAL_MAX_DELAY);
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
 8001334:	220b      	movs	r2, #11
 8001336:	490a      	ldr	r1, [pc, #40]	; (8001360 <stop_light_logic+0x44>)
 8001338:	480a      	ldr	r0, [pc, #40]	; (8001364 <stop_light_logic+0x48>)
 800133a:	f003 fbae 	bl	8004a9a <HAL_UART_Transmit>
#endif
        stop_light_start_send();
 800133e:	f000 f815 	bl	800136c <stop_light_start_send>
    	//printf("STOP stop");
        HAL_UART_Transmit(&huart2, "STOP STOP ", 10, HAL_MAX_DELAY);
#endif
        stop_light_end_send();
    }
}
 8001342:	e008      	b.n	8001356 <stop_light_logic+0x3a>
        HAL_UART_Transmit(&huart2, "STOP STOP ", 10, HAL_MAX_DELAY);
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	220a      	movs	r2, #10
 800134a:	4907      	ldr	r1, [pc, #28]	; (8001368 <stop_light_logic+0x4c>)
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <stop_light_logic+0x48>)
 800134e:	f003 fba4 	bl	8004a9a <HAL_UART_Transmit>
        stop_light_end_send();
 8001352:	f000 f818 	bl	8001386 <stop_light_end_send>
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40020400 	.word	0x40020400
 8001360:	08008030 	.word	0x08008030
 8001364:	2000032c 	.word	0x2000032c
 8001368:	0800803c 	.word	0x0800803c

0800136c <stop_light_start_send>:


void stop_light_start_send(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
    uint8_t light_to_send = 2;
 8001372:	2302      	movs	r3, #2
 8001374:	71fb      	strb	r3, [r7, #7]
    send_light(light_to_send);
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ffb3 	bl	80012e4 <send_light>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <stop_light_end_send>:


void stop_light_end_send(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
    uint8_t light_to_send = 3;
 800138c:	2303      	movs	r3, #3
 800138e:	71fb      	strb	r3, [r7, #7]
    send_light(light_to_send);
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff ffa6 	bl	80012e4 <send_light>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <emergency_light_logic>:
 	 	 	 	 	 	 	 	 FUNCTIONS EMERGENCY
*//////////////////////////////////////////////////////////////////////////////


void emergency_light_logic(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
    if((left_button_value == false) && (right_button_value == false))
 80013a4:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <emergency_light_logic+0x3c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10f      	bne.n	80013ce <emergency_light_logic+0x2e>
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <emergency_light_logic+0x40>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10a      	bne.n	80013ce <emergency_light_logic+0x2e>
    {
        if(emergency_button_value == true)
 80013b8:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <emergency_light_logic+0x44>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d102      	bne.n	80013c8 <emergency_light_logic+0x28>
        {
        	emergency_light_start_send();
 80013c2:	f000 f811 	bl	80013e8 <emergency_light_start_send>
        if(emergency_button_value == true)
 80013c6:	e006      	b.n	80013d6 <emergency_light_logic+0x36>
        }
        else
        {
        	emergency_light_end_send();
 80013c8:	f000 f82e 	bl	8001428 <emergency_light_end_send>
        if(emergency_button_value == true)
 80013cc:	e003      	b.n	80013d6 <emergency_light_logic+0x36>
        }
    }
    else
    {
        emergency_button_value = false;
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <emergency_light_logic+0x44>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
    }
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000265 	.word	0x20000265
 80013e0:	20000266 	.word	0x20000266
 80013e4:	20000264 	.word	0x20000264

080013e8 <emergency_light_start_send>:


void emergency_light_start_send(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
#ifdef DEBUG_PRINTF
	//printf("EMERGENCY start");
    HAL_UART_Transmit(&huart2, "EMERGENCY START ", 16, HAL_MAX_DELAY);
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	2210      	movs	r2, #16
 80013f4:	4909      	ldr	r1, [pc, #36]	; (800141c <emergency_light_start_send+0x34>)
 80013f6:	480a      	ldr	r0, [pc, #40]	; (8001420 <emergency_light_start_send+0x38>)
 80013f8:	f003 fb4f 	bl	8004a9a <HAL_UART_Transmit>
#endif
    HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_SET);		     /*set diode
 80013fc:	2201      	movs	r2, #1
 80013fe:	2140      	movs	r1, #64	; 0x40
 8001400:	4808      	ldr	r0, [pc, #32]	; (8001424 <emergency_light_start_send+0x3c>)
 8001402:	f002 f88b 	bl	800351c <HAL_GPIO_WritePin>
    														     for emergency*/
    uint8_t light_to_send = 4;
 8001406:	2304      	movs	r3, #4
 8001408:	71fb      	strb	r3, [r7, #7]
    send_light(light_to_send);
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff69 	bl	80012e4 <send_light>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	08008048 	.word	0x08008048
 8001420:	2000032c 	.word	0x2000032c
 8001424:	40020800 	.word	0x40020800

08001428 <emergency_light_end_send>:


void emergency_light_end_send(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
#ifdef DEBUG_PRINTF
	//printf("EMERGENCY stop");
    HAL_UART_Transmit(&huart2, "EMERGENCY STOP ", 15, HAL_MAX_DELAY);
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	220f      	movs	r2, #15
 8001434:	4909      	ldr	r1, [pc, #36]	; (800145c <emergency_light_end_send+0x34>)
 8001436:	480a      	ldr	r0, [pc, #40]	; (8001460 <emergency_light_end_send+0x38>)
 8001438:	f003 fb2f 	bl	8004a9a <HAL_UART_Transmit>
#endif
    uint8_t light_to_send = 5;
 800143c:	2305      	movs	r3, #5
 800143e:	71fb      	strb	r3, [r7, #7]
    send_light(light_to_send);
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ff4e 	bl	80012e4 <send_light>
    HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);	   /*reset diode
 8001448:	2200      	movs	r2, #0
 800144a:	2140      	movs	r1, #64	; 0x40
 800144c:	4805      	ldr	r0, [pc, #20]	; (8001464 <emergency_light_end_send+0x3c>)
 800144e:	f002 f865 	bl	800351c <HAL_GPIO_WritePin>
    														  	 for emergency*/
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	0800805c 	.word	0x0800805c
 8001460:	2000032c 	.word	0x2000032c
 8001464:	40020800 	.word	0x40020800

08001468 <left_light_logic>:
 	 	 	 	 	 	 	 	 FUNCTIONS LEFT TURNING
*//////////////////////////////////////////////////////////////////////////////


void left_light_logic(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
    if((right_button_value == false) && (emergency_button_value == false))
 800146c:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <left_light_logic+0x48>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d114      	bne.n	80014a0 <left_light_logic+0x38>
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <left_light_logic+0x4c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d10f      	bne.n	80014a0 <left_light_logic+0x38>
    {
        if(left_button_value == true)
 8001480:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <left_light_logic+0x50>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b01      	cmp	r3, #1
 8001488:	d102      	bne.n	8001490 <left_light_logic+0x28>
        {
            left_light_start_send();
 800148a:	f000 f817 	bl	80014bc <left_light_start_send>
        if(left_button_value == true)
 800148e:	e00b      	b.n	80014a8 <left_light_logic+0x40>
        }
        else if(left_button_value == false)
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <left_light_logic+0x50>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d106      	bne.n	80014a8 <left_light_logic+0x40>
        {
            left_light_end_send();
 800149a:	f000 f82f 	bl	80014fc <left_light_end_send>
        if(left_button_value == true)
 800149e:	e003      	b.n	80014a8 <left_light_logic+0x40>
        }
    }
    else
    {
        left_button_value = false;
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <left_light_logic+0x50>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
    }
}
 80014a6:	e000      	b.n	80014aa <left_light_logic+0x42>
        if(left_button_value == true)
 80014a8:	bf00      	nop
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000266 	.word	0x20000266
 80014b4:	20000264 	.word	0x20000264
 80014b8:	20000265 	.word	0x20000265

080014bc <left_light_start_send>:


void left_light_start_send(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
#ifdef DEBUG_PRINTF
	//printf("LEFT start");
    HAL_UART_Transmit(&huart2, "LEFT START ", 11, HAL_MAX_DELAY);
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	220b      	movs	r2, #11
 80014c8:	4909      	ldr	r1, [pc, #36]	; (80014f0 <left_light_start_send+0x34>)
 80014ca:	480a      	ldr	r0, [pc, #40]	; (80014f4 <left_light_start_send+0x38>)
 80014cc:	f003 fae5 	bl	8004a9a <HAL_UART_Transmit>
#endif
    HAL_GPIO_WritePin(TL_GPIO_Port, TL_Pin, GPIO_PIN_SET);		     /*set diode
 80014d0:	2201      	movs	r2, #1
 80014d2:	2120      	movs	r1, #32
 80014d4:	4808      	ldr	r0, [pc, #32]	; (80014f8 <left_light_start_send+0x3c>)
 80014d6:	f002 f821 	bl	800351c <HAL_GPIO_WritePin>
    														  for turning left*/
    uint8_t light_to_send = 6;
 80014da:	2306      	movs	r3, #6
 80014dc:	71fb      	strb	r3, [r7, #7]
    send_light(light_to_send);
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff feff 	bl	80012e4 <send_light>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	0800806c 	.word	0x0800806c
 80014f4:	2000032c 	.word	0x2000032c
 80014f8:	40020800 	.word	0x40020800

080014fc <left_light_end_send>:


void left_light_end_send(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
#ifdef DEBUG_PRINTF
	//printf("LEFT stop");
    HAL_UART_Transmit(&huart2, "LEFT STOP ", 10, HAL_MAX_DELAY);
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	220a      	movs	r2, #10
 8001508:	4909      	ldr	r1, [pc, #36]	; (8001530 <left_light_end_send+0x34>)
 800150a:	480a      	ldr	r0, [pc, #40]	; (8001534 <left_light_end_send+0x38>)
 800150c:	f003 fac5 	bl	8004a9a <HAL_UART_Transmit>
#endif
    uint8_t light_to_send = 7;
 8001510:	2307      	movs	r3, #7
 8001512:	71fb      	strb	r3, [r7, #7]
    send_light(light_to_send);
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fee4 	bl	80012e4 <send_light>
    HAL_GPIO_WritePin(TL_GPIO_Port, TL_Pin, GPIO_PIN_RESET);	   /*reset diode
 800151c:	2200      	movs	r2, #0
 800151e:	2120      	movs	r1, #32
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <left_light_end_send+0x3c>)
 8001522:	f001 fffb 	bl	800351c <HAL_GPIO_WritePin>
    														  for turning left*/
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	08008078 	.word	0x08008078
 8001534:	2000032c 	.word	0x2000032c
 8001538:	40020800 	.word	0x40020800

0800153c <right_light_logic>:
 	 	 	 	 	 	 	 	 FUNCTIONS RIGHT TURNING
*//////////////////////////////////////////////////////////////////////////////


void right_light_logic(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
    if((left_button_value == false) && (emergency_button_value == false))
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <right_light_logic+0x48>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d114      	bne.n	8001574 <right_light_logic+0x38>
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <right_light_logic+0x4c>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d10f      	bne.n	8001574 <right_light_logic+0x38>
    {
        if(right_button_value == true)
 8001554:	4b0d      	ldr	r3, [pc, #52]	; (800158c <right_light_logic+0x50>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b01      	cmp	r3, #1
 800155c:	d102      	bne.n	8001564 <right_light_logic+0x28>
        {
            right_light_start_send();
 800155e:	f000 f817 	bl	8001590 <right_light_start_send>
        if(right_button_value == true)
 8001562:	e00b      	b.n	800157c <right_light_logic+0x40>
        }
        else if(right_button_value == false)
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <right_light_logic+0x50>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d106      	bne.n	800157c <right_light_logic+0x40>
        {
            right_light_end_send();
 800156e:	f000 f82f 	bl	80015d0 <right_light_end_send>
        if(right_button_value == true)
 8001572:	e003      	b.n	800157c <right_light_logic+0x40>
        }
    }
    else
    {
        right_button_value = false;
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <right_light_logic+0x50>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
    }
}
 800157a:	e000      	b.n	800157e <right_light_logic+0x42>
        if(right_button_value == true)
 800157c:	bf00      	nop
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000265 	.word	0x20000265
 8001588:	20000264 	.word	0x20000264
 800158c:	20000266 	.word	0x20000266

08001590 <right_light_start_send>:


void right_light_start_send(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
#ifdef DEBUG_PRINTF
	//printf("RIGHT start");
    HAL_UART_Transmit(&huart2, "RIGHT START ", 12, HAL_MAX_DELAY);
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	220c      	movs	r2, #12
 800159c:	4909      	ldr	r1, [pc, #36]	; (80015c4 <right_light_start_send+0x34>)
 800159e:	480a      	ldr	r0, [pc, #40]	; (80015c8 <right_light_start_send+0x38>)
 80015a0:	f003 fa7b 	bl	8004a9a <HAL_UART_Transmit>
#endif
    HAL_GPIO_WritePin(TR_GPIO_Port, TR_Pin, GPIO_PIN_SET);		     /*set diode
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015aa:	4808      	ldr	r0, [pc, #32]	; (80015cc <right_light_start_send+0x3c>)
 80015ac:	f001 ffb6 	bl	800351c <HAL_GPIO_WritePin>
    														 for turning right*/
    uint8_t light_to_send = 8;
 80015b0:	2308      	movs	r3, #8
 80015b2:	71fb      	strb	r3, [r7, #7]
    send_light(light_to_send);
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fe94 	bl	80012e4 <send_light>
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	08008084 	.word	0x08008084
 80015c8:	2000032c 	.word	0x2000032c
 80015cc:	40020800 	.word	0x40020800

080015d0 <right_light_end_send>:


void right_light_end_send(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
#ifdef DEBUG_PRINTF
	//printf("RIGHT stop");
    HAL_UART_Transmit(&huart2, "RIGHT STOP ", 11, HAL_MAX_DELAY);
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	220b      	movs	r2, #11
 80015dc:	4909      	ldr	r1, [pc, #36]	; (8001604 <right_light_end_send+0x34>)
 80015de:	480a      	ldr	r0, [pc, #40]	; (8001608 <right_light_end_send+0x38>)
 80015e0:	f003 fa5b 	bl	8004a9a <HAL_UART_Transmit>
#endif
    uint8_t light_to_send = 9;
 80015e4:	2309      	movs	r3, #9
 80015e6:	71fb      	strb	r3, [r7, #7]
    send_light(light_to_send);
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fe7a 	bl	80012e4 <send_light>
    HAL_GPIO_WritePin(TR_GPIO_Port, TR_Pin, GPIO_PIN_RESET);	   /*reset diode
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <right_light_end_send+0x3c>)
 80015f8:	f001 ff90 	bl	800351c <HAL_GPIO_WritePin>
    														 for turning right*/
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	08008094 	.word	0x08008094
 8001608:	2000032c 	.word	0x2000032c
 800160c:	40020800 	.word	0x40020800

08001610 <__io_putchar>:

/* USER CODE BEGIN PV */


//UART///
int __io_putchar(int ch){
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b0a      	cmp	r3, #10
 800161c:	d102      	bne.n	8001624 <__io_putchar+0x14>
    __io_putchar('\r');
 800161e:	200d      	movs	r0, #13
 8001620:	f7ff fff6 	bl	8001610 <__io_putchar>
  }
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001624:	1d39      	adds	r1, r7, #4
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	2201      	movs	r2, #1
 800162c:	4803      	ldr	r0, [pc, #12]	; (800163c <__io_putchar+0x2c>)
 800162e:	f003 fa34 	bl	8004a9a <HAL_UART_Transmit>
  return 1;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	2000032c 	.word	0x2000032c

08001640 <HAL_GPIO_EXTI_Callback>:


//GPIO IRQ//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	80fb      	strh	r3, [r7, #6]
    current_time = HAL_GetTick();		//time reading
 800164a:	f001 f8cb 	bl	80027e4 <HAL_GetTick>
 800164e:	4603      	mov	r3, r0
 8001650:	4a38      	ldr	r2, [pc, #224]	; (8001734 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001652:	6013      	str	r3, [r2, #0]
    //button battery
    if((GPIO_Pin == BB_Pin) && (current_time - previous_time)>BUTTON_DEBOUNCE_TIME)
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800165a:	d109      	bne.n	8001670 <HAL_GPIO_EXTI_Callback+0x30>
 800165c:	4b35      	ldr	r3, [pc, #212]	; (8001734 <HAL_GPIO_EXTI_Callback+0xf4>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b35      	ldr	r3, [pc, #212]	; (8001738 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2bfa      	cmp	r3, #250	; 0xfa
 8001668:	d902      	bls.n	8001670 <HAL_GPIO_EXTI_Callback+0x30>
    {
        light = LIGHT_BATTERY;
 800166a:	4b34      	ldr	r3, [pc, #208]	; (800173c <HAL_GPIO_EXTI_Callback+0xfc>)
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
    }
    //button stop
    if((GPIO_Pin == BS_Pin) && (current_time - previous_time)>STOP_DEBOUNCE_TIME)
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001676:	d109      	bne.n	800168c <HAL_GPIO_EXTI_Callback+0x4c>
 8001678:	4b2e      	ldr	r3, [pc, #184]	; (8001734 <HAL_GPIO_EXTI_Callback+0xf4>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b2e      	ldr	r3, [pc, #184]	; (8001738 <HAL_GPIO_EXTI_Callback+0xf8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	; 0x64
 8001684:	d902      	bls.n	800168c <HAL_GPIO_EXTI_Callback+0x4c>
    {
        light = LIGHT_STOP;
 8001686:	4b2d      	ldr	r3, [pc, #180]	; (800173c <HAL_GPIO_EXTI_Callback+0xfc>)
 8001688:	2202      	movs	r2, #2
 800168a:	701a      	strb	r2, [r3, #0]
    }
    //button emergency
    if((GPIO_Pin == BE_Pin) && (current_time - previous_time)>BUTTON_DEBOUNCE_TIME)
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001692:	d114      	bne.n	80016be <HAL_GPIO_EXTI_Callback+0x7e>
 8001694:	4b27      	ldr	r3, [pc, #156]	; (8001734 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b27      	ldr	r3, [pc, #156]	; (8001738 <HAL_GPIO_EXTI_Callback+0xf8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2bfa      	cmp	r3, #250	; 0xfa
 80016a0:	d90d      	bls.n	80016be <HAL_GPIO_EXTI_Callback+0x7e>
    {
    	emergency_button_value = !emergency_button_value;		//toggle of value
 80016a2:	4b27      	ldr	r3, [pc, #156]	; (8001740 <HAL_GPIO_EXTI_Callback+0x100>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	bf0c      	ite	eq
 80016ac:	2301      	moveq	r3, #1
 80016ae:	2300      	movne	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b22      	ldr	r3, [pc, #136]	; (8001740 <HAL_GPIO_EXTI_Callback+0x100>)
 80016b6:	701a      	strb	r2, [r3, #0]
        light = LIGHT_EMERGENCY;
 80016b8:	4b20      	ldr	r3, [pc, #128]	; (800173c <HAL_GPIO_EXTI_Callback+0xfc>)
 80016ba:	2204      	movs	r2, #4
 80016bc:	701a      	strb	r2, [r3, #0]
    }
    //button left
    if((GPIO_Pin == BL_Pin) && (current_time - previous_time)>BUTTON_DEBOUNCE_TIME)
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016c4:	d114      	bne.n	80016f0 <HAL_GPIO_EXTI_Callback+0xb0>
 80016c6:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <HAL_GPIO_EXTI_Callback+0xf4>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <HAL_GPIO_EXTI_Callback+0xf8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2bfa      	cmp	r3, #250	; 0xfa
 80016d2:	d90d      	bls.n	80016f0 <HAL_GPIO_EXTI_Callback+0xb0>
    {
    	left_button_value = !left_button_value;					//toggle of value
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <HAL_GPIO_EXTI_Callback+0x104>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	bf0c      	ite	eq
 80016de:	2301      	moveq	r3, #1
 80016e0:	2300      	movne	r3, #0
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <HAL_GPIO_EXTI_Callback+0x104>)
 80016e8:	701a      	strb	r2, [r3, #0]
        light = LIGHT_LEFT;
 80016ea:	4b14      	ldr	r3, [pc, #80]	; (800173c <HAL_GPIO_EXTI_Callback+0xfc>)
 80016ec:	2206      	movs	r2, #6
 80016ee:	701a      	strb	r2, [r3, #0]
    }
    //button right
    if((GPIO_Pin == BR_Pin) && (current_time - previous_time)>BUTTON_DEBOUNCE_TIME)
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016f6:	d114      	bne.n	8001722 <HAL_GPIO_EXTI_Callback+0xe2>
 80016f8:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <HAL_GPIO_EXTI_Callback+0xf4>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <HAL_GPIO_EXTI_Callback+0xf8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2bfa      	cmp	r3, #250	; 0xfa
 8001704:	d90d      	bls.n	8001722 <HAL_GPIO_EXTI_Callback+0xe2>
    {
        right_button_value = !right_button_value;				//toggle of value
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <HAL_GPIO_EXTI_Callback+0x108>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b00      	cmp	r3, #0
 800170e:	bf0c      	ite	eq
 8001710:	2301      	moveq	r3, #1
 8001712:	2300      	movne	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	461a      	mov	r2, r3
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_GPIO_EXTI_Callback+0x108>)
 800171a:	701a      	strb	r2, [r3, #0]
        light = LIGHT_RIGHT;
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <HAL_GPIO_EXTI_Callback+0xfc>)
 800171e:	2208      	movs	r2, #8
 8001720:	701a      	strb	r2, [r3, #0]
    }
    previous_time = current_time;						//previous time assignment
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a04      	ldr	r2, [pc, #16]	; (8001738 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001728:	6013      	str	r3, [r2, #0]
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	2000026c 	.word	0x2000026c
 8001738:	20000268 	.word	0x20000268
 800173c:	20000267 	.word	0x20000267
 8001740:	20000264 	.word	0x20000264
 8001744:	20000265 	.word	0x20000265
 8001748:	20000266 	.word	0x20000266

0800174c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001750:	f000 ffe2 	bl	8002718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001754:	f000 f868 	bl	8001828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001758:	f7ff fcfe 	bl	8001158 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800175c:	f000 ff40 	bl	80025e0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001760:	f000 fcee 	bl	8002140 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001764:	f7ff fc62 	bl	800102c <MX_ADC1_Init>
  MX_SPI2_Init();
 8001768:	f000 fd20 	bl	80021ac <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  nRF24_Init(&hspi1);
 800176c:	4829      	ldr	r0, [pc, #164]	; (8001814 <main+0xc8>)
 800176e:	f000 fc91 	bl	8002094 <nRF24_Init>
  nRF24_SetRXAddress(0, "Nad");
 8001772:	4929      	ldr	r1, [pc, #164]	; (8001818 <main+0xcc>)
 8001774:	2000      	movs	r0, #0
 8001776:	f000 fb6e 	bl	8001e56 <nRF24_SetRXAddress>
  nRF24_SetTXAddress("Odb");
 800177a:	4828      	ldr	r0, [pc, #160]	; (800181c <main+0xd0>)
 800177c:	f000 fba4 	bl	8001ec8 <nRF24_SetTXAddress>
  nRF24_TX_Mode();
 8001780:	f000 f992 	bl	8001aa8 <nRF24_TX_Mode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      switch(light)
 8001784:	4b26      	ldr	r3, [pc, #152]	; (8001820 <main+0xd4>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b08      	cmp	r3, #8
 800178c:	d8fa      	bhi.n	8001784 <main+0x38>
 800178e:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <main+0x48>)
 8001790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001794:	08001807 	.word	0x08001807
 8001798:	080017b9 	.word	0x080017b9
 800179c:	080017d5 	.word	0x080017d5
 80017a0:	08001785 	.word	0x08001785
 80017a4:	080017e1 	.word	0x080017e1
 80017a8:	08001785 	.word	0x08001785
 80017ac:	080017ed 	.word	0x080017ed
 80017b0:	08001785 	.word	0x08001785
 80017b4:	080017f9 	.word	0x080017f9
      {
      //battery
      case LIGHT_BATTERY:
    	  adc_value = get_adc_battery_value();
 80017b8:	f7ff fb80 	bl	8000ebc <get_adc_battery_value>
 80017bc:	4603      	mov	r3, r0
 80017be:	4a19      	ldr	r2, [pc, #100]	; (8001824 <main+0xd8>)
 80017c0:	6013      	str	r3, [r2, #0]
          battery_level_show(adc_value);
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <main+0xd8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fbc8 	bl	8000f5c <battery_level_show>
          light = LIGHT_INIT;				//default value
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <main+0xd4>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]
          break;
 80017d2:	e01e      	b.n	8001812 <main+0xc6>
      //stop
      case LIGHT_STOP:
    	  stop_light_logic();
 80017d4:	f7ff fda2 	bl	800131c <stop_light_logic>
    	  light = LIGHT_INIT;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <main+0xd4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
    	  break;
 80017de:	e018      	b.n	8001812 <main+0xc6>
      //emergency
      case LIGHT_EMERGENCY:
    	  emergency_light_logic();
 80017e0:	f7ff fdde 	bl	80013a0 <emergency_light_logic>
    	  light = LIGHT_INIT;
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <main+0xd4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
    	  break;
 80017ea:	e012      	b.n	8001812 <main+0xc6>
      //left turn
      case LIGHT_LEFT:
    	  left_light_logic();
 80017ec:	f7ff fe3c 	bl	8001468 <left_light_logic>
    	  light = LIGHT_INIT;
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <main+0xd4>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
    	  break;
 80017f6:	e00c      	b.n	8001812 <main+0xc6>
      //right turn
      case LIGHT_RIGHT:
    	  right_light_logic();
 80017f8:	f7ff fea0 	bl	800153c <right_light_logic>
    	  light = LIGHT_INIT;
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <main+0xd4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
    	  break;
 8001802:	e006      	b.n	8001812 <main+0xc6>
      //empty (do nothing)
      case LIGHT_INIT:
    	  while(light == LIGHT_INIT){
    		  __NOP();						//do nothing
 8001804:	bf00      	nop
    	  while(light == LIGHT_INIT){
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <main+0xd4>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f9      	beq.n	8001804 <main+0xb8>
    	  }
    	  break;
 8001810:	bf00      	nop
      switch(light)
 8001812:	e7b7      	b.n	8001784 <main+0x38>
 8001814:	20000278 	.word	0x20000278
 8001818:	080080a0 	.word	0x080080a0
 800181c:	080080a4 	.word	0x080080a4
 8001820:	20000267 	.word	0x20000267
 8001824:	200001f8 	.word	0x200001f8

08001828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b094      	sub	sp, #80	; 0x50
 800182c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800182e:	f107 0320 	add.w	r3, r7, #32
 8001832:	2230      	movs	r2, #48	; 0x30
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f003 fcce 	bl	80051d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800184c:	2300      	movs	r3, #0
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <SystemClock_Config+0xd0>)
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	4a28      	ldr	r2, [pc, #160]	; (80018f8 <SystemClock_Config+0xd0>)
 8001856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185a:	6413      	str	r3, [r2, #64]	; 0x40
 800185c:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <SystemClock_Config+0xd0>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001868:	2300      	movs	r3, #0
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	4b23      	ldr	r3, [pc, #140]	; (80018fc <SystemClock_Config+0xd4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001874:	4a21      	ldr	r2, [pc, #132]	; (80018fc <SystemClock_Config+0xd4>)
 8001876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <SystemClock_Config+0xd4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001888:	2302      	movs	r3, #2
 800188a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800188c:	2301      	movs	r3, #1
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001890:	2310      	movs	r3, #16
 8001892:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001894:	2302      	movs	r3, #2
 8001896:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001898:	2300      	movs	r3, #0
 800189a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800189c:	2310      	movs	r3, #16
 800189e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80018a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018a6:	2304      	movs	r3, #4
 80018a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018aa:	2304      	movs	r3, #4
 80018ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ae:	f107 0320 	add.w	r3, r7, #32
 80018b2:	4618      	mov	r0, r3
 80018b4:	f001 fe64 	bl	8003580 <HAL_RCC_OscConfig>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018be:	f000 f81f 	bl	8001900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c2:	230f      	movs	r3, #15
 80018c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018c6:	2302      	movs	r3, #2
 80018c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	2102      	movs	r1, #2
 80018de:	4618      	mov	r0, r3
 80018e0:	f002 f8c6 	bl	8003a70 <HAL_RCC_ClockConfig>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80018ea:	f000 f809 	bl	8001900 <Error_Handler>
  }
}
 80018ee:	bf00      	nop
 80018f0:	3750      	adds	r7, #80	; 0x50
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40007000 	.word	0x40007000

08001900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001904:	b672      	cpsid	i
}
 8001906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001908:	e7fe      	b.n	8001908 <Error_Handler+0x8>

0800190a <nRF24_Delay>:
 	 	 	 	 	 	 	 	 FUNCTIONS
*//////////////////////////////////////////////////////////////////////////////


static void nRF24_Delay(uint8_t Time)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8001914:	2001      	movs	r0, #1
 8001916:	f000 ff71 	bl	80027fc <HAL_Delay>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <nRF24_SendSpi+0x28>)
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	b29a      	uxth	r2, r3
 8001938:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	f002 fb40 	bl	8003fc2 <HAL_SPI_Transmit>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000270 	.word	0x20000270

08001950 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <nRF24_ReadSpi+0x28>)
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	b29a      	uxth	r2, r3
 8001964:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	f002 fc66 	bl	800423a <HAL_SPI_Receive>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000270 	.word	0x20000270

0800197c <nRF24_ReadRegister>:


// END OF BASIC READ/WRITE FUNCTIONS

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800198a:	2200      	movs	r2, #0
 800198c:	2180      	movs	r1, #128	; 0x80
 800198e:	480c      	ldr	r0, [pc, #48]	; (80019c0 <nRF24_ReadRegister+0x44>)
 8001990:	f001 fdc4 	bl	800351c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001994:	1dfb      	adds	r3, r7, #7
 8001996:	2101      	movs	r1, #1
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ffc3 	bl	8001924 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 800199e:	f107 030f 	add.w	r3, r7, #15
 80019a2:	2101      	movs	r1, #1
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ffd3 	bl	8001950 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 80019aa:	2201      	movs	r2, #1
 80019ac:	2180      	movs	r1, #128	; 0x80
 80019ae:	4804      	ldr	r0, [pc, #16]	; (80019c0 <nRF24_ReadRegister+0x44>)
 80019b0:	f001 fdb4 	bl	800351c <HAL_GPIO_WritePin>

	return result;
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40020800 	.word	0x40020800

080019c4 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	6039      	str	r1, [r7, #0]
 80019ce:	71fb      	strb	r3, [r7, #7]
 80019d0:	4613      	mov	r3, r2
 80019d2:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80019d8:	2200      	movs	r2, #0
 80019da:	2180      	movs	r1, #128	; 0x80
 80019dc:	480a      	ldr	r0, [pc, #40]	; (8001a08 <nRF24_ReadRegisters+0x44>)
 80019de:	f001 fd9d 	bl	800351c <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 80019e2:	1dfb      	adds	r3, r7, #7
 80019e4:	2101      	movs	r1, #1
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff ff9c 	bl	8001924 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 80019ec:	79bb      	ldrb	r3, [r7, #6]
 80019ee:	4619      	mov	r1, r3
 80019f0:	6838      	ldr	r0, [r7, #0]
 80019f2:	f7ff ffad 	bl	8001950 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 80019f6:	2201      	movs	r2, #1
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	4803      	ldr	r0, [pc, #12]	; (8001a08 <nRF24_ReadRegisters+0x44>)
 80019fc:	f001 fd8e 	bl	800351c <HAL_GPIO_WritePin>
}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40020800 	.word	0x40020800

08001a0c <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	460a      	mov	r2, r1
 8001a16:	71fb      	strb	r3, [r7, #7]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	f043 0320 	orr.w	r3, r3, #32
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8001a26:	79bb      	ldrb	r3, [r7, #6]
 8001a28:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2180      	movs	r1, #128	; 0x80
 8001a2e:	4809      	ldr	r0, [pc, #36]	; (8001a54 <nRF24_WriteRegister+0x48>)
 8001a30:	f001 fd74 	bl	800351c <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001a34:	f107 030c 	add.w	r3, r7, #12
 8001a38:	2102      	movs	r1, #2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff72 	bl	8001924 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001a40:	2201      	movs	r2, #1
 8001a42:	2180      	movs	r1, #128	; 0x80
 8001a44:	4803      	ldr	r0, [pc, #12]	; (8001a54 <nRF24_WriteRegister+0x48>)
 8001a46:	f001 fd69 	bl	800351c <HAL_GPIO_WritePin>
}
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40020800 	.word	0x40020800

08001a58 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	6039      	str	r1, [r7, #0]
 8001a62:	71fb      	strb	r3, [r7, #7]
 8001a64:	4613      	mov	r3, r2
 8001a66:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	f043 0320 	orr.w	r3, r3, #32
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001a72:	2200      	movs	r2, #0
 8001a74:	2180      	movs	r1, #128	; 0x80
 8001a76:	480b      	ldr	r0, [pc, #44]	; (8001aa4 <nRF24_WriteRegisters+0x4c>)
 8001a78:	f001 fd50 	bl	800351c <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001a7c:	1dfb      	adds	r3, r7, #7
 8001a7e:	2101      	movs	r1, #1
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff4f 	bl	8001924 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001a86:	79bb      	ldrb	r3, [r7, #6]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	6838      	ldr	r0, [r7, #0]
 8001a8c:	f7ff ff4a 	bl	8001924 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001a90:	2201      	movs	r2, #1
 8001a92:	2180      	movs	r1, #128	; 0x80
 8001a94:	4803      	ldr	r0, [pc, #12]	; (8001aa4 <nRF24_WriteRegisters+0x4c>)
 8001a96:	f001 fd41 	bl	800351c <HAL_GPIO_WritePin>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40020800 	.word	0x40020800

08001aa8 <nRF24_TX_Mode>:
	NRF24_CE_HIGH;
	nRF24_Delay(1);
}

void nRF24_TX_Mode(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2140      	movs	r1, #64	; 0x40
 8001ab2:	4810      	ldr	r0, [pc, #64]	; (8001af4 <nRF24_TX_Mode+0x4c>)
 8001ab4:	f001 fd32 	bl	800351c <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8001ab8:	f000 f81e 	bl	8001af8 <nRF24_ReadConfig>
 8001abc:	4603      	mov	r3, r0
 8001abe:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	f043 0302 	orr.w	r3, r3, #2
 8001ac6:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	f023 0301 	bic.w	r3, r3, #1
 8001ace:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 f818 	bl	8001b08 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001ad8:	2070      	movs	r0, #112	; 0x70
 8001ada:	f000 f870 	bl	8001bbe <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001ade:	f000 f87d 	bl	8001bdc <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001ae2:	f000 f895 	bl	8001c10 <nRF24_FlushTX>

	nRF24_Delay(1);
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f7ff ff0f 	bl	800190a <nRF24_Delay>
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40020400 	.word	0x40020400

08001af8 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8001afc:	2000      	movs	r0, #0
 8001afe:	f7ff ff3d 	bl	800197c <nRF24_ReadRegister>
 8001b02:	4603      	mov	r3, r0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	4619      	mov	r1, r3
 8001b16:	2000      	movs	r0, #0
 8001b18:	f7ff ff78 	bl	8001a0c <nRF24_WriteRegister>
}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001b2e:	2006      	movs	r0, #6
 8001b30:	f7ff ff24 	bl	800197c <nRF24_ReadRegister>
 8001b34:	4603      	mov	r3, r0
 8001b36:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	f023 0307 	bic.w	r3, r3, #7
 8001b3e:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	b25a      	sxtb	r2, r3
 8001b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	b25b      	sxtb	r3, r3
 8001b4e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	4619      	mov	r1, r3
 8001b54:	2006      	movs	r0, #6
 8001b56:	f7ff ff59 	bl	8001a0c <nRF24_WriteRegister>
}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001b6c:	2006      	movs	r0, #6
 8001b6e:	f7ff ff05 	bl	800197c <nRF24_ReadRegister>
 8001b72:	4603      	mov	r3, r0
 8001b74:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001b7c:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d104      	bne.n	8001b8e <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	f043 0320 	orr.w	r3, r3, #32
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	e006      	b.n	8001b9c <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d103      	bne.n	8001b9c <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	f043 0308 	orr.w	r3, r3, #8
 8001b9a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	2006      	movs	r0, #6
 8001ba2:	f7ff ff33 	bl	8001a0c <nRF24_WriteRegister>
}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8001bb2:	2007      	movs	r0, #7
 8001bb4:	f7ff fee2 	bl	800197c <nRF24_ReadRegister>
 8001bb8:	4603      	mov	r3, r0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	2007      	movs	r0, #7
 8001bce:	f7ff ff1d 	bl	8001a0c <nRF24_WriteRegister>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8001be2:	23e2      	movs	r3, #226	; 0xe2
 8001be4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001be6:	2200      	movs	r2, #0
 8001be8:	2180      	movs	r1, #128	; 0x80
 8001bea:	4808      	ldr	r0, [pc, #32]	; (8001c0c <nRF24_FlushRX+0x30>)
 8001bec:	f001 fc96 	bl	800351c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8001bf0:	1dfb      	adds	r3, r7, #7
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fe95 	bl	8001924 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	2180      	movs	r1, #128	; 0x80
 8001bfe:	4803      	ldr	r0, [pc, #12]	; (8001c0c <nRF24_FlushRX+0x30>)
 8001c00:	f001 fc8c 	bl	800351c <HAL_GPIO_WritePin>
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40020800 	.word	0x40020800

08001c10 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8001c16:	23e1      	movs	r3, #225	; 0xe1
 8001c18:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2180      	movs	r1, #128	; 0x80
 8001c1e:	4808      	ldr	r0, [pc, #32]	; (8001c40 <nRF24_FlushTX+0x30>)
 8001c20:	f001 fc7c 	bl	800351c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8001c24:	1dfb      	adds	r3, r7, #7
 8001c26:	2101      	movs	r1, #1
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fe7b 	bl	8001924 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2180      	movs	r1, #128	; 0x80
 8001c32:	4803      	ldr	r0, [pc, #12]	; (8001c40 <nRF24_FlushTX+0x30>)
 8001c34:	f001 fc72 	bl	800351c <HAL_GPIO_WritePin>
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40020800 	.word	0x40020800

08001c44 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001c4e:	f7ff ff53 	bl	8001af8 <nRF24_ReadConfig>
 8001c52:	4603      	mov	r3, r0
 8001c54:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d004      	beq.n	8001c66 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	f043 0308 	orr.w	r3, r3, #8
 8001c62:	73fb      	strb	r3, [r7, #15]
 8001c64:	e003      	b.n	8001c6e <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	f023 0308 	bic.w	r3, r3, #8
 8001c6c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff49 	bl	8001b08 <nRF24_WriteConfig>
}
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b084      	sub	sp, #16
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	4603      	mov	r3, r0
 8001c86:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001c88:	f7ff ff36 	bl	8001af8 <nRF24_ReadConfig>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d104      	bne.n	8001ca0 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	73fb      	strb	r3, [r7, #15]
 8001c9e:	e003      	b.n	8001ca8 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	f023 0304 	bic.w	r3, r3, #4
 8001ca6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff2c 	bl	8001b08 <nRF24_WriteConfig>
}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	71fb      	strb	r3, [r7, #7]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	b25a      	sxtb	r2, r3
 8001cce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	b25b      	sxtb	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	b25b      	sxtb	r3, r3
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	4619      	mov	r1, r3
 8001ce0:	2004      	movs	r0, #4
 8001ce2:	f7ff fe93 	bl	8001a0c <nRF24_WriteRegister>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	4619      	mov	r1, r3
 8001d02:	2005      	movs	r0, #5
 8001d04:	f7ff fe82 	bl	8001a0c <nRF24_WriteRegister>
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	460a      	mov	r2, r1
 8001d1a:	71fb      	strb	r3, [r7, #7]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	2b05      	cmp	r3, #5
 8001d24:	d901      	bls.n	8001d2a <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 8001d26:	2305      	movs	r3, #5
 8001d28:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	3311      	adds	r3, #17
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	79bb      	ldrb	r3, [r7, #6]
 8001d32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	f7ff fe66 	bl	8001a0c <nRF24_WriteRegister>
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	460a      	mov	r2, r1
 8001d52:	71fb      	strb	r3, [r7, #7]
 8001d54:	4613      	mov	r3, r2
 8001d56:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	2b05      	cmp	r3, #5
 8001d5c:	d901      	bls.n	8001d62 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8001d5e:	2305      	movs	r3, #5
 8001d60:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8001d62:	2002      	movs	r0, #2
 8001d64:	f7ff fe0a 	bl	800197c <nRF24_ReadRegister>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8001d6c:	79bb      	ldrb	r3, [r7, #6]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d10a      	bne.n	8001d88 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	2201      	movs	r2, #1
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	b25a      	sxtb	r2, r3
 8001d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	b25b      	sxtb	r3, r3
 8001d84:	73fb      	strb	r3, [r7, #15]
 8001d86:	e00b      	b.n	8001da0 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	b25b      	sxtb	r3, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	b25a      	sxtb	r2, r3
 8001d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	b25b      	sxtb	r3, r3
 8001d9e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	4619      	mov	r1, r3
 8001da4:	2002      	movs	r0, #2
 8001da6:	f7ff fe31 	bl	8001a0c <nRF24_WriteRegister>
}
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b084      	sub	sp, #16
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	460a      	mov	r2, r1
 8001dbc:	71fb      	strb	r3, [r7, #7]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	2b05      	cmp	r3, #5
 8001dc6:	d901      	bls.n	8001dcc <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8001dc8:	2305      	movs	r3, #5
 8001dca:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f7ff fdd5 	bl	800197c <nRF24_ReadRegister>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8001dd6:	79bb      	ldrb	r3, [r7, #6]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d10a      	bne.n	8001df2 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	2201      	movs	r2, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	b25a      	sxtb	r2, r3
 8001de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	b25b      	sxtb	r3, r3
 8001dee:	73fb      	strb	r3, [r7, #15]
 8001df0:	e00b      	b.n	8001e0a <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	2201      	movs	r2, #1
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	b25b      	sxtb	r3, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	b25a      	sxtb	r2, r3
 8001e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e04:	4013      	ands	r3, r2
 8001e06:	b25b      	sxtb	r3, r3
 8001e08:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f7ff fdfc 	bl	8001a0c <nRF24_WriteRegister>
}
 8001e14:	bf00      	nop
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	2b05      	cmp	r3, #5
 8001e2a:	d901      	bls.n	8001e30 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8001e2c:	2305      	movs	r3, #5
 8001e2e:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d801      	bhi.n	8001e3a <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8001e36:	2303      	movs	r3, #3
 8001e38:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	3b02      	subs	r3, #2
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	4619      	mov	r1, r3
 8001e48:	2003      	movs	r0, #3
 8001e4a:	f7ff fddf 	bl	8001a0c <nRF24_WriteRegister>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	6039      	str	r1, [r7, #0]
 8001e60:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <nRF24_SetRXAddress+0x18>
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d11d      	bne.n	8001eaa <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	73fb      	strb	r3, [r7, #15]
 8001e72:	e00d      	b.n	8001e90 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	441a      	add	r2, r3
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	f1c3 0302 	rsb	r3, r3, #2
 8001e80:	7812      	ldrb	r2, [r2, #0]
 8001e82:	3310      	adds	r3, #16
 8001e84:	443b      	add	r3, r7
 8001e86:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	73fb      	strb	r3, [r7, #15]
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d9ee      	bls.n	8001e74 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	330a      	adds	r3, #10
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	f107 010c 	add.w	r1, r7, #12
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fdd8 	bl	8001a58 <nRF24_WriteRegisters>
	{
 8001ea8:	e00a      	b.n	8001ec0 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	330a      	adds	r3, #10
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4610      	mov	r0, r2
 8001eba:	f7ff fda7 	bl	8001a0c <nRF24_WriteRegister>
}
 8001ebe:	bf00      	nop
 8001ec0:	bf00      	nop
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8001ed0:	f107 030c 	add.w	r3, r7, #12
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	200a      	movs	r0, #10
 8001eda:	f7ff fd73 	bl	80019c4 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	73fb      	strb	r3, [r7, #15]
 8001ee2:	e00c      	b.n	8001efe <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	f1c3 0302 	rsb	r3, r3, #2
 8001eec:	3210      	adds	r2, #16
 8001eee:	443a      	add	r2, r7
 8001ef0:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8001ef4:	4a16      	ldr	r2, [pc, #88]	; (8001f50 <nRF24_SetTXAddress+0x88>)
 8001ef6:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	3301      	adds	r3, #1
 8001efc:	73fb      	strb	r3, [r7, #15]
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d9ef      	bls.n	8001ee4 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001f04:	2300      	movs	r3, #0
 8001f06:	73fb      	strb	r3, [r7, #15]
 8001f08:	e00d      	b.n	8001f26 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	441a      	add	r2, r3
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	f1c3 0302 	rsb	r3, r3, #2
 8001f16:	7812      	ldrb	r2, [r2, #0]
 8001f18:	3310      	adds	r3, #16
 8001f1a:	443b      	add	r3, r7
 8001f1c:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	3301      	adds	r3, #1
 8001f24:	73fb      	strb	r3, [r7, #15]
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d9ee      	bls.n	8001f0a <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8001f2c:	f107 030c 	add.w	r3, r7, #12
 8001f30:	2203      	movs	r2, #3
 8001f32:	4619      	mov	r1, r3
 8001f34:	200a      	movs	r0, #10
 8001f36:	f7ff fd8f 	bl	8001a58 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8001f3a:	f107 030c 	add.w	r3, r7, #12
 8001f3e:	2203      	movs	r2, #3
 8001f40:	4619      	mov	r1, r3
 8001f42:	2010      	movs	r0, #16
 8001f44:	f7ff fd88 	bl	8001a58 <nRF24_WriteRegisters>

}
 8001f48:	bf00      	nop
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000274 	.word	0x20000274

08001f54 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8001f5a:	f7ff fe28 	bl	8001bae <nRF24_ReadStatus>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001f68:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fe26 	bl	8001bbe <nRF24_WriteStatus>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001f84:	f7ff fdb8 	bl	8001af8 <nRF24_ReadConfig>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d104      	bne.n	8001f9c <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f98:	73fb      	strb	r3, [r7, #15]
 8001f9a:	e003      	b.n	8001fa4 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fa2:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fdae 	bl	8001b08 <nRF24_WriteConfig>
}
 8001fac:	bf00      	nop
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001fbe:	f7ff fd9b 	bl	8001af8 <nRF24_ReadConfig>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d104      	bne.n	8001fd6 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	f043 0320 	orr.w	r3, r3, #32
 8001fd2:	73fb      	strb	r3, [r7, #15]
 8001fd4:	e003      	b.n	8001fde <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	f023 0320 	bic.w	r3, r3, #32
 8001fdc:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fd91 	bl	8001b08 <nRF24_WriteConfig>
}
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b084      	sub	sp, #16
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001ff8:	f7ff fd7e 	bl	8001af8 <nRF24_ReadConfig>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d104      	bne.n	8002010 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	f043 0310 	orr.w	r3, r3, #16
 800200c:	73fb      	strb	r3, [r7, #15]
 800200e:	e003      	b.n	8002018 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	f023 0310 	bic.w	r3, r3, #16
 8002016:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fd74 	bl	8001b08 <nRF24_WriteConfig>
}
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8002030:	2201      	movs	r2, #1
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	20a0      	movs	r0, #160	; 0xa0
 8002036:	f7ff fd0f 	bl	8001a58 <nRF24_WriteRegisters>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 800204a:	2201      	movs	r2, #1
 800204c:	2140      	movs	r1, #64	; 0x40
 800204e:	4810      	ldr	r0, [pc, #64]	; (8002090 <nRF24_WaitTX+0x4c>)
 8002050:	f001 fa64 	bl	800351c <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 8002054:	2001      	movs	r0, #1
 8002056:	f7ff fc58 	bl	800190a <nRF24_Delay>
	NRF24_CE_LOW;
 800205a:	2200      	movs	r2, #0
 800205c:	2140      	movs	r1, #64	; 0x40
 800205e:	480c      	ldr	r0, [pc, #48]	; (8002090 <nRF24_WaitTX+0x4c>)
 8002060:	f001 fa5c 	bl	800351c <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 8002064:	2001      	movs	r0, #1
 8002066:	f7ff fc50 	bl	800190a <nRF24_Delay>
		status = nRF24_ReadStatus();
 800206a:	f7ff fda0 	bl	8001bae <nRF24_ReadStatus>
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	2b00      	cmp	r3, #0
 800207a:	d104      	bne.n	8002086 <nRF24_WaitTX+0x42>
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0ee      	beq.n	8002064 <nRF24_WaitTX+0x20>

}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40020400 	.word	0x40020400

08002094 <nRF24_Init>:
		nRF24_WriteStatus(status);
	}
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 800209c:	4a25      	ldr	r2, [pc, #148]	; (8002134 <nRF24_Init+0xa0>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 80020a2:	2200      	movs	r2, #0
 80020a4:	2140      	movs	r1, #64	; 0x40
 80020a6:	4824      	ldr	r0, [pc, #144]	; (8002138 <nRF24_Init+0xa4>)
 80020a8:	f001 fa38 	bl	800351c <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 80020ac:	2201      	movs	r2, #1
 80020ae:	2180      	movs	r1, #128	; 0x80
 80020b0:	4822      	ldr	r0, [pc, #136]	; (800213c <nRF24_Init+0xa8>)
 80020b2:	f001 fa33 	bl	800351c <HAL_GPIO_WritePin>

	nRF24_Delay(5); // Wait for radio power up
 80020b6:	2005      	movs	r0, #5
 80020b8:	f7ff fc27 	bl	800190a <nRF24_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 80020bc:	2003      	movs	r0, #3
 80020be:	f7ff fd31 	bl	8001b24 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 80020c2:	2002      	movs	r0, #2
 80020c4:	f7ff fd4d 	bl	8001b62 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 80020c8:	2001      	movs	r0, #1
 80020ca:	f7ff fdbb 	bl	8001c44 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 80020ce:	2000      	movs	r0, #0
 80020d0:	f7ff fdd5 	bl	8001c7e <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 80020d4:	2107      	movs	r1, #7
 80020d6:	2004      	movs	r0, #4
 80020d8:	f7ff fdee 	bl	8001cb8 <nRF24_SetRetries>
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 80020dc:	2100      	movs	r1, #0
 80020de:	201c      	movs	r0, #28
 80020e0:	f7ff fc94 	bl	8001a0c <nRF24_WriteRegister>
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 80020e4:	200a      	movs	r0, #10
 80020e6:	f7ff fe02 	bl	8001cee <nRF24_SetRFChannel>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 80020ea:	2101      	movs	r1, #1
 80020ec:	2000      	movs	r0, #0
 80020ee:	f7ff fe0f 	bl	8001d10 <nRF24_SetPayloadSize>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 80020f2:	2101      	movs	r1, #1
 80020f4:	2000      	movs	r0, #0
 80020f6:	f7ff fe27 	bl	8001d48 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 80020fa:	2101      	movs	r1, #1
 80020fc:	2000      	movs	r0, #0
 80020fe:	f7ff fe58 	bl	8001db2 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8002102:	2003      	movs	r0, #3
 8002104:	f7ff fe8a 	bl	8001e1c <nRF24_SetAddressWidth>

	nRF24_Delay(20);
 8002108:	2014      	movs	r0, #20
 800210a:	f7ff fbfe 	bl	800190a <nRF24_Delay>

	nRF24_EnableRXDataReadyIRQ(0);
 800210e:	2000      	movs	r0, #0
 8002110:	f7ff ff33 	bl	8001f7a <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 8002114:	2000      	movs	r0, #0
 8002116:	f7ff ff4d 	bl	8001fb4 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 800211a:	2000      	movs	r0, #0
 800211c:	f7ff ff67 	bl	8001fee <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay(20);
 8002120:	2014      	movs	r0, #20
 8002122:	f7ff fbf2 	bl	800190a <nRF24_Delay>

	nRF24_ClearInterrupts();
 8002126:	f7ff ff15 	bl	8001f54 <nRF24_ClearInterrupts>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000270 	.word	0x20000270
 8002138:	40020400 	.word	0x40020400
 800213c:	40020800 	.word	0x40020800

08002140 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002144:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <MX_SPI1_Init+0x64>)
 8002146:	4a18      	ldr	r2, [pc, #96]	; (80021a8 <MX_SPI1_Init+0x68>)
 8002148:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800214a:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <MX_SPI1_Init+0x64>)
 800214c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002150:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002152:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <MX_SPI1_Init+0x64>)
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <MX_SPI1_Init+0x64>)
 800215a:	2200      	movs	r2, #0
 800215c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <MX_SPI1_Init+0x64>)
 8002160:	2200      	movs	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <MX_SPI1_Init+0x64>)
 8002166:	2200      	movs	r2, #0
 8002168:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800216a:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <MX_SPI1_Init+0x64>)
 800216c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002170:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002172:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <MX_SPI1_Init+0x64>)
 8002174:	2218      	movs	r2, #24
 8002176:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002178:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <MX_SPI1_Init+0x64>)
 800217a:	2200      	movs	r2, #0
 800217c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <MX_SPI1_Init+0x64>)
 8002180:	2200      	movs	r2, #0
 8002182:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002184:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <MX_SPI1_Init+0x64>)
 8002186:	2200      	movs	r2, #0
 8002188:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <MX_SPI1_Init+0x64>)
 800218c:	220a      	movs	r2, #10
 800218e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002190:	4804      	ldr	r0, [pc, #16]	; (80021a4 <MX_SPI1_Init+0x64>)
 8002192:	f001 fe8d 	bl	8003eb0 <HAL_SPI_Init>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800219c:	f7ff fbb0 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000278 	.word	0x20000278
 80021a8:	40013000 	.word	0x40013000

080021ac <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80021b0:	4b17      	ldr	r3, [pc, #92]	; (8002210 <MX_SPI2_Init+0x64>)
 80021b2:	4a18      	ldr	r2, [pc, #96]	; (8002214 <MX_SPI2_Init+0x68>)
 80021b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021b6:	4b16      	ldr	r3, [pc, #88]	; (8002210 <MX_SPI2_Init+0x64>)
 80021b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021be:	4b14      	ldr	r3, [pc, #80]	; (8002210 <MX_SPI2_Init+0x64>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <MX_SPI2_Init+0x64>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <MX_SPI2_Init+0x64>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021d0:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <MX_SPI2_Init+0x64>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80021d6:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <MX_SPI2_Init+0x64>)
 80021d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80021de:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <MX_SPI2_Init+0x64>)
 80021e0:	2208      	movs	r2, #8
 80021e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021e4:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <MX_SPI2_Init+0x64>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <MX_SPI2_Init+0x64>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021f0:	4b07      	ldr	r3, [pc, #28]	; (8002210 <MX_SPI2_Init+0x64>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80021f6:	4b06      	ldr	r3, [pc, #24]	; (8002210 <MX_SPI2_Init+0x64>)
 80021f8:	220a      	movs	r2, #10
 80021fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021fc:	4804      	ldr	r0, [pc, #16]	; (8002210 <MX_SPI2_Init+0x64>)
 80021fe:	f001 fe57 	bl	8003eb0 <HAL_SPI_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002208:	f7ff fb7a 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}
 8002210:	200002d0 	.word	0x200002d0
 8002214:	40003800 	.word	0x40003800

08002218 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08c      	sub	sp, #48	; 0x30
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002220:	f107 031c 	add.w	r3, r7, #28
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a41      	ldr	r2, [pc, #260]	; (800233c <HAL_SPI_MspInit+0x124>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d12c      	bne.n	8002294 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	4b40      	ldr	r3, [pc, #256]	; (8002340 <HAL_SPI_MspInit+0x128>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	4a3f      	ldr	r2, [pc, #252]	; (8002340 <HAL_SPI_MspInit+0x128>)
 8002244:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002248:	6453      	str	r3, [r2, #68]	; 0x44
 800224a:	4b3d      	ldr	r3, [pc, #244]	; (8002340 <HAL_SPI_MspInit+0x128>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002252:	61bb      	str	r3, [r7, #24]
 8002254:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	4b39      	ldr	r3, [pc, #228]	; (8002340 <HAL_SPI_MspInit+0x128>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a38      	ldr	r2, [pc, #224]	; (8002340 <HAL_SPI_MspInit+0x128>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b36      	ldr	r3, [pc, #216]	; (8002340 <HAL_SPI_MspInit+0x128>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002272:	23e0      	movs	r3, #224	; 0xe0
 8002274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002276:	2302      	movs	r3, #2
 8002278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002282:	2305      	movs	r3, #5
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002286:	f107 031c 	add.w	r3, r7, #28
 800228a:	4619      	mov	r1, r3
 800228c:	482d      	ldr	r0, [pc, #180]	; (8002344 <HAL_SPI_MspInit+0x12c>)
 800228e:	f000 ffa9 	bl	80031e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002292:	e04f      	b.n	8002334 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a2b      	ldr	r2, [pc, #172]	; (8002348 <HAL_SPI_MspInit+0x130>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d14a      	bne.n	8002334 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	4b27      	ldr	r3, [pc, #156]	; (8002340 <HAL_SPI_MspInit+0x128>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	4a26      	ldr	r2, [pc, #152]	; (8002340 <HAL_SPI_MspInit+0x128>)
 80022a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ac:	6413      	str	r3, [r2, #64]	; 0x40
 80022ae:	4b24      	ldr	r3, [pc, #144]	; (8002340 <HAL_SPI_MspInit+0x128>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	4b20      	ldr	r3, [pc, #128]	; (8002340 <HAL_SPI_MspInit+0x128>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a1f      	ldr	r2, [pc, #124]	; (8002340 <HAL_SPI_MspInit+0x128>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <HAL_SPI_MspInit+0x128>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	4b19      	ldr	r3, [pc, #100]	; (8002340 <HAL_SPI_MspInit+0x128>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a18      	ldr	r2, [pc, #96]	; (8002340 <HAL_SPI_MspInit+0x128>)
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b16      	ldr	r3, [pc, #88]	; (8002340 <HAL_SPI_MspInit+0x128>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022f2:	2308      	movs	r3, #8
 80022f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fe:	2303      	movs	r3, #3
 8002300:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002302:	2305      	movs	r3, #5
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002306:	f107 031c 	add.w	r3, r7, #28
 800230a:	4619      	mov	r1, r3
 800230c:	480f      	ldr	r0, [pc, #60]	; (800234c <HAL_SPI_MspInit+0x134>)
 800230e:	f000 ff69 	bl	80031e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	2303      	movs	r3, #3
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002324:	2305      	movs	r3, #5
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002328:	f107 031c 	add.w	r3, r7, #28
 800232c:	4619      	mov	r1, r3
 800232e:	4808      	ldr	r0, [pc, #32]	; (8002350 <HAL_SPI_MspInit+0x138>)
 8002330:	f000 ff58 	bl	80031e4 <HAL_GPIO_Init>
}
 8002334:	bf00      	nop
 8002336:	3730      	adds	r7, #48	; 0x30
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40013000 	.word	0x40013000
 8002340:	40023800 	.word	0x40023800
 8002344:	40020000 	.word	0x40020000
 8002348:	40003800 	.word	0x40003800
 800234c:	40020800 	.word	0x40020800
 8002350:	40020400 	.word	0x40020400

08002354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <HAL_MspInit+0x4c>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	4a0f      	ldr	r2, [pc, #60]	; (80023a0 <HAL_MspInit+0x4c>)
 8002364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002368:	6453      	str	r3, [r2, #68]	; 0x44
 800236a:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <HAL_MspInit+0x4c>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002372:	607b      	str	r3, [r7, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	603b      	str	r3, [r7, #0]
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_MspInit+0x4c>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	4a08      	ldr	r2, [pc, #32]	; (80023a0 <HAL_MspInit+0x4c>)
 8002380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002384:	6413      	str	r3, [r2, #64]	; 0x40
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_MspInit+0x4c>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002392:	2007      	movs	r0, #7
 8002394:	f000 fee4 	bl	8003160 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40023800 	.word	0x40023800

080023a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <NMI_Handler+0x4>

080023aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ae:	e7fe      	b.n	80023ae <HardFault_Handler+0x4>

080023b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <MemManage_Handler+0x4>

080023b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ba:	e7fe      	b.n	80023ba <BusFault_Handler+0x4>

080023bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <UsageFault_Handler+0x4>

080023c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023f0:	f000 f9e4 	bl	80027bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BE_Pin);
 80023fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002400:	f001 f8a6 	bl	8003550 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002404:	bf00      	nop
 8002406:	bd80      	pop	{r7, pc}

08002408 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BS_Pin);
 800240c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002410:	f001 f89e 	bl	8003550 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BB_Pin);
 8002414:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002418:	f001 f89a 	bl	8003550 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BL_Pin);
 800241c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002420:	f001 f896 	bl	8003550 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BR_Pin);
 8002424:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002428:	f001 f892 	bl	8003550 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}

08002430 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
	return 1;
 8002434:	2301      	movs	r3, #1
}
 8002436:	4618      	mov	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <_kill>:

int _kill(int pid, int sig)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800244a:	f002 fe9b 	bl	8005184 <__errno>
 800244e:	4603      	mov	r3, r0
 8002450:	2216      	movs	r2, #22
 8002452:	601a      	str	r2, [r3, #0]
	return -1;
 8002454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <_exit>:

void _exit (int status)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002468:	f04f 31ff 	mov.w	r1, #4294967295
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ffe7 	bl	8002440 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002472:	e7fe      	b.n	8002472 <_exit+0x12>

08002474 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	e00a      	b.n	800249c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002486:	f3af 8000 	nop.w
 800248a:	4601      	mov	r1, r0
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	60ba      	str	r2, [r7, #8]
 8002492:	b2ca      	uxtb	r2, r1
 8002494:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3301      	adds	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	dbf0      	blt.n	8002486 <_read+0x12>
	}

return len;
 80024a4:	687b      	ldr	r3, [r7, #4]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b086      	sub	sp, #24
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	60f8      	str	r0, [r7, #12]
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	e009      	b.n	80024d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	60ba      	str	r2, [r7, #8]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff f8a1 	bl	8001610 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	3301      	adds	r3, #1
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	429a      	cmp	r2, r3
 80024da:	dbf1      	blt.n	80024c0 <_write+0x12>
	}
	return len;
 80024dc:	687b      	ldr	r3, [r7, #4]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <_close>:

int _close(int file)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
	return -1;
 80024ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800250e:	605a      	str	r2, [r3, #4]
	return 0;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <_isatty>:

int _isatty(int file)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
	return 1;
 8002526:	2301      	movs	r3, #1
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
	return 0;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002558:	4a14      	ldr	r2, [pc, #80]	; (80025ac <_sbrk+0x5c>)
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <_sbrk+0x60>)
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002564:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <_sbrk+0x64>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800256c:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <_sbrk+0x64>)
 800256e:	4a12      	ldr	r2, [pc, #72]	; (80025b8 <_sbrk+0x68>)
 8002570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002572:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <_sbrk+0x64>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	429a      	cmp	r2, r3
 800257e:	d207      	bcs.n	8002590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002580:	f002 fe00 	bl	8005184 <__errno>
 8002584:	4603      	mov	r3, r0
 8002586:	220c      	movs	r2, #12
 8002588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800258a:	f04f 33ff 	mov.w	r3, #4294967295
 800258e:	e009      	b.n	80025a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <_sbrk+0x64>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002596:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <_sbrk+0x64>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	4a05      	ldr	r2, [pc, #20]	; (80025b4 <_sbrk+0x64>)
 80025a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025a2:	68fb      	ldr	r3, [r7, #12]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20020000 	.word	0x20020000
 80025b0:	00000400 	.word	0x00000400
 80025b4:	20000328 	.word	0x20000328
 80025b8:	20000388 	.word	0x20000388

080025bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <SystemInit+0x20>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <SystemInit+0x20>)
 80025c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025e4:	4b11      	ldr	r3, [pc, #68]	; (800262c <MX_USART2_UART_Init+0x4c>)
 80025e6:	4a12      	ldr	r2, [pc, #72]	; (8002630 <MX_USART2_UART_Init+0x50>)
 80025e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025ea:	4b10      	ldr	r3, [pc, #64]	; (800262c <MX_USART2_UART_Init+0x4c>)
 80025ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025f2:	4b0e      	ldr	r3, [pc, #56]	; (800262c <MX_USART2_UART_Init+0x4c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025f8:	4b0c      	ldr	r3, [pc, #48]	; (800262c <MX_USART2_UART_Init+0x4c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025fe:	4b0b      	ldr	r3, [pc, #44]	; (800262c <MX_USART2_UART_Init+0x4c>)
 8002600:	2200      	movs	r2, #0
 8002602:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002604:	4b09      	ldr	r3, [pc, #36]	; (800262c <MX_USART2_UART_Init+0x4c>)
 8002606:	220c      	movs	r2, #12
 8002608:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800260a:	4b08      	ldr	r3, [pc, #32]	; (800262c <MX_USART2_UART_Init+0x4c>)
 800260c:	2200      	movs	r2, #0
 800260e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002610:	4b06      	ldr	r3, [pc, #24]	; (800262c <MX_USART2_UART_Init+0x4c>)
 8002612:	2200      	movs	r2, #0
 8002614:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002616:	4805      	ldr	r0, [pc, #20]	; (800262c <MX_USART2_UART_Init+0x4c>)
 8002618:	f002 f9f2 	bl	8004a00 <HAL_UART_Init>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002622:	f7ff f96d 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	2000032c 	.word	0x2000032c
 8002630:	40004400 	.word	0x40004400

08002634 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	; 0x28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a19      	ldr	r2, [pc, #100]	; (80026b8 <HAL_UART_MspInit+0x84>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d12b      	bne.n	80026ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	4b18      	ldr	r3, [pc, #96]	; (80026bc <HAL_UART_MspInit+0x88>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4a17      	ldr	r2, [pc, #92]	; (80026bc <HAL_UART_MspInit+0x88>)
 8002660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <HAL_UART_MspInit+0x88>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b11      	ldr	r3, [pc, #68]	; (80026bc <HAL_UART_MspInit+0x88>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	4a10      	ldr	r2, [pc, #64]	; (80026bc <HAL_UART_MspInit+0x88>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6313      	str	r3, [r2, #48]	; 0x30
 8002682:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <HAL_UART_MspInit+0x88>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800268e:	230c      	movs	r3, #12
 8002690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002692:	2302      	movs	r3, #2
 8002694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269a:	2303      	movs	r3, #3
 800269c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800269e:	2307      	movs	r3, #7
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a2:	f107 0314 	add.w	r3, r7, #20
 80026a6:	4619      	mov	r1, r3
 80026a8:	4805      	ldr	r0, [pc, #20]	; (80026c0 <HAL_UART_MspInit+0x8c>)
 80026aa:	f000 fd9b 	bl	80031e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026ae:	bf00      	nop
 80026b0:	3728      	adds	r7, #40	; 0x28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40004400 	.word	0x40004400
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40020000 	.word	0x40020000

080026c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026c8:	480d      	ldr	r0, [pc, #52]	; (8002700 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026ca:	490e      	ldr	r1, [pc, #56]	; (8002704 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026cc:	4a0e      	ldr	r2, [pc, #56]	; (8002708 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d0:	e002      	b.n	80026d8 <LoopCopyDataInit>

080026d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d6:	3304      	adds	r3, #4

080026d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026dc:	d3f9      	bcc.n	80026d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026de:	4a0b      	ldr	r2, [pc, #44]	; (800270c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026e0:	4c0b      	ldr	r4, [pc, #44]	; (8002710 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e4:	e001      	b.n	80026ea <LoopFillZerobss>

080026e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e8:	3204      	adds	r2, #4

080026ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ec:	d3fb      	bcc.n	80026e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026ee:	f7ff ff65 	bl	80025bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026f2:	f002 fd4d 	bl	8005190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026f6:	f7ff f829 	bl	800174c <main>
  bx  lr    
 80026fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002704:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002708:	080084ac 	.word	0x080084ac
  ldr r2, =_sbss
 800270c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002710:	20000384 	.word	0x20000384

08002714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002714:	e7fe      	b.n	8002714 <ADC_IRQHandler>
	...

08002718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800271c:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <HAL_Init+0x40>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0d      	ldr	r2, [pc, #52]	; (8002758 <HAL_Init+0x40>)
 8002722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002726:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_Init+0x40>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <HAL_Init+0x40>)
 800272e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002732:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <HAL_Init+0x40>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a07      	ldr	r2, [pc, #28]	; (8002758 <HAL_Init+0x40>)
 800273a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002740:	2003      	movs	r0, #3
 8002742:	f000 fd0d 	bl	8003160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002746:	2000      	movs	r0, #0
 8002748:	f000 f808 	bl	800275c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800274c:	f7ff fe02 	bl	8002354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40023c00 	.word	0x40023c00

0800275c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002764:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_InitTick+0x54>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_InitTick+0x58>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	4619      	mov	r1, r3
 800276e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002772:	fbb3 f3f1 	udiv	r3, r3, r1
 8002776:	fbb2 f3f3 	udiv	r3, r2, r3
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fd25 	bl	80031ca <HAL_SYSTICK_Config>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e00e      	b.n	80027a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b0f      	cmp	r3, #15
 800278e:	d80a      	bhi.n	80027a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002790:	2200      	movs	r2, #0
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	f04f 30ff 	mov.w	r0, #4294967295
 8002798:	f000 fced 	bl	8003176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800279c:	4a06      	ldr	r2, [pc, #24]	; (80027b8 <HAL_InitTick+0x5c>)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e000      	b.n	80027a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000000 	.word	0x20000000
 80027b4:	20000008 	.word	0x20000008
 80027b8:	20000004 	.word	0x20000004

080027bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_IncTick+0x20>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_IncTick+0x24>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <HAL_IncTick+0x24>)
 80027ce:	6013      	str	r3, [r2, #0]
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000008 	.word	0x20000008
 80027e0:	20000370 	.word	0x20000370

080027e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return uwTick;
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_GetTick+0x14>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000370 	.word	0x20000370

080027fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002804:	f7ff ffee 	bl	80027e4 <HAL_GetTick>
 8002808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002814:	d005      	beq.n	8002822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002816:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <HAL_Delay+0x44>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4413      	add	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002822:	bf00      	nop
 8002824:	f7ff ffde 	bl	80027e4 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	429a      	cmp	r2, r3
 8002832:	d8f7      	bhi.n	8002824 <HAL_Delay+0x28>
  {
  }
}
 8002834:	bf00      	nop
 8002836:	bf00      	nop
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000008 	.word	0x20000008

08002844 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e033      	b.n	80028c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	2b00      	cmp	r3, #0
 8002860:	d109      	bne.n	8002876 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7fe fc34 	bl	80010d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f003 0310 	and.w	r3, r3, #16
 800287e:	2b00      	cmp	r3, #0
 8002880:	d118      	bne.n	80028b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800288a:	f023 0302 	bic.w	r3, r3, #2
 800288e:	f043 0202 	orr.w	r2, r3, #2
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fa96 	bl	8002dc8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f023 0303 	bic.w	r3, r3, #3
 80028aa:	f043 0201 	orr.w	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	641a      	str	r2, [r3, #64]	; 0x40
 80028b2:	e001      	b.n	80028b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_ADC_Start+0x1a>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e097      	b.n	8002a16 <HAL_ADC_Start+0x14a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d018      	beq.n	800292e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800290c:	4b45      	ldr	r3, [pc, #276]	; (8002a24 <HAL_ADC_Start+0x158>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a45      	ldr	r2, [pc, #276]	; (8002a28 <HAL_ADC_Start+0x15c>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	0c9a      	lsrs	r2, r3, #18
 8002918:	4613      	mov	r3, r2
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	4413      	add	r3, r2
 800291e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002920:	e002      	b.n	8002928 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	3b01      	subs	r3, #1
 8002926:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f9      	bne.n	8002922 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b01      	cmp	r3, #1
 800293a:	d15f      	bne.n	80029fc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295a:	2b00      	cmp	r3, #0
 800295c:	d007      	beq.n	800296e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002966:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800297a:	d106      	bne.n	800298a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002980:	f023 0206 	bic.w	r2, r3, #6
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	645a      	str	r2, [r3, #68]	; 0x44
 8002988:	e002      	b.n	8002990 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002998:	4b24      	ldr	r3, [pc, #144]	; (8002a2c <HAL_ADC_Start+0x160>)
 800299a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80029a4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 031f 	and.w	r3, r3, #31
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10f      	bne.n	80029d2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d129      	bne.n	8002a14 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	e020      	b.n	8002a14 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a16      	ldr	r2, [pc, #88]	; (8002a30 <HAL_ADC_Start+0x164>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d11b      	bne.n	8002a14 <HAL_ADC_Start+0x148>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d114      	bne.n	8002a14 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	e00b      	b.n	8002a14 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	f043 0210 	orr.w	r2, r3, #16
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0c:	f043 0201 	orr.w	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	20000000 	.word	0x20000000
 8002a28:	431bde83 	.word	0x431bde83
 8002a2c:	40012300 	.word	0x40012300
 8002a30:	40012000 	.word	0x40012000

08002a34 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a50:	d113      	bne.n	8002a7a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a60:	d10b      	bne.n	8002a7a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f043 0220 	orr.w	r2, r3, #32
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e063      	b.n	8002b42 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002a7a:	f7ff feb3 	bl	80027e4 <HAL_GetTick>
 8002a7e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a80:	e021      	b.n	8002ac6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a88:	d01d      	beq.n	8002ac6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d007      	beq.n	8002aa0 <HAL_ADC_PollForConversion+0x6c>
 8002a90:	f7ff fea8 	bl	80027e4 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d212      	bcs.n	8002ac6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d00b      	beq.n	8002ac6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f043 0204 	orr.w	r2, r3, #4
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e03d      	b.n	8002b42 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d1d6      	bne.n	8002a82 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0212 	mvn.w	r2, #18
 8002adc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d123      	bne.n	8002b40 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d11f      	bne.n	8002b40 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d006      	beq.n	8002b1c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d111      	bne.n	8002b40 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d105      	bne.n	8002b40 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	f043 0201 	orr.w	r2, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x1c>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e113      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x244>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b09      	cmp	r3, #9
 8002b8e:	d925      	bls.n	8002bdc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68d9      	ldr	r1, [r3, #12]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3b1e      	subs	r3, #30
 8002ba6:	2207      	movs	r2, #7
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43da      	mvns	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	400a      	ands	r2, r1
 8002bb4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68d9      	ldr	r1, [r3, #12]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	4603      	mov	r3, r0
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4403      	add	r3, r0
 8002bce:	3b1e      	subs	r3, #30
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	60da      	str	r2, [r3, #12]
 8002bda:	e022      	b.n	8002c22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6919      	ldr	r1, [r3, #16]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	4613      	mov	r3, r2
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4413      	add	r3, r2
 8002bf0:	2207      	movs	r2, #7
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	400a      	ands	r2, r1
 8002bfe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6919      	ldr	r1, [r3, #16]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	4618      	mov	r0, r3
 8002c12:	4603      	mov	r3, r0
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4403      	add	r3, r0
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d824      	bhi.n	8002c74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	3b05      	subs	r3, #5
 8002c3c:	221f      	movs	r2, #31
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43da      	mvns	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	400a      	ands	r2, r1
 8002c4a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	4618      	mov	r0, r3
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	3b05      	subs	r3, #5
 8002c66:	fa00 f203 	lsl.w	r2, r0, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	635a      	str	r2, [r3, #52]	; 0x34
 8002c72:	e04c      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b0c      	cmp	r3, #12
 8002c7a:	d824      	bhi.n	8002cc6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3b23      	subs	r3, #35	; 0x23
 8002c8e:	221f      	movs	r2, #31
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43da      	mvns	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	400a      	ands	r2, r1
 8002c9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	4618      	mov	r0, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3b23      	subs	r3, #35	; 0x23
 8002cb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	631a      	str	r2, [r3, #48]	; 0x30
 8002cc4:	e023      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3b41      	subs	r3, #65	; 0x41
 8002cd8:	221f      	movs	r2, #31
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43da      	mvns	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	400a      	ands	r2, r1
 8002ce6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	3b41      	subs	r3, #65	; 0x41
 8002d02:	fa00 f203 	lsl.w	r2, r0, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d0e:	4b29      	ldr	r3, [pc, #164]	; (8002db4 <HAL_ADC_ConfigChannel+0x250>)
 8002d10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a28      	ldr	r2, [pc, #160]	; (8002db8 <HAL_ADC_ConfigChannel+0x254>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d10f      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x1d8>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b12      	cmp	r3, #18
 8002d22:	d10b      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a1d      	ldr	r2, [pc, #116]	; (8002db8 <HAL_ADC_ConfigChannel+0x254>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d12b      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x23a>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a1c      	ldr	r2, [pc, #112]	; (8002dbc <HAL_ADC_ConfigChannel+0x258>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d003      	beq.n	8002d58 <HAL_ADC_ConfigChannel+0x1f4>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b11      	cmp	r3, #17
 8002d56:	d122      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a11      	ldr	r2, [pc, #68]	; (8002dbc <HAL_ADC_ConfigChannel+0x258>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d111      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d7a:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <HAL_ADC_ConfigChannel+0x25c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a11      	ldr	r2, [pc, #68]	; (8002dc4 <HAL_ADC_ConfigChannel+0x260>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	0c9a      	lsrs	r2, r3, #18
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d90:	e002      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	3b01      	subs	r3, #1
 8002d96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f9      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	40012300 	.word	0x40012300
 8002db8:	40012000 	.word	0x40012000
 8002dbc:	10000012 	.word	0x10000012
 8002dc0:	20000000 	.word	0x20000000
 8002dc4:	431bde83 	.word	0x431bde83

08002dc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dd0:	4b79      	ldr	r3, [pc, #484]	; (8002fb8 <ADC_Init+0x1f0>)
 8002dd2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	431a      	orrs	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6859      	ldr	r1, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	021a      	lsls	r2, r3, #8
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6899      	ldr	r1, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5a:	4a58      	ldr	r2, [pc, #352]	; (8002fbc <ADC_Init+0x1f4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d022      	beq.n	8002ea6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6899      	ldr	r1, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6899      	ldr	r1, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	e00f      	b.n	8002ec6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002eb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ec4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0202 	bic.w	r2, r2, #2
 8002ed4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6899      	ldr	r1, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	7e1b      	ldrb	r3, [r3, #24]
 8002ee0:	005a      	lsls	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d01b      	beq.n	8002f2c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f02:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6859      	ldr	r1, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	035a      	lsls	r2, r3, #13
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	e007      	b.n	8002f3c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	051a      	lsls	r2, r3, #20
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6899      	ldr	r1, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f7e:	025a      	lsls	r2, r3, #9
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6899      	ldr	r1, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	029a      	lsls	r2, r3, #10
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	609a      	str	r2, [r3, #8]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	40012300 	.word	0x40012300
 8002fbc:	0f000001 	.word	0x0f000001

08002fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fd0:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <__NVIC_SetPriorityGrouping+0x44>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fdc:	4013      	ands	r3, r2
 8002fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ff2:	4a04      	ldr	r2, [pc, #16]	; (8003004 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	60d3      	str	r3, [r2, #12]
}
 8002ff8:	bf00      	nop
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800300c:	4b04      	ldr	r3, [pc, #16]	; (8003020 <__NVIC_GetPriorityGrouping+0x18>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	0a1b      	lsrs	r3, r3, #8
 8003012:	f003 0307 	and.w	r3, r3, #7
}
 8003016:	4618      	mov	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	2b00      	cmp	r3, #0
 8003034:	db0b      	blt.n	800304e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	f003 021f 	and.w	r2, r3, #31
 800303c:	4907      	ldr	r1, [pc, #28]	; (800305c <__NVIC_EnableIRQ+0x38>)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	2001      	movs	r0, #1
 8003046:	fa00 f202 	lsl.w	r2, r0, r2
 800304a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	e000e100 	.word	0xe000e100

08003060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	6039      	str	r1, [r7, #0]
 800306a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800306c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003070:	2b00      	cmp	r3, #0
 8003072:	db0a      	blt.n	800308a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	b2da      	uxtb	r2, r3
 8003078:	490c      	ldr	r1, [pc, #48]	; (80030ac <__NVIC_SetPriority+0x4c>)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	0112      	lsls	r2, r2, #4
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	440b      	add	r3, r1
 8003084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003088:	e00a      	b.n	80030a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	b2da      	uxtb	r2, r3
 800308e:	4908      	ldr	r1, [pc, #32]	; (80030b0 <__NVIC_SetPriority+0x50>)
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	3b04      	subs	r3, #4
 8003098:	0112      	lsls	r2, r2, #4
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	440b      	add	r3, r1
 800309e:	761a      	strb	r2, [r3, #24]
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	e000e100 	.word	0xe000e100
 80030b0:	e000ed00 	.word	0xe000ed00

080030b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b089      	sub	sp, #36	; 0x24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f1c3 0307 	rsb	r3, r3, #7
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	bf28      	it	cs
 80030d2:	2304      	movcs	r3, #4
 80030d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	3304      	adds	r3, #4
 80030da:	2b06      	cmp	r3, #6
 80030dc:	d902      	bls.n	80030e4 <NVIC_EncodePriority+0x30>
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	3b03      	subs	r3, #3
 80030e2:	e000      	b.n	80030e6 <NVIC_EncodePriority+0x32>
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e8:	f04f 32ff 	mov.w	r2, #4294967295
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43da      	mvns	r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	401a      	ands	r2, r3
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	fa01 f303 	lsl.w	r3, r1, r3
 8003106:	43d9      	mvns	r1, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800310c:	4313      	orrs	r3, r2
         );
}
 800310e:	4618      	mov	r0, r3
 8003110:	3724      	adds	r7, #36	; 0x24
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3b01      	subs	r3, #1
 8003128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800312c:	d301      	bcc.n	8003132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800312e:	2301      	movs	r3, #1
 8003130:	e00f      	b.n	8003152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003132:	4a0a      	ldr	r2, [pc, #40]	; (800315c <SysTick_Config+0x40>)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3b01      	subs	r3, #1
 8003138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800313a:	210f      	movs	r1, #15
 800313c:	f04f 30ff 	mov.w	r0, #4294967295
 8003140:	f7ff ff8e 	bl	8003060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003144:	4b05      	ldr	r3, [pc, #20]	; (800315c <SysTick_Config+0x40>)
 8003146:	2200      	movs	r2, #0
 8003148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800314a:	4b04      	ldr	r3, [pc, #16]	; (800315c <SysTick_Config+0x40>)
 800314c:	2207      	movs	r2, #7
 800314e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	e000e010 	.word	0xe000e010

08003160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7ff ff29 	bl	8002fc0 <__NVIC_SetPriorityGrouping>
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003176:	b580      	push	{r7, lr}
 8003178:	b086      	sub	sp, #24
 800317a:	af00      	add	r7, sp, #0
 800317c:	4603      	mov	r3, r0
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003188:	f7ff ff3e 	bl	8003008 <__NVIC_GetPriorityGrouping>
 800318c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	6978      	ldr	r0, [r7, #20]
 8003194:	f7ff ff8e 	bl	80030b4 <NVIC_EncodePriority>
 8003198:	4602      	mov	r2, r0
 800319a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800319e:	4611      	mov	r1, r2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff ff5d 	bl	8003060 <__NVIC_SetPriority>
}
 80031a6:	bf00      	nop
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	4603      	mov	r3, r0
 80031b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff ff31 	bl	8003024 <__NVIC_EnableIRQ>
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff ffa2 	bl	800311c <SysTick_Config>
 80031d8:	4603      	mov	r3, r0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
	...

080031e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b089      	sub	sp, #36	; 0x24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	e159      	b.n	80034b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003200:	2201      	movs	r2, #1
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4013      	ands	r3, r2
 8003212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	429a      	cmp	r2, r3
 800321a:	f040 8148 	bne.w	80034ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	2b01      	cmp	r3, #1
 8003228:	d005      	beq.n	8003236 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003232:	2b02      	cmp	r3, #2
 8003234:	d130      	bne.n	8003298 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	2203      	movs	r2, #3
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800326c:	2201      	movs	r2, #1
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 0201 	and.w	r2, r3, #1
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d017      	beq.n	80032d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	2203      	movs	r2, #3
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d123      	bne.n	8003328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	08da      	lsrs	r2, r3, #3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3208      	adds	r2, #8
 80032e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	220f      	movs	r2, #15
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	08da      	lsrs	r2, r3, #3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3208      	adds	r2, #8
 8003322:	69b9      	ldr	r1, [r7, #24]
 8003324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	2203      	movs	r2, #3
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 0203 	and.w	r2, r3, #3
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80a2 	beq.w	80034ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	4b57      	ldr	r3, [pc, #348]	; (80034cc <HAL_GPIO_Init+0x2e8>)
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	4a56      	ldr	r2, [pc, #344]	; (80034cc <HAL_GPIO_Init+0x2e8>)
 8003374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003378:	6453      	str	r3, [r2, #68]	; 0x44
 800337a:	4b54      	ldr	r3, [pc, #336]	; (80034cc <HAL_GPIO_Init+0x2e8>)
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003386:	4a52      	ldr	r2, [pc, #328]	; (80034d0 <HAL_GPIO_Init+0x2ec>)
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	089b      	lsrs	r3, r3, #2
 800338c:	3302      	adds	r3, #2
 800338e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	220f      	movs	r2, #15
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a49      	ldr	r2, [pc, #292]	; (80034d4 <HAL_GPIO_Init+0x2f0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d019      	beq.n	80033e6 <HAL_GPIO_Init+0x202>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a48      	ldr	r2, [pc, #288]	; (80034d8 <HAL_GPIO_Init+0x2f4>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_GPIO_Init+0x1fe>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a47      	ldr	r2, [pc, #284]	; (80034dc <HAL_GPIO_Init+0x2f8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00d      	beq.n	80033de <HAL_GPIO_Init+0x1fa>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a46      	ldr	r2, [pc, #280]	; (80034e0 <HAL_GPIO_Init+0x2fc>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d007      	beq.n	80033da <HAL_GPIO_Init+0x1f6>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a45      	ldr	r2, [pc, #276]	; (80034e4 <HAL_GPIO_Init+0x300>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d101      	bne.n	80033d6 <HAL_GPIO_Init+0x1f2>
 80033d2:	2304      	movs	r3, #4
 80033d4:	e008      	b.n	80033e8 <HAL_GPIO_Init+0x204>
 80033d6:	2307      	movs	r3, #7
 80033d8:	e006      	b.n	80033e8 <HAL_GPIO_Init+0x204>
 80033da:	2303      	movs	r3, #3
 80033dc:	e004      	b.n	80033e8 <HAL_GPIO_Init+0x204>
 80033de:	2302      	movs	r3, #2
 80033e0:	e002      	b.n	80033e8 <HAL_GPIO_Init+0x204>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_GPIO_Init+0x204>
 80033e6:	2300      	movs	r3, #0
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	f002 0203 	and.w	r2, r2, #3
 80033ee:	0092      	lsls	r2, r2, #2
 80033f0:	4093      	lsls	r3, r2
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033f8:	4935      	ldr	r1, [pc, #212]	; (80034d0 <HAL_GPIO_Init+0x2ec>)
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	089b      	lsrs	r3, r3, #2
 80033fe:	3302      	adds	r3, #2
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003406:	4b38      	ldr	r3, [pc, #224]	; (80034e8 <HAL_GPIO_Init+0x304>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	43db      	mvns	r3, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4013      	ands	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800342a:	4a2f      	ldr	r2, [pc, #188]	; (80034e8 <HAL_GPIO_Init+0x304>)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003430:	4b2d      	ldr	r3, [pc, #180]	; (80034e8 <HAL_GPIO_Init+0x304>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003454:	4a24      	ldr	r2, [pc, #144]	; (80034e8 <HAL_GPIO_Init+0x304>)
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800345a:	4b23      	ldr	r3, [pc, #140]	; (80034e8 <HAL_GPIO_Init+0x304>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	43db      	mvns	r3, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4013      	ands	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800347e:	4a1a      	ldr	r2, [pc, #104]	; (80034e8 <HAL_GPIO_Init+0x304>)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003484:	4b18      	ldr	r3, [pc, #96]	; (80034e8 <HAL_GPIO_Init+0x304>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034a8:	4a0f      	ldr	r2, [pc, #60]	; (80034e8 <HAL_GPIO_Init+0x304>)
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3301      	adds	r3, #1
 80034b2:	61fb      	str	r3, [r7, #28]
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	2b0f      	cmp	r3, #15
 80034b8:	f67f aea2 	bls.w	8003200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034bc:	bf00      	nop
 80034be:	bf00      	nop
 80034c0:	3724      	adds	r7, #36	; 0x24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40013800 	.word	0x40013800
 80034d4:	40020000 	.word	0x40020000
 80034d8:	40020400 	.word	0x40020400
 80034dc:	40020800 	.word	0x40020800
 80034e0:	40020c00 	.word	0x40020c00
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40013c00 	.word	0x40013c00

080034ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	887b      	ldrh	r3, [r7, #2]
 80034fe:	4013      	ands	r3, r2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
 8003508:	e001      	b.n	800350e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800350a:	2300      	movs	r3, #0
 800350c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800350e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	807b      	strh	r3, [r7, #2]
 8003528:	4613      	mov	r3, r2
 800352a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800352c:	787b      	ldrb	r3, [r7, #1]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003532:	887a      	ldrh	r2, [r7, #2]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003538:	e003      	b.n	8003542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800353a:	887b      	ldrh	r3, [r7, #2]
 800353c:	041a      	lsls	r2, r3, #16
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	619a      	str	r2, [r3, #24]
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800355a:	4b08      	ldr	r3, [pc, #32]	; (800357c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d006      	beq.n	8003574 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003566:	4a05      	ldr	r2, [pc, #20]	; (800357c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800356c:	88fb      	ldrh	r3, [r7, #6]
 800356e:	4618      	mov	r0, r3
 8003570:	f7fe f866 	bl	8001640 <HAL_GPIO_EXTI_Callback>
  }
}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40013c00 	.word	0x40013c00

08003580 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e267      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d075      	beq.n	800368a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800359e:	4b88      	ldr	r3, [pc, #544]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d00c      	beq.n	80035c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035aa:	4b85      	ldr	r3, [pc, #532]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d112      	bne.n	80035dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b6:	4b82      	ldr	r3, [pc, #520]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c2:	d10b      	bne.n	80035dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c4:	4b7e      	ldr	r3, [pc, #504]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d05b      	beq.n	8003688 <HAL_RCC_OscConfig+0x108>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d157      	bne.n	8003688 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e242      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e4:	d106      	bne.n	80035f4 <HAL_RCC_OscConfig+0x74>
 80035e6:	4b76      	ldr	r3, [pc, #472]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a75      	ldr	r2, [pc, #468]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e01d      	b.n	8003630 <HAL_RCC_OscConfig+0xb0>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x98>
 80035fe:	4b70      	ldr	r3, [pc, #448]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a6f      	ldr	r2, [pc, #444]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	4b6d      	ldr	r3, [pc, #436]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a6c      	ldr	r2, [pc, #432]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	e00b      	b.n	8003630 <HAL_RCC_OscConfig+0xb0>
 8003618:	4b69      	ldr	r3, [pc, #420]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a68      	ldr	r2, [pc, #416]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 800361e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	4b66      	ldr	r3, [pc, #408]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a65      	ldr	r2, [pc, #404]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 800362a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800362e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7ff f8d4 	bl	80027e4 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003640:	f7ff f8d0 	bl	80027e4 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b64      	cmp	r3, #100	; 0x64
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e207      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	4b5b      	ldr	r3, [pc, #364]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0xc0>
 800365e:	e014      	b.n	800368a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003660:	f7ff f8c0 	bl	80027e4 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003668:	f7ff f8bc 	bl	80027e4 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b64      	cmp	r3, #100	; 0x64
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e1f3      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367a:	4b51      	ldr	r3, [pc, #324]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0xe8>
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d063      	beq.n	800375e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003696:	4b4a      	ldr	r3, [pc, #296]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00b      	beq.n	80036ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036a2:	4b47      	ldr	r3, [pc, #284]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d11c      	bne.n	80036e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ae:	4b44      	ldr	r3, [pc, #272]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d116      	bne.n	80036e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ba:	4b41      	ldr	r3, [pc, #260]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <HAL_RCC_OscConfig+0x152>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d001      	beq.n	80036d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e1c7      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d2:	4b3b      	ldr	r3, [pc, #236]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4937      	ldr	r1, [pc, #220]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e6:	e03a      	b.n	800375e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d020      	beq.n	8003732 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f0:	4b34      	ldr	r3, [pc, #208]	; (80037c4 <HAL_RCC_OscConfig+0x244>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f6:	f7ff f875 	bl	80027e4 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036fe:	f7ff f871 	bl	80027e4 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e1a8      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003710:	4b2b      	ldr	r3, [pc, #172]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f0      	beq.n	80036fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371c:	4b28      	ldr	r3, [pc, #160]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	4925      	ldr	r1, [pc, #148]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 800372c:	4313      	orrs	r3, r2
 800372e:	600b      	str	r3, [r1, #0]
 8003730:	e015      	b.n	800375e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003732:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <HAL_RCC_OscConfig+0x244>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003738:	f7ff f854 	bl	80027e4 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003740:	f7ff f850 	bl	80027e4 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e187      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003752:	4b1b      	ldr	r3, [pc, #108]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d036      	beq.n	80037d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d016      	beq.n	80037a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003772:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <HAL_RCC_OscConfig+0x248>)
 8003774:	2201      	movs	r2, #1
 8003776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003778:	f7ff f834 	bl	80027e4 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003780:	f7ff f830 	bl	80027e4 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e167      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003792:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0x200>
 800379e:	e01b      	b.n	80037d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a0:	4b09      	ldr	r3, [pc, #36]	; (80037c8 <HAL_RCC_OscConfig+0x248>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a6:	f7ff f81d 	bl	80027e4 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ac:	e00e      	b.n	80037cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ae:	f7ff f819 	bl	80027e4 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d907      	bls.n	80037cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e150      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
 80037c0:	40023800 	.word	0x40023800
 80037c4:	42470000 	.word	0x42470000
 80037c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037cc:	4b88      	ldr	r3, [pc, #544]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 80037ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ea      	bne.n	80037ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 8097 	beq.w	8003914 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e6:	2300      	movs	r3, #0
 80037e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ea:	4b81      	ldr	r3, [pc, #516]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10f      	bne.n	8003816 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	4b7d      	ldr	r3, [pc, #500]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	4a7c      	ldr	r2, [pc, #496]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003804:	6413      	str	r3, [r2, #64]	; 0x40
 8003806:	4b7a      	ldr	r3, [pc, #488]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003812:	2301      	movs	r3, #1
 8003814:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003816:	4b77      	ldr	r3, [pc, #476]	; (80039f4 <HAL_RCC_OscConfig+0x474>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381e:	2b00      	cmp	r3, #0
 8003820:	d118      	bne.n	8003854 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003822:	4b74      	ldr	r3, [pc, #464]	; (80039f4 <HAL_RCC_OscConfig+0x474>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a73      	ldr	r2, [pc, #460]	; (80039f4 <HAL_RCC_OscConfig+0x474>)
 8003828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382e:	f7fe ffd9 	bl	80027e4 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003836:	f7fe ffd5 	bl	80027e4 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e10c      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003848:	4b6a      	ldr	r3, [pc, #424]	; (80039f4 <HAL_RCC_OscConfig+0x474>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0f0      	beq.n	8003836 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d106      	bne.n	800386a <HAL_RCC_OscConfig+0x2ea>
 800385c:	4b64      	ldr	r3, [pc, #400]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003860:	4a63      	ldr	r2, [pc, #396]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	6713      	str	r3, [r2, #112]	; 0x70
 8003868:	e01c      	b.n	80038a4 <HAL_RCC_OscConfig+0x324>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b05      	cmp	r3, #5
 8003870:	d10c      	bne.n	800388c <HAL_RCC_OscConfig+0x30c>
 8003872:	4b5f      	ldr	r3, [pc, #380]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003876:	4a5e      	ldr	r2, [pc, #376]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003878:	f043 0304 	orr.w	r3, r3, #4
 800387c:	6713      	str	r3, [r2, #112]	; 0x70
 800387e:	4b5c      	ldr	r3, [pc, #368]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003882:	4a5b      	ldr	r2, [pc, #364]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	6713      	str	r3, [r2, #112]	; 0x70
 800388a:	e00b      	b.n	80038a4 <HAL_RCC_OscConfig+0x324>
 800388c:	4b58      	ldr	r3, [pc, #352]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 800388e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003890:	4a57      	ldr	r2, [pc, #348]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003892:	f023 0301 	bic.w	r3, r3, #1
 8003896:	6713      	str	r3, [r2, #112]	; 0x70
 8003898:	4b55      	ldr	r3, [pc, #340]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389c:	4a54      	ldr	r2, [pc, #336]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 800389e:	f023 0304 	bic.w	r3, r3, #4
 80038a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d015      	beq.n	80038d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ac:	f7fe ff9a 	bl	80027e4 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b2:	e00a      	b.n	80038ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b4:	f7fe ff96 	bl	80027e4 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e0cb      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ca:	4b49      	ldr	r3, [pc, #292]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0ee      	beq.n	80038b4 <HAL_RCC_OscConfig+0x334>
 80038d6:	e014      	b.n	8003902 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d8:	f7fe ff84 	bl	80027e4 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e0:	f7fe ff80 	bl	80027e4 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e0b5      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f6:	4b3e      	ldr	r3, [pc, #248]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1ee      	bne.n	80038e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003902:	7dfb      	ldrb	r3, [r7, #23]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d105      	bne.n	8003914 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003908:	4b39      	ldr	r3, [pc, #228]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	4a38      	ldr	r2, [pc, #224]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 800390e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003912:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80a1 	beq.w	8003a60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800391e:	4b34      	ldr	r3, [pc, #208]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
 8003926:	2b08      	cmp	r3, #8
 8003928:	d05c      	beq.n	80039e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d141      	bne.n	80039b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003932:	4b31      	ldr	r3, [pc, #196]	; (80039f8 <HAL_RCC_OscConfig+0x478>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003938:	f7fe ff54 	bl	80027e4 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003940:	f7fe ff50 	bl	80027e4 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e087      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003952:	4b27      	ldr	r3, [pc, #156]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	019b      	lsls	r3, r3, #6
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003974:	085b      	lsrs	r3, r3, #1
 8003976:	3b01      	subs	r3, #1
 8003978:	041b      	lsls	r3, r3, #16
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	061b      	lsls	r3, r3, #24
 8003982:	491b      	ldr	r1, [pc, #108]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003984:	4313      	orrs	r3, r2
 8003986:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003988:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <HAL_RCC_OscConfig+0x478>)
 800398a:	2201      	movs	r2, #1
 800398c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398e:	f7fe ff29 	bl	80027e4 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003996:	f7fe ff25 	bl	80027e4 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e05c      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a8:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x416>
 80039b4:	e054      	b.n	8003a60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b6:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <HAL_RCC_OscConfig+0x478>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039bc:	f7fe ff12 	bl	80027e4 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c4:	f7fe ff0e 	bl	80027e4 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e045      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d6:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <HAL_RCC_OscConfig+0x470>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x444>
 80039e2:	e03d      	b.n	8003a60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d107      	bne.n	80039fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e038      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
 80039f0:	40023800 	.word	0x40023800
 80039f4:	40007000 	.word	0x40007000
 80039f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039fc:	4b1b      	ldr	r3, [pc, #108]	; (8003a6c <HAL_RCC_OscConfig+0x4ec>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d028      	beq.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d121      	bne.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d11a      	bne.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d111      	bne.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	085b      	lsrs	r3, r3, #1
 8003a44:	3b01      	subs	r3, #1
 8003a46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d107      	bne.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023800 	.word	0x40023800

08003a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0cc      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a84:	4b68      	ldr	r3, [pc, #416]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d90c      	bls.n	8003aac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a92:	4b65      	ldr	r3, [pc, #404]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9a:	4b63      	ldr	r3, [pc, #396]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0b8      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d020      	beq.n	8003afa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac4:	4b59      	ldr	r3, [pc, #356]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4a58      	ldr	r2, [pc, #352]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ace:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003adc:	4b53      	ldr	r3, [pc, #332]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4a52      	ldr	r2, [pc, #328]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ae6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae8:	4b50      	ldr	r3, [pc, #320]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	494d      	ldr	r1, [pc, #308]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d044      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d107      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0e:	4b47      	ldr	r3, [pc, #284]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d119      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e07f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d003      	beq.n	8003b2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d107      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2e:	4b3f      	ldr	r3, [pc, #252]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d109      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e06f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3e:	4b3b      	ldr	r3, [pc, #236]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e067      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b4e:	4b37      	ldr	r3, [pc, #220]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f023 0203 	bic.w	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	4934      	ldr	r1, [pc, #208]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b60:	f7fe fe40 	bl	80027e4 <HAL_GetTick>
 8003b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b66:	e00a      	b.n	8003b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b68:	f7fe fe3c 	bl	80027e4 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e04f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7e:	4b2b      	ldr	r3, [pc, #172]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 020c 	and.w	r2, r3, #12
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d1eb      	bne.n	8003b68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b90:	4b25      	ldr	r3, [pc, #148]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d20c      	bcs.n	8003bb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9e:	4b22      	ldr	r3, [pc, #136]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba6:	4b20      	ldr	r3, [pc, #128]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e032      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc4:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	4916      	ldr	r1, [pc, #88]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d009      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003be2:	4b12      	ldr	r3, [pc, #72]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	490e      	ldr	r1, [pc, #56]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bf6:	f000 f821 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	490a      	ldr	r1, [pc, #40]	; (8003c30 <HAL_RCC_ClockConfig+0x1c0>)
 8003c08:	5ccb      	ldrb	r3, [r1, r3]
 8003c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0e:	4a09      	ldr	r2, [pc, #36]	; (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fe fda0 	bl	800275c <HAL_InitTick>

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40023c00 	.word	0x40023c00
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	080080a8 	.word	0x080080a8
 8003c34:	20000000 	.word	0x20000000
 8003c38:	20000004 	.word	0x20000004

08003c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c40:	b094      	sub	sp, #80	; 0x50
 8003c42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	647b      	str	r3, [r7, #68]	; 0x44
 8003c48:	2300      	movs	r3, #0
 8003c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c54:	4b79      	ldr	r3, [pc, #484]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 030c 	and.w	r3, r3, #12
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d00d      	beq.n	8003c7c <HAL_RCC_GetSysClockFreq+0x40>
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	f200 80e1 	bhi.w	8003e28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_RCC_GetSysClockFreq+0x34>
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d003      	beq.n	8003c76 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c6e:	e0db      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c70:	4b73      	ldr	r3, [pc, #460]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c74:	e0db      	b.n	8003e2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c76:	4b73      	ldr	r3, [pc, #460]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c7a:	e0d8      	b.n	8003e2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c7c:	4b6f      	ldr	r3, [pc, #444]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c86:	4b6d      	ldr	r3, [pc, #436]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d063      	beq.n	8003d5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c92:	4b6a      	ldr	r3, [pc, #424]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	099b      	lsrs	r3, r3, #6
 8003c98:	2200      	movs	r2, #0
 8003c9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8003caa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003cae:	4622      	mov	r2, r4
 8003cb0:	462b      	mov	r3, r5
 8003cb2:	f04f 0000 	mov.w	r0, #0
 8003cb6:	f04f 0100 	mov.w	r1, #0
 8003cba:	0159      	lsls	r1, r3, #5
 8003cbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cc0:	0150      	lsls	r0, r2, #5
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	1a51      	subs	r1, r2, r1
 8003cca:	6139      	str	r1, [r7, #16]
 8003ccc:	4629      	mov	r1, r5
 8003cce:	eb63 0301 	sbc.w	r3, r3, r1
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ce0:	4659      	mov	r1, fp
 8003ce2:	018b      	lsls	r3, r1, #6
 8003ce4:	4651      	mov	r1, sl
 8003ce6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cea:	4651      	mov	r1, sl
 8003cec:	018a      	lsls	r2, r1, #6
 8003cee:	4651      	mov	r1, sl
 8003cf0:	ebb2 0801 	subs.w	r8, r2, r1
 8003cf4:	4659      	mov	r1, fp
 8003cf6:	eb63 0901 	sbc.w	r9, r3, r1
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d0e:	4690      	mov	r8, r2
 8003d10:	4699      	mov	r9, r3
 8003d12:	4623      	mov	r3, r4
 8003d14:	eb18 0303 	adds.w	r3, r8, r3
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	462b      	mov	r3, r5
 8003d1c:	eb49 0303 	adc.w	r3, r9, r3
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d2e:	4629      	mov	r1, r5
 8003d30:	024b      	lsls	r3, r1, #9
 8003d32:	4621      	mov	r1, r4
 8003d34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d38:	4621      	mov	r1, r4
 8003d3a:	024a      	lsls	r2, r1, #9
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	4619      	mov	r1, r3
 8003d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d42:	2200      	movs	r2, #0
 8003d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d4c:	f7fc ff34 	bl	8000bb8 <__aeabi_uldivmod>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4613      	mov	r3, r2
 8003d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d58:	e058      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d5a:	4b38      	ldr	r3, [pc, #224]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	099b      	lsrs	r3, r3, #6
 8003d60:	2200      	movs	r2, #0
 8003d62:	4618      	mov	r0, r3
 8003d64:	4611      	mov	r1, r2
 8003d66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d6a:	623b      	str	r3, [r7, #32]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d74:	4642      	mov	r2, r8
 8003d76:	464b      	mov	r3, r9
 8003d78:	f04f 0000 	mov.w	r0, #0
 8003d7c:	f04f 0100 	mov.w	r1, #0
 8003d80:	0159      	lsls	r1, r3, #5
 8003d82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d86:	0150      	lsls	r0, r2, #5
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4641      	mov	r1, r8
 8003d8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d92:	4649      	mov	r1, r9
 8003d94:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003da4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003da8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003dac:	ebb2 040a 	subs.w	r4, r2, sl
 8003db0:	eb63 050b 	sbc.w	r5, r3, fp
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	00eb      	lsls	r3, r5, #3
 8003dbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dc2:	00e2      	lsls	r2, r4, #3
 8003dc4:	4614      	mov	r4, r2
 8003dc6:	461d      	mov	r5, r3
 8003dc8:	4643      	mov	r3, r8
 8003dca:	18e3      	adds	r3, r4, r3
 8003dcc:	603b      	str	r3, [r7, #0]
 8003dce:	464b      	mov	r3, r9
 8003dd0:	eb45 0303 	adc.w	r3, r5, r3
 8003dd4:	607b      	str	r3, [r7, #4]
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003de2:	4629      	mov	r1, r5
 8003de4:	028b      	lsls	r3, r1, #10
 8003de6:	4621      	mov	r1, r4
 8003de8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dec:	4621      	mov	r1, r4
 8003dee:	028a      	lsls	r2, r1, #10
 8003df0:	4610      	mov	r0, r2
 8003df2:	4619      	mov	r1, r3
 8003df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df6:	2200      	movs	r2, #0
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	61fa      	str	r2, [r7, #28]
 8003dfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e00:	f7fc feda 	bl	8000bb8 <__aeabi_uldivmod>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4613      	mov	r3, r2
 8003e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	0c1b      	lsrs	r3, r3, #16
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	3301      	adds	r3, #1
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e26:	e002      	b.n	8003e2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e28:	4b05      	ldr	r3, [pc, #20]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3750      	adds	r7, #80	; 0x50
 8003e34:	46bd      	mov	sp, r7
 8003e36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	00f42400 	.word	0x00f42400
 8003e44:	007a1200 	.word	0x007a1200

08003e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e4c:	4b03      	ldr	r3, [pc, #12]	; (8003e5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	20000000 	.word	0x20000000

08003e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e64:	f7ff fff0 	bl	8003e48 <HAL_RCC_GetHCLKFreq>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	0a9b      	lsrs	r3, r3, #10
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	4903      	ldr	r1, [pc, #12]	; (8003e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e76:	5ccb      	ldrb	r3, [r1, r3]
 8003e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40023800 	.word	0x40023800
 8003e84:	080080b8 	.word	0x080080b8

08003e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e8c:	f7ff ffdc 	bl	8003e48 <HAL_RCC_GetHCLKFreq>
 8003e90:	4602      	mov	r2, r0
 8003e92:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	0b5b      	lsrs	r3, r3, #13
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	4903      	ldr	r1, [pc, #12]	; (8003eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	080080b8 	.word	0x080080b8

08003eb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e07b      	b.n	8003fba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d108      	bne.n	8003edc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ed2:	d009      	beq.n	8003ee8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	61da      	str	r2, [r3, #28]
 8003eda:	e005      	b.n	8003ee8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d106      	bne.n	8003f08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fe f988 	bl	8002218 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	431a      	orrs	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6c:	ea42 0103 	orr.w	r1, r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	0c1b      	lsrs	r3, r3, #16
 8003f86:	f003 0104 	and.w	r1, r3, #4
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	f003 0210 	and.w	r2, r3, #16
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fa8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b088      	sub	sp, #32
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	60f8      	str	r0, [r7, #12]
 8003fca:	60b9      	str	r1, [r7, #8]
 8003fcc:	603b      	str	r3, [r7, #0]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_SPI_Transmit+0x22>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e126      	b.n	8004232 <HAL_SPI_Transmit+0x270>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fec:	f7fe fbfa 	bl	80027e4 <HAL_GetTick>
 8003ff0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ff2:	88fb      	ldrh	r3, [r7, #6]
 8003ff4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d002      	beq.n	8004008 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004002:	2302      	movs	r3, #2
 8004004:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004006:	e10b      	b.n	8004220 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <HAL_SPI_Transmit+0x52>
 800400e:	88fb      	ldrh	r3, [r7, #6]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d102      	bne.n	800401a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004018:	e102      	b.n	8004220 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2203      	movs	r2, #3
 800401e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	88fa      	ldrh	r2, [r7, #6]
 8004032:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	88fa      	ldrh	r2, [r7, #6]
 8004038:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004060:	d10f      	bne.n	8004082 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004070:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004080:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408c:	2b40      	cmp	r3, #64	; 0x40
 800408e:	d007      	beq.n	80040a0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800409e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040a8:	d14b      	bne.n	8004142 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <HAL_SPI_Transmit+0xf6>
 80040b2:	8afb      	ldrh	r3, [r7, #22]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d13e      	bne.n	8004136 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	881a      	ldrh	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c8:	1c9a      	adds	r2, r3, #2
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040dc:	e02b      	b.n	8004136 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d112      	bne.n	8004112 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	881a      	ldrh	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	1c9a      	adds	r2, r3, #2
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004106:	b29b      	uxth	r3, r3
 8004108:	3b01      	subs	r3, #1
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004110:	e011      	b.n	8004136 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004112:	f7fe fb67 	bl	80027e4 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d803      	bhi.n	800412a <HAL_SPI_Transmit+0x168>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004128:	d102      	bne.n	8004130 <HAL_SPI_Transmit+0x16e>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d102      	bne.n	8004136 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004134:	e074      	b.n	8004220 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1ce      	bne.n	80040de <HAL_SPI_Transmit+0x11c>
 8004140:	e04c      	b.n	80041dc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <HAL_SPI_Transmit+0x18e>
 800414a:	8afb      	ldrh	r3, [r7, #22]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d140      	bne.n	80041d2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	330c      	adds	r3, #12
 800415a:	7812      	ldrb	r2, [r2, #0]
 800415c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800416c:	b29b      	uxth	r3, r3
 800416e:	3b01      	subs	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004176:	e02c      	b.n	80041d2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b02      	cmp	r3, #2
 8004184:	d113      	bne.n	80041ae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	330c      	adds	r3, #12
 8004190:	7812      	ldrb	r2, [r2, #0]
 8004192:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80041ac:	e011      	b.n	80041d2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041ae:	f7fe fb19 	bl	80027e4 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d803      	bhi.n	80041c6 <HAL_SPI_Transmit+0x204>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c4:	d102      	bne.n	80041cc <HAL_SPI_Transmit+0x20a>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d102      	bne.n	80041d2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041d0:	e026      	b.n	8004220 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1cd      	bne.n	8004178 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	6839      	ldr	r1, [r7, #0]
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 fbcb 	bl	800497c <SPI_EndRxTxTransaction>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2220      	movs	r2, #32
 80041f0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10a      	bne.n	8004210 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041fa:	2300      	movs	r3, #0
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	613b      	str	r3, [r7, #16]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	77fb      	strb	r3, [r7, #31]
 800421c:	e000      	b.n	8004220 <HAL_SPI_Transmit+0x25e>
  }

error:
 800421e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004230:	7ffb      	ldrb	r3, [r7, #31]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3720      	adds	r7, #32
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b088      	sub	sp, #32
 800423e:	af02      	add	r7, sp, #8
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	603b      	str	r3, [r7, #0]
 8004246:	4613      	mov	r3, r2
 8004248:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004256:	d112      	bne.n	800427e <HAL_SPI_Receive+0x44>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10e      	bne.n	800427e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2204      	movs	r2, #4
 8004264:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004268:	88fa      	ldrh	r2, [r7, #6]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	4613      	mov	r3, r2
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	68b9      	ldr	r1, [r7, #8]
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f8f1 	bl	800445c <HAL_SPI_TransmitReceive>
 800427a:	4603      	mov	r3, r0
 800427c:	e0ea      	b.n	8004454 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004284:	2b01      	cmp	r3, #1
 8004286:	d101      	bne.n	800428c <HAL_SPI_Receive+0x52>
 8004288:	2302      	movs	r3, #2
 800428a:	e0e3      	b.n	8004454 <HAL_SPI_Receive+0x21a>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004294:	f7fe faa6 	bl	80027e4 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d002      	beq.n	80042ac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80042a6:	2302      	movs	r3, #2
 80042a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042aa:	e0ca      	b.n	8004442 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <HAL_SPI_Receive+0x7e>
 80042b2:	88fb      	ldrh	r3, [r7, #6]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d102      	bne.n	80042be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042bc:	e0c1      	b.n	8004442 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2204      	movs	r2, #4
 80042c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	88fa      	ldrh	r2, [r7, #6]
 80042d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	88fa      	ldrh	r2, [r7, #6]
 80042dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004304:	d10f      	bne.n	8004326 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004314:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004324:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004330:	2b40      	cmp	r3, #64	; 0x40
 8004332:	d007      	beq.n	8004344 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004342:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d162      	bne.n	8004412 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800434c:	e02e      	b.n	80043ac <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b01      	cmp	r3, #1
 800435a:	d115      	bne.n	8004388 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f103 020c 	add.w	r2, r3, #12
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	7812      	ldrb	r2, [r2, #0]
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004386:	e011      	b.n	80043ac <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004388:	f7fe fa2c 	bl	80027e4 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d803      	bhi.n	80043a0 <HAL_SPI_Receive+0x166>
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439e:	d102      	bne.n	80043a6 <HAL_SPI_Receive+0x16c>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d102      	bne.n	80043ac <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80043aa:	e04a      	b.n	8004442 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1cb      	bne.n	800434e <HAL_SPI_Receive+0x114>
 80043b6:	e031      	b.n	800441c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d113      	bne.n	80043ee <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	b292      	uxth	r2, r2
 80043d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d8:	1c9a      	adds	r2, r3, #2
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043ec:	e011      	b.n	8004412 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043ee:	f7fe f9f9 	bl	80027e4 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d803      	bhi.n	8004406 <HAL_SPI_Receive+0x1cc>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004404:	d102      	bne.n	800440c <HAL_SPI_Receive+0x1d2>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d102      	bne.n	8004412 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004410:	e017      	b.n	8004442 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1cd      	bne.n	80043b8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	6839      	ldr	r1, [r7, #0]
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 fa45 	bl	80048b0 <SPI_EndRxTransaction>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2220      	movs	r2, #32
 8004430:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	75fb      	strb	r3, [r7, #23]
 800443e:	e000      	b.n	8004442 <HAL_SPI_Receive+0x208>
  }

error :
 8004440:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004452:	7dfb      	ldrb	r3, [r7, #23]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08c      	sub	sp, #48	; 0x30
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800446a:	2301      	movs	r3, #1
 800446c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <HAL_SPI_TransmitReceive+0x26>
 800447e:	2302      	movs	r3, #2
 8004480:	e18a      	b.n	8004798 <HAL_SPI_TransmitReceive+0x33c>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800448a:	f7fe f9ab 	bl	80027e4 <HAL_GetTick>
 800448e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80044a0:	887b      	ldrh	r3, [r7, #2]
 80044a2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d00f      	beq.n	80044cc <HAL_SPI_TransmitReceive+0x70>
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044b2:	d107      	bne.n	80044c4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d103      	bne.n	80044c4 <HAL_SPI_TransmitReceive+0x68>
 80044bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d003      	beq.n	80044cc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80044c4:	2302      	movs	r3, #2
 80044c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80044ca:	e15b      	b.n	8004784 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d005      	beq.n	80044de <HAL_SPI_TransmitReceive+0x82>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <HAL_SPI_TransmitReceive+0x82>
 80044d8:	887b      	ldrh	r3, [r7, #2]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d103      	bne.n	80044e6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80044e4:	e14e      	b.n	8004784 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d003      	beq.n	80044fa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2205      	movs	r2, #5
 80044f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	887a      	ldrh	r2, [r7, #2]
 800450a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	887a      	ldrh	r2, [r7, #2]
 8004510:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	887a      	ldrh	r2, [r7, #2]
 800451c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	887a      	ldrh	r2, [r7, #2]
 8004522:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453a:	2b40      	cmp	r3, #64	; 0x40
 800453c:	d007      	beq.n	800454e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800454c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004556:	d178      	bne.n	800464a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <HAL_SPI_TransmitReceive+0x10a>
 8004560:	8b7b      	ldrh	r3, [r7, #26]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d166      	bne.n	8004634 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	881a      	ldrh	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004576:	1c9a      	adds	r2, r3, #2
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004580:	b29b      	uxth	r3, r3
 8004582:	3b01      	subs	r3, #1
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800458a:	e053      	b.n	8004634 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b02      	cmp	r3, #2
 8004598:	d11b      	bne.n	80045d2 <HAL_SPI_TransmitReceive+0x176>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800459e:	b29b      	uxth	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d016      	beq.n	80045d2 <HAL_SPI_TransmitReceive+0x176>
 80045a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d113      	bne.n	80045d2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	881a      	ldrh	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	1c9a      	adds	r2, r3, #2
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d119      	bne.n	8004614 <HAL_SPI_TransmitReceive+0x1b8>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d014      	beq.n	8004614 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	b292      	uxth	r2, r2
 80045f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	1c9a      	adds	r2, r3, #2
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004610:	2301      	movs	r3, #1
 8004612:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004614:	f7fe f8e6 	bl	80027e4 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004620:	429a      	cmp	r2, r3
 8004622:	d807      	bhi.n	8004634 <HAL_SPI_TransmitReceive+0x1d8>
 8004624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462a:	d003      	beq.n	8004634 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004632:	e0a7      	b.n	8004784 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1a6      	bne.n	800458c <HAL_SPI_TransmitReceive+0x130>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004642:	b29b      	uxth	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1a1      	bne.n	800458c <HAL_SPI_TransmitReceive+0x130>
 8004648:	e07c      	b.n	8004744 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <HAL_SPI_TransmitReceive+0x1fc>
 8004652:	8b7b      	ldrh	r3, [r7, #26]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d16b      	bne.n	8004730 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	330c      	adds	r3, #12
 8004662:	7812      	ldrb	r2, [r2, #0]
 8004664:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800467e:	e057      	b.n	8004730 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b02      	cmp	r3, #2
 800468c:	d11c      	bne.n	80046c8 <HAL_SPI_TransmitReceive+0x26c>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d017      	beq.n	80046c8 <HAL_SPI_TransmitReceive+0x26c>
 8004698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469a:	2b01      	cmp	r3, #1
 800469c:	d114      	bne.n	80046c8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	330c      	adds	r3, #12
 80046a8:	7812      	ldrb	r2, [r2, #0]
 80046aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	3b01      	subs	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d119      	bne.n	800470a <HAL_SPI_TransmitReceive+0x2ae>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046da:	b29b      	uxth	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d014      	beq.n	800470a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004706:	2301      	movs	r3, #1
 8004708:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800470a:	f7fe f86b 	bl	80027e4 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004716:	429a      	cmp	r2, r3
 8004718:	d803      	bhi.n	8004722 <HAL_SPI_TransmitReceive+0x2c6>
 800471a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004720:	d102      	bne.n	8004728 <HAL_SPI_TransmitReceive+0x2cc>
 8004722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004724:	2b00      	cmp	r3, #0
 8004726:	d103      	bne.n	8004730 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800472e:	e029      	b.n	8004784 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1a2      	bne.n	8004680 <HAL_SPI_TransmitReceive+0x224>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800473e:	b29b      	uxth	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d19d      	bne.n	8004680 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004746:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 f917 	bl	800497c <SPI_EndRxTxTransaction>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d006      	beq.n	8004762 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2220      	movs	r2, #32
 800475e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004760:	e010      	b.n	8004784 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10b      	bne.n	8004782 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800476a:	2300      	movs	r3, #0
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	617b      	str	r3, [r7, #20]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	617b      	str	r3, [r7, #20]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	e000      	b.n	8004784 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004782:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004794:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004798:	4618      	mov	r0, r3
 800479a:	3730      	adds	r7, #48	; 0x30
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	4613      	mov	r3, r2
 80047ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047b0:	f7fe f818 	bl	80027e4 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	1a9b      	subs	r3, r3, r2
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	4413      	add	r3, r2
 80047be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047c0:	f7fe f810 	bl	80027e4 <HAL_GetTick>
 80047c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047c6:	4b39      	ldr	r3, [pc, #228]	; (80048ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	015b      	lsls	r3, r3, #5
 80047cc:	0d1b      	lsrs	r3, r3, #20
 80047ce:	69fa      	ldr	r2, [r7, #28]
 80047d0:	fb02 f303 	mul.w	r3, r2, r3
 80047d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047d6:	e054      	b.n	8004882 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047de:	d050      	beq.n	8004882 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047e0:	f7fe f800 	bl	80027e4 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	69fa      	ldr	r2, [r7, #28]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d902      	bls.n	80047f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d13d      	bne.n	8004872 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004804:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800480e:	d111      	bne.n	8004834 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004818:	d004      	beq.n	8004824 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004822:	d107      	bne.n	8004834 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004832:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800483c:	d10f      	bne.n	800485e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800485c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e017      	b.n	80048a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	3b01      	subs	r3, #1
 8004880:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4013      	ands	r3, r2
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	429a      	cmp	r2, r3
 8004890:	bf0c      	ite	eq
 8004892:	2301      	moveq	r3, #1
 8004894:	2300      	movne	r3, #0
 8004896:	b2db      	uxtb	r3, r3
 8004898:	461a      	mov	r2, r3
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	429a      	cmp	r2, r3
 800489e:	d19b      	bne.n	80047d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3720      	adds	r7, #32
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000000 	.word	0x20000000

080048b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048c4:	d111      	bne.n	80048ea <SPI_EndRxTransaction+0x3a>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ce:	d004      	beq.n	80048da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d8:	d107      	bne.n	80048ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048e8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048f2:	d12a      	bne.n	800494a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048fc:	d012      	beq.n	8004924 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2200      	movs	r2, #0
 8004906:	2180      	movs	r1, #128	; 0x80
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f7ff ff49 	bl	80047a0 <SPI_WaitFlagStateUntilTimeout>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d02d      	beq.n	8004970 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004918:	f043 0220 	orr.w	r2, r3, #32
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e026      	b.n	8004972 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2200      	movs	r2, #0
 800492c:	2101      	movs	r1, #1
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f7ff ff36 	bl	80047a0 <SPI_WaitFlagStateUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d01a      	beq.n	8004970 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493e:	f043 0220 	orr.w	r2, r3, #32
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e013      	b.n	8004972 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2200      	movs	r2, #0
 8004952:	2101      	movs	r1, #1
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f7ff ff23 	bl	80047a0 <SPI_WaitFlagStateUntilTimeout>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d007      	beq.n	8004970 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004964:	f043 0220 	orr.w	r2, r3, #32
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e000      	b.n	8004972 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b088      	sub	sp, #32
 8004980:	af02      	add	r7, sp, #8
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004988:	4b1b      	ldr	r3, [pc, #108]	; (80049f8 <SPI_EndRxTxTransaction+0x7c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a1b      	ldr	r2, [pc, #108]	; (80049fc <SPI_EndRxTxTransaction+0x80>)
 800498e:	fba2 2303 	umull	r2, r3, r2, r3
 8004992:	0d5b      	lsrs	r3, r3, #21
 8004994:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004998:	fb02 f303 	mul.w	r3, r2, r3
 800499c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049a6:	d112      	bne.n	80049ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2200      	movs	r2, #0
 80049b0:	2180      	movs	r1, #128	; 0x80
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f7ff fef4 	bl	80047a0 <SPI_WaitFlagStateUntilTimeout>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d016      	beq.n	80049ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c2:	f043 0220 	orr.w	r2, r3, #32
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e00f      	b.n	80049ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e4:	2b80      	cmp	r3, #128	; 0x80
 80049e6:	d0f2      	beq.n	80049ce <SPI_EndRxTxTransaction+0x52>
 80049e8:	e000      	b.n	80049ec <SPI_EndRxTxTransaction+0x70>
        break;
 80049ea:	bf00      	nop
  }

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	20000000 	.word	0x20000000
 80049fc:	165e9f81 	.word	0x165e9f81

08004a00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e03f      	b.n	8004a92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d106      	bne.n	8004a2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fd fe04 	bl	8002634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2224      	movs	r2, #36	; 0x24
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f929 	bl	8004c9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695a      	ldr	r2, [r3, #20]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b08a      	sub	sp, #40	; 0x28
 8004a9e:	af02      	add	r7, sp, #8
 8004aa0:	60f8      	str	r0, [r7, #12]
 8004aa2:	60b9      	str	r1, [r7, #8]
 8004aa4:	603b      	str	r3, [r7, #0]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b20      	cmp	r3, #32
 8004ab8:	d17c      	bne.n	8004bb4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <HAL_UART_Transmit+0x2c>
 8004ac0:	88fb      	ldrh	r3, [r7, #6]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e075      	b.n	8004bb6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_UART_Transmit+0x3e>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e06e      	b.n	8004bb6 <HAL_UART_Transmit+0x11c>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2221      	movs	r2, #33	; 0x21
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004aee:	f7fd fe79 	bl	80027e4 <HAL_GetTick>
 8004af2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	88fa      	ldrh	r2, [r7, #6]
 8004af8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	88fa      	ldrh	r2, [r7, #6]
 8004afe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b08:	d108      	bne.n	8004b1c <HAL_UART_Transmit+0x82>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d104      	bne.n	8004b1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	61bb      	str	r3, [r7, #24]
 8004b1a:	e003      	b.n	8004b24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b2c:	e02a      	b.n	8004b84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	2200      	movs	r2, #0
 8004b36:	2180      	movs	r1, #128	; 0x80
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 f840 	bl	8004bbe <UART_WaitOnFlagUntilTimeout>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e036      	b.n	8004bb6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10b      	bne.n	8004b66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	461a      	mov	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	3302      	adds	r3, #2
 8004b62:	61bb      	str	r3, [r7, #24]
 8004b64:	e007      	b.n	8004b76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	781a      	ldrb	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	3301      	adds	r3, #1
 8004b74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1cf      	bne.n	8004b2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2200      	movs	r2, #0
 8004b96:	2140      	movs	r1, #64	; 0x40
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 f810 	bl	8004bbe <UART_WaitOnFlagUntilTimeout>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e006      	b.n	8004bb6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	e000      	b.n	8004bb6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004bb4:	2302      	movs	r3, #2
  }
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3720      	adds	r7, #32
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b090      	sub	sp, #64	; 0x40
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	603b      	str	r3, [r7, #0]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bce:	e050      	b.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d04c      	beq.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d007      	beq.n	8004bee <UART_WaitOnFlagUntilTimeout+0x30>
 8004bde:	f7fd fe01 	bl	80027e4 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d241      	bcs.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	330c      	adds	r3, #12
 8004bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	e853 3f00 	ldrex	r3, [r3]
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	330c      	adds	r3, #12
 8004c0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c0e:	637a      	str	r2, [r7, #52]	; 0x34
 8004c10:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c16:	e841 2300 	strex	r3, r2, [r1]
 8004c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1e5      	bne.n	8004bee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	3314      	adds	r3, #20
 8004c28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	e853 3f00 	ldrex	r3, [r3]
 8004c30:	613b      	str	r3, [r7, #16]
   return(result);
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f023 0301 	bic.w	r3, r3, #1
 8004c38:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3314      	adds	r3, #20
 8004c40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c42:	623a      	str	r2, [r7, #32]
 8004c44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c46:	69f9      	ldr	r1, [r7, #28]
 8004c48:	6a3a      	ldr	r2, [r7, #32]
 8004c4a:	e841 2300 	strex	r3, r2, [r1]
 8004c4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1e5      	bne.n	8004c22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e00f      	b.n	8004c92 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	bf0c      	ite	eq
 8004c82:	2301      	moveq	r3, #1
 8004c84:	2300      	movne	r3, #0
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	461a      	mov	r2, r3
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d09f      	beq.n	8004bd0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3740      	adds	r7, #64	; 0x40
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ca0:	b0c0      	sub	sp, #256	; 0x100
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb8:	68d9      	ldr	r1, [r3, #12]
 8004cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	ea40 0301 	orr.w	r3, r0, r1
 8004cc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004cf4:	f021 010c 	bic.w	r1, r1, #12
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d02:	430b      	orrs	r3, r1
 8004d04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d16:	6999      	ldr	r1, [r3, #24]
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	ea40 0301 	orr.w	r3, r0, r1
 8004d22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	4b8f      	ldr	r3, [pc, #572]	; (8004f68 <UART_SetConfig+0x2cc>)
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d005      	beq.n	8004d3c <UART_SetConfig+0xa0>
 8004d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	4b8d      	ldr	r3, [pc, #564]	; (8004f6c <UART_SetConfig+0x2d0>)
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d104      	bne.n	8004d46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d3c:	f7ff f8a4 	bl	8003e88 <HAL_RCC_GetPCLK2Freq>
 8004d40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d44:	e003      	b.n	8004d4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d46:	f7ff f88b 	bl	8003e60 <HAL_RCC_GetPCLK1Freq>
 8004d4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d58:	f040 810c 	bne.w	8004f74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d60:	2200      	movs	r2, #0
 8004d62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d6e:	4622      	mov	r2, r4
 8004d70:	462b      	mov	r3, r5
 8004d72:	1891      	adds	r1, r2, r2
 8004d74:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d76:	415b      	adcs	r3, r3
 8004d78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d7e:	4621      	mov	r1, r4
 8004d80:	eb12 0801 	adds.w	r8, r2, r1
 8004d84:	4629      	mov	r1, r5
 8004d86:	eb43 0901 	adc.w	r9, r3, r1
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d9e:	4690      	mov	r8, r2
 8004da0:	4699      	mov	r9, r3
 8004da2:	4623      	mov	r3, r4
 8004da4:	eb18 0303 	adds.w	r3, r8, r3
 8004da8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dac:	462b      	mov	r3, r5
 8004dae:	eb49 0303 	adc.w	r3, r9, r3
 8004db2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004dc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004dca:	460b      	mov	r3, r1
 8004dcc:	18db      	adds	r3, r3, r3
 8004dce:	653b      	str	r3, [r7, #80]	; 0x50
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	eb42 0303 	adc.w	r3, r2, r3
 8004dd6:	657b      	str	r3, [r7, #84]	; 0x54
 8004dd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ddc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004de0:	f7fb feea 	bl	8000bb8 <__aeabi_uldivmod>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	4b61      	ldr	r3, [pc, #388]	; (8004f70 <UART_SetConfig+0x2d4>)
 8004dea:	fba3 2302 	umull	r2, r3, r3, r2
 8004dee:	095b      	lsrs	r3, r3, #5
 8004df0:	011c      	lsls	r4, r3, #4
 8004df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004df6:	2200      	movs	r2, #0
 8004df8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004dfc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e04:	4642      	mov	r2, r8
 8004e06:	464b      	mov	r3, r9
 8004e08:	1891      	adds	r1, r2, r2
 8004e0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e0c:	415b      	adcs	r3, r3
 8004e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e14:	4641      	mov	r1, r8
 8004e16:	eb12 0a01 	adds.w	sl, r2, r1
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	eb43 0b01 	adc.w	fp, r3, r1
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e34:	4692      	mov	sl, r2
 8004e36:	469b      	mov	fp, r3
 8004e38:	4643      	mov	r3, r8
 8004e3a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e42:	464b      	mov	r3, r9
 8004e44:	eb4b 0303 	adc.w	r3, fp, r3
 8004e48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e60:	460b      	mov	r3, r1
 8004e62:	18db      	adds	r3, r3, r3
 8004e64:	643b      	str	r3, [r7, #64]	; 0x40
 8004e66:	4613      	mov	r3, r2
 8004e68:	eb42 0303 	adc.w	r3, r2, r3
 8004e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e76:	f7fb fe9f 	bl	8000bb8 <__aeabi_uldivmod>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4611      	mov	r1, r2
 8004e80:	4b3b      	ldr	r3, [pc, #236]	; (8004f70 <UART_SetConfig+0x2d4>)
 8004e82:	fba3 2301 	umull	r2, r3, r3, r1
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	2264      	movs	r2, #100	; 0x64
 8004e8a:	fb02 f303 	mul.w	r3, r2, r3
 8004e8e:	1acb      	subs	r3, r1, r3
 8004e90:	00db      	lsls	r3, r3, #3
 8004e92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e96:	4b36      	ldr	r3, [pc, #216]	; (8004f70 <UART_SetConfig+0x2d4>)
 8004e98:	fba3 2302 	umull	r2, r3, r3, r2
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ea4:	441c      	add	r4, r3
 8004ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004eb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004eb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004eb8:	4642      	mov	r2, r8
 8004eba:	464b      	mov	r3, r9
 8004ebc:	1891      	adds	r1, r2, r2
 8004ebe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ec0:	415b      	adcs	r3, r3
 8004ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ec4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ec8:	4641      	mov	r1, r8
 8004eca:	1851      	adds	r1, r2, r1
 8004ecc:	6339      	str	r1, [r7, #48]	; 0x30
 8004ece:	4649      	mov	r1, r9
 8004ed0:	414b      	adcs	r3, r1
 8004ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ee0:	4659      	mov	r1, fp
 8004ee2:	00cb      	lsls	r3, r1, #3
 8004ee4:	4651      	mov	r1, sl
 8004ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eea:	4651      	mov	r1, sl
 8004eec:	00ca      	lsls	r2, r1, #3
 8004eee:	4610      	mov	r0, r2
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	4642      	mov	r2, r8
 8004ef6:	189b      	adds	r3, r3, r2
 8004ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004efc:	464b      	mov	r3, r9
 8004efe:	460a      	mov	r2, r1
 8004f00:	eb42 0303 	adc.w	r3, r2, r3
 8004f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	18db      	adds	r3, r3, r3
 8004f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f22:	4613      	mov	r3, r2
 8004f24:	eb42 0303 	adc.w	r3, r2, r3
 8004f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f32:	f7fb fe41 	bl	8000bb8 <__aeabi_uldivmod>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4b0d      	ldr	r3, [pc, #52]	; (8004f70 <UART_SetConfig+0x2d4>)
 8004f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f40:	095b      	lsrs	r3, r3, #5
 8004f42:	2164      	movs	r1, #100	; 0x64
 8004f44:	fb01 f303 	mul.w	r3, r1, r3
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	3332      	adds	r3, #50	; 0x32
 8004f4e:	4a08      	ldr	r2, [pc, #32]	; (8004f70 <UART_SetConfig+0x2d4>)
 8004f50:	fba2 2303 	umull	r2, r3, r2, r3
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	f003 0207 	and.w	r2, r3, #7
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4422      	add	r2, r4
 8004f62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f64:	e105      	b.n	8005172 <UART_SetConfig+0x4d6>
 8004f66:	bf00      	nop
 8004f68:	40011000 	.word	0x40011000
 8004f6c:	40011400 	.word	0x40011400
 8004f70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f86:	4642      	mov	r2, r8
 8004f88:	464b      	mov	r3, r9
 8004f8a:	1891      	adds	r1, r2, r2
 8004f8c:	6239      	str	r1, [r7, #32]
 8004f8e:	415b      	adcs	r3, r3
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
 8004f92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f96:	4641      	mov	r1, r8
 8004f98:	1854      	adds	r4, r2, r1
 8004f9a:	4649      	mov	r1, r9
 8004f9c:	eb43 0501 	adc.w	r5, r3, r1
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	f04f 0300 	mov.w	r3, #0
 8004fa8:	00eb      	lsls	r3, r5, #3
 8004faa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fae:	00e2      	lsls	r2, r4, #3
 8004fb0:	4614      	mov	r4, r2
 8004fb2:	461d      	mov	r5, r3
 8004fb4:	4643      	mov	r3, r8
 8004fb6:	18e3      	adds	r3, r4, r3
 8004fb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fbc:	464b      	mov	r3, r9
 8004fbe:	eb45 0303 	adc.w	r3, r5, r3
 8004fc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	f04f 0300 	mov.w	r3, #0
 8004fde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	008b      	lsls	r3, r1, #2
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fec:	4621      	mov	r1, r4
 8004fee:	008a      	lsls	r2, r1, #2
 8004ff0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ff4:	f7fb fde0 	bl	8000bb8 <__aeabi_uldivmod>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4b60      	ldr	r3, [pc, #384]	; (8005180 <UART_SetConfig+0x4e4>)
 8004ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	011c      	lsls	r4, r3, #4
 8005006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800500a:	2200      	movs	r2, #0
 800500c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005010:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005014:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005018:	4642      	mov	r2, r8
 800501a:	464b      	mov	r3, r9
 800501c:	1891      	adds	r1, r2, r2
 800501e:	61b9      	str	r1, [r7, #24]
 8005020:	415b      	adcs	r3, r3
 8005022:	61fb      	str	r3, [r7, #28]
 8005024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005028:	4641      	mov	r1, r8
 800502a:	1851      	adds	r1, r2, r1
 800502c:	6139      	str	r1, [r7, #16]
 800502e:	4649      	mov	r1, r9
 8005030:	414b      	adcs	r3, r1
 8005032:	617b      	str	r3, [r7, #20]
 8005034:	f04f 0200 	mov.w	r2, #0
 8005038:	f04f 0300 	mov.w	r3, #0
 800503c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005040:	4659      	mov	r1, fp
 8005042:	00cb      	lsls	r3, r1, #3
 8005044:	4651      	mov	r1, sl
 8005046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800504a:	4651      	mov	r1, sl
 800504c:	00ca      	lsls	r2, r1, #3
 800504e:	4610      	mov	r0, r2
 8005050:	4619      	mov	r1, r3
 8005052:	4603      	mov	r3, r0
 8005054:	4642      	mov	r2, r8
 8005056:	189b      	adds	r3, r3, r2
 8005058:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800505c:	464b      	mov	r3, r9
 800505e:	460a      	mov	r2, r1
 8005060:	eb42 0303 	adc.w	r3, r2, r3
 8005064:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	67bb      	str	r3, [r7, #120]	; 0x78
 8005072:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005080:	4649      	mov	r1, r9
 8005082:	008b      	lsls	r3, r1, #2
 8005084:	4641      	mov	r1, r8
 8005086:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800508a:	4641      	mov	r1, r8
 800508c:	008a      	lsls	r2, r1, #2
 800508e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005092:	f7fb fd91 	bl	8000bb8 <__aeabi_uldivmod>
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	4b39      	ldr	r3, [pc, #228]	; (8005180 <UART_SetConfig+0x4e4>)
 800509c:	fba3 1302 	umull	r1, r3, r3, r2
 80050a0:	095b      	lsrs	r3, r3, #5
 80050a2:	2164      	movs	r1, #100	; 0x64
 80050a4:	fb01 f303 	mul.w	r3, r1, r3
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	3332      	adds	r3, #50	; 0x32
 80050ae:	4a34      	ldr	r2, [pc, #208]	; (8005180 <UART_SetConfig+0x4e4>)
 80050b0:	fba2 2303 	umull	r2, r3, r2, r3
 80050b4:	095b      	lsrs	r3, r3, #5
 80050b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050ba:	441c      	add	r4, r3
 80050bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050c0:	2200      	movs	r2, #0
 80050c2:	673b      	str	r3, [r7, #112]	; 0x70
 80050c4:	677a      	str	r2, [r7, #116]	; 0x74
 80050c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050ca:	4642      	mov	r2, r8
 80050cc:	464b      	mov	r3, r9
 80050ce:	1891      	adds	r1, r2, r2
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	415b      	adcs	r3, r3
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050da:	4641      	mov	r1, r8
 80050dc:	1851      	adds	r1, r2, r1
 80050de:	6039      	str	r1, [r7, #0]
 80050e0:	4649      	mov	r1, r9
 80050e2:	414b      	adcs	r3, r1
 80050e4:	607b      	str	r3, [r7, #4]
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050f2:	4659      	mov	r1, fp
 80050f4:	00cb      	lsls	r3, r1, #3
 80050f6:	4651      	mov	r1, sl
 80050f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050fc:	4651      	mov	r1, sl
 80050fe:	00ca      	lsls	r2, r1, #3
 8005100:	4610      	mov	r0, r2
 8005102:	4619      	mov	r1, r3
 8005104:	4603      	mov	r3, r0
 8005106:	4642      	mov	r2, r8
 8005108:	189b      	adds	r3, r3, r2
 800510a:	66bb      	str	r3, [r7, #104]	; 0x68
 800510c:	464b      	mov	r3, r9
 800510e:	460a      	mov	r2, r1
 8005110:	eb42 0303 	adc.w	r3, r2, r3
 8005114:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	663b      	str	r3, [r7, #96]	; 0x60
 8005120:	667a      	str	r2, [r7, #100]	; 0x64
 8005122:	f04f 0200 	mov.w	r2, #0
 8005126:	f04f 0300 	mov.w	r3, #0
 800512a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800512e:	4649      	mov	r1, r9
 8005130:	008b      	lsls	r3, r1, #2
 8005132:	4641      	mov	r1, r8
 8005134:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005138:	4641      	mov	r1, r8
 800513a:	008a      	lsls	r2, r1, #2
 800513c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005140:	f7fb fd3a 	bl	8000bb8 <__aeabi_uldivmod>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4b0d      	ldr	r3, [pc, #52]	; (8005180 <UART_SetConfig+0x4e4>)
 800514a:	fba3 1302 	umull	r1, r3, r3, r2
 800514e:	095b      	lsrs	r3, r3, #5
 8005150:	2164      	movs	r1, #100	; 0x64
 8005152:	fb01 f303 	mul.w	r3, r1, r3
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	3332      	adds	r3, #50	; 0x32
 800515c:	4a08      	ldr	r2, [pc, #32]	; (8005180 <UART_SetConfig+0x4e4>)
 800515e:	fba2 2303 	umull	r2, r3, r2, r3
 8005162:	095b      	lsrs	r3, r3, #5
 8005164:	f003 020f 	and.w	r2, r3, #15
 8005168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4422      	add	r2, r4
 8005170:	609a      	str	r2, [r3, #8]
}
 8005172:	bf00      	nop
 8005174:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005178:	46bd      	mov	sp, r7
 800517a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800517e:	bf00      	nop
 8005180:	51eb851f 	.word	0x51eb851f

08005184 <__errno>:
 8005184:	4b01      	ldr	r3, [pc, #4]	; (800518c <__errno+0x8>)
 8005186:	6818      	ldr	r0, [r3, #0]
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	2000000c 	.word	0x2000000c

08005190 <__libc_init_array>:
 8005190:	b570      	push	{r4, r5, r6, lr}
 8005192:	4d0d      	ldr	r5, [pc, #52]	; (80051c8 <__libc_init_array+0x38>)
 8005194:	4c0d      	ldr	r4, [pc, #52]	; (80051cc <__libc_init_array+0x3c>)
 8005196:	1b64      	subs	r4, r4, r5
 8005198:	10a4      	asrs	r4, r4, #2
 800519a:	2600      	movs	r6, #0
 800519c:	42a6      	cmp	r6, r4
 800519e:	d109      	bne.n	80051b4 <__libc_init_array+0x24>
 80051a0:	4d0b      	ldr	r5, [pc, #44]	; (80051d0 <__libc_init_array+0x40>)
 80051a2:	4c0c      	ldr	r4, [pc, #48]	; (80051d4 <__libc_init_array+0x44>)
 80051a4:	f002 ff1e 	bl	8007fe4 <_init>
 80051a8:	1b64      	subs	r4, r4, r5
 80051aa:	10a4      	asrs	r4, r4, #2
 80051ac:	2600      	movs	r6, #0
 80051ae:	42a6      	cmp	r6, r4
 80051b0:	d105      	bne.n	80051be <__libc_init_array+0x2e>
 80051b2:	bd70      	pop	{r4, r5, r6, pc}
 80051b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051b8:	4798      	blx	r3
 80051ba:	3601      	adds	r6, #1
 80051bc:	e7ee      	b.n	800519c <__libc_init_array+0xc>
 80051be:	f855 3b04 	ldr.w	r3, [r5], #4
 80051c2:	4798      	blx	r3
 80051c4:	3601      	adds	r6, #1
 80051c6:	e7f2      	b.n	80051ae <__libc_init_array+0x1e>
 80051c8:	080084a4 	.word	0x080084a4
 80051cc:	080084a4 	.word	0x080084a4
 80051d0:	080084a4 	.word	0x080084a4
 80051d4:	080084a8 	.word	0x080084a8

080051d8 <memset>:
 80051d8:	4402      	add	r2, r0
 80051da:	4603      	mov	r3, r0
 80051dc:	4293      	cmp	r3, r2
 80051de:	d100      	bne.n	80051e2 <memset+0xa>
 80051e0:	4770      	bx	lr
 80051e2:	f803 1b01 	strb.w	r1, [r3], #1
 80051e6:	e7f9      	b.n	80051dc <memset+0x4>

080051e8 <__cvt>:
 80051e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051ec:	ec55 4b10 	vmov	r4, r5, d0
 80051f0:	2d00      	cmp	r5, #0
 80051f2:	460e      	mov	r6, r1
 80051f4:	4619      	mov	r1, r3
 80051f6:	462b      	mov	r3, r5
 80051f8:	bfbb      	ittet	lt
 80051fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80051fe:	461d      	movlt	r5, r3
 8005200:	2300      	movge	r3, #0
 8005202:	232d      	movlt	r3, #45	; 0x2d
 8005204:	700b      	strb	r3, [r1, #0]
 8005206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005208:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800520c:	4691      	mov	r9, r2
 800520e:	f023 0820 	bic.w	r8, r3, #32
 8005212:	bfbc      	itt	lt
 8005214:	4622      	movlt	r2, r4
 8005216:	4614      	movlt	r4, r2
 8005218:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800521c:	d005      	beq.n	800522a <__cvt+0x42>
 800521e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005222:	d100      	bne.n	8005226 <__cvt+0x3e>
 8005224:	3601      	adds	r6, #1
 8005226:	2102      	movs	r1, #2
 8005228:	e000      	b.n	800522c <__cvt+0x44>
 800522a:	2103      	movs	r1, #3
 800522c:	ab03      	add	r3, sp, #12
 800522e:	9301      	str	r3, [sp, #4]
 8005230:	ab02      	add	r3, sp, #8
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	ec45 4b10 	vmov	d0, r4, r5
 8005238:	4653      	mov	r3, sl
 800523a:	4632      	mov	r2, r6
 800523c:	f000 fd04 	bl	8005c48 <_dtoa_r>
 8005240:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005244:	4607      	mov	r7, r0
 8005246:	d102      	bne.n	800524e <__cvt+0x66>
 8005248:	f019 0f01 	tst.w	r9, #1
 800524c:	d022      	beq.n	8005294 <__cvt+0xac>
 800524e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005252:	eb07 0906 	add.w	r9, r7, r6
 8005256:	d110      	bne.n	800527a <__cvt+0x92>
 8005258:	783b      	ldrb	r3, [r7, #0]
 800525a:	2b30      	cmp	r3, #48	; 0x30
 800525c:	d10a      	bne.n	8005274 <__cvt+0x8c>
 800525e:	2200      	movs	r2, #0
 8005260:	2300      	movs	r3, #0
 8005262:	4620      	mov	r0, r4
 8005264:	4629      	mov	r1, r5
 8005266:	f7fb fc37 	bl	8000ad8 <__aeabi_dcmpeq>
 800526a:	b918      	cbnz	r0, 8005274 <__cvt+0x8c>
 800526c:	f1c6 0601 	rsb	r6, r6, #1
 8005270:	f8ca 6000 	str.w	r6, [sl]
 8005274:	f8da 3000 	ldr.w	r3, [sl]
 8005278:	4499      	add	r9, r3
 800527a:	2200      	movs	r2, #0
 800527c:	2300      	movs	r3, #0
 800527e:	4620      	mov	r0, r4
 8005280:	4629      	mov	r1, r5
 8005282:	f7fb fc29 	bl	8000ad8 <__aeabi_dcmpeq>
 8005286:	b108      	cbz	r0, 800528c <__cvt+0xa4>
 8005288:	f8cd 900c 	str.w	r9, [sp, #12]
 800528c:	2230      	movs	r2, #48	; 0x30
 800528e:	9b03      	ldr	r3, [sp, #12]
 8005290:	454b      	cmp	r3, r9
 8005292:	d307      	bcc.n	80052a4 <__cvt+0xbc>
 8005294:	9b03      	ldr	r3, [sp, #12]
 8005296:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005298:	1bdb      	subs	r3, r3, r7
 800529a:	4638      	mov	r0, r7
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	b004      	add	sp, #16
 80052a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a4:	1c59      	adds	r1, r3, #1
 80052a6:	9103      	str	r1, [sp, #12]
 80052a8:	701a      	strb	r2, [r3, #0]
 80052aa:	e7f0      	b.n	800528e <__cvt+0xa6>

080052ac <__exponent>:
 80052ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052ae:	4603      	mov	r3, r0
 80052b0:	2900      	cmp	r1, #0
 80052b2:	bfb8      	it	lt
 80052b4:	4249      	neglt	r1, r1
 80052b6:	f803 2b02 	strb.w	r2, [r3], #2
 80052ba:	bfb4      	ite	lt
 80052bc:	222d      	movlt	r2, #45	; 0x2d
 80052be:	222b      	movge	r2, #43	; 0x2b
 80052c0:	2909      	cmp	r1, #9
 80052c2:	7042      	strb	r2, [r0, #1]
 80052c4:	dd2a      	ble.n	800531c <__exponent+0x70>
 80052c6:	f10d 0407 	add.w	r4, sp, #7
 80052ca:	46a4      	mov	ip, r4
 80052cc:	270a      	movs	r7, #10
 80052ce:	46a6      	mov	lr, r4
 80052d0:	460a      	mov	r2, r1
 80052d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80052d6:	fb07 1516 	mls	r5, r7, r6, r1
 80052da:	3530      	adds	r5, #48	; 0x30
 80052dc:	2a63      	cmp	r2, #99	; 0x63
 80052de:	f104 34ff 	add.w	r4, r4, #4294967295
 80052e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80052e6:	4631      	mov	r1, r6
 80052e8:	dcf1      	bgt.n	80052ce <__exponent+0x22>
 80052ea:	3130      	adds	r1, #48	; 0x30
 80052ec:	f1ae 0502 	sub.w	r5, lr, #2
 80052f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80052f4:	1c44      	adds	r4, r0, #1
 80052f6:	4629      	mov	r1, r5
 80052f8:	4561      	cmp	r1, ip
 80052fa:	d30a      	bcc.n	8005312 <__exponent+0x66>
 80052fc:	f10d 0209 	add.w	r2, sp, #9
 8005300:	eba2 020e 	sub.w	r2, r2, lr
 8005304:	4565      	cmp	r5, ip
 8005306:	bf88      	it	hi
 8005308:	2200      	movhi	r2, #0
 800530a:	4413      	add	r3, r2
 800530c:	1a18      	subs	r0, r3, r0
 800530e:	b003      	add	sp, #12
 8005310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005312:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005316:	f804 2f01 	strb.w	r2, [r4, #1]!
 800531a:	e7ed      	b.n	80052f8 <__exponent+0x4c>
 800531c:	2330      	movs	r3, #48	; 0x30
 800531e:	3130      	adds	r1, #48	; 0x30
 8005320:	7083      	strb	r3, [r0, #2]
 8005322:	70c1      	strb	r1, [r0, #3]
 8005324:	1d03      	adds	r3, r0, #4
 8005326:	e7f1      	b.n	800530c <__exponent+0x60>

08005328 <_printf_float>:
 8005328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800532c:	ed2d 8b02 	vpush	{d8}
 8005330:	b08d      	sub	sp, #52	; 0x34
 8005332:	460c      	mov	r4, r1
 8005334:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005338:	4616      	mov	r6, r2
 800533a:	461f      	mov	r7, r3
 800533c:	4605      	mov	r5, r0
 800533e:	f001 fb67 	bl	8006a10 <_localeconv_r>
 8005342:	f8d0 a000 	ldr.w	sl, [r0]
 8005346:	4650      	mov	r0, sl
 8005348:	f7fa ff4a 	bl	80001e0 <strlen>
 800534c:	2300      	movs	r3, #0
 800534e:	930a      	str	r3, [sp, #40]	; 0x28
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	9305      	str	r3, [sp, #20]
 8005354:	f8d8 3000 	ldr.w	r3, [r8]
 8005358:	f894 b018 	ldrb.w	fp, [r4, #24]
 800535c:	3307      	adds	r3, #7
 800535e:	f023 0307 	bic.w	r3, r3, #7
 8005362:	f103 0208 	add.w	r2, r3, #8
 8005366:	f8c8 2000 	str.w	r2, [r8]
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005372:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005376:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800537a:	9307      	str	r3, [sp, #28]
 800537c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005380:	ee08 0a10 	vmov	s16, r0
 8005384:	4b9f      	ldr	r3, [pc, #636]	; (8005604 <_printf_float+0x2dc>)
 8005386:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800538a:	f04f 32ff 	mov.w	r2, #4294967295
 800538e:	f7fb fbd5 	bl	8000b3c <__aeabi_dcmpun>
 8005392:	bb88      	cbnz	r0, 80053f8 <_printf_float+0xd0>
 8005394:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005398:	4b9a      	ldr	r3, [pc, #616]	; (8005604 <_printf_float+0x2dc>)
 800539a:	f04f 32ff 	mov.w	r2, #4294967295
 800539e:	f7fb fbaf 	bl	8000b00 <__aeabi_dcmple>
 80053a2:	bb48      	cbnz	r0, 80053f8 <_printf_float+0xd0>
 80053a4:	2200      	movs	r2, #0
 80053a6:	2300      	movs	r3, #0
 80053a8:	4640      	mov	r0, r8
 80053aa:	4649      	mov	r1, r9
 80053ac:	f7fb fb9e 	bl	8000aec <__aeabi_dcmplt>
 80053b0:	b110      	cbz	r0, 80053b8 <_printf_float+0x90>
 80053b2:	232d      	movs	r3, #45	; 0x2d
 80053b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053b8:	4b93      	ldr	r3, [pc, #588]	; (8005608 <_printf_float+0x2e0>)
 80053ba:	4894      	ldr	r0, [pc, #592]	; (800560c <_printf_float+0x2e4>)
 80053bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80053c0:	bf94      	ite	ls
 80053c2:	4698      	movls	r8, r3
 80053c4:	4680      	movhi	r8, r0
 80053c6:	2303      	movs	r3, #3
 80053c8:	6123      	str	r3, [r4, #16]
 80053ca:	9b05      	ldr	r3, [sp, #20]
 80053cc:	f023 0204 	bic.w	r2, r3, #4
 80053d0:	6022      	str	r2, [r4, #0]
 80053d2:	f04f 0900 	mov.w	r9, #0
 80053d6:	9700      	str	r7, [sp, #0]
 80053d8:	4633      	mov	r3, r6
 80053da:	aa0b      	add	r2, sp, #44	; 0x2c
 80053dc:	4621      	mov	r1, r4
 80053de:	4628      	mov	r0, r5
 80053e0:	f000 f9d8 	bl	8005794 <_printf_common>
 80053e4:	3001      	adds	r0, #1
 80053e6:	f040 8090 	bne.w	800550a <_printf_float+0x1e2>
 80053ea:	f04f 30ff 	mov.w	r0, #4294967295
 80053ee:	b00d      	add	sp, #52	; 0x34
 80053f0:	ecbd 8b02 	vpop	{d8}
 80053f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f8:	4642      	mov	r2, r8
 80053fa:	464b      	mov	r3, r9
 80053fc:	4640      	mov	r0, r8
 80053fe:	4649      	mov	r1, r9
 8005400:	f7fb fb9c 	bl	8000b3c <__aeabi_dcmpun>
 8005404:	b140      	cbz	r0, 8005418 <_printf_float+0xf0>
 8005406:	464b      	mov	r3, r9
 8005408:	2b00      	cmp	r3, #0
 800540a:	bfbc      	itt	lt
 800540c:	232d      	movlt	r3, #45	; 0x2d
 800540e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005412:	487f      	ldr	r0, [pc, #508]	; (8005610 <_printf_float+0x2e8>)
 8005414:	4b7f      	ldr	r3, [pc, #508]	; (8005614 <_printf_float+0x2ec>)
 8005416:	e7d1      	b.n	80053bc <_printf_float+0x94>
 8005418:	6863      	ldr	r3, [r4, #4]
 800541a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800541e:	9206      	str	r2, [sp, #24]
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	d13f      	bne.n	80054a4 <_printf_float+0x17c>
 8005424:	2306      	movs	r3, #6
 8005426:	6063      	str	r3, [r4, #4]
 8005428:	9b05      	ldr	r3, [sp, #20]
 800542a:	6861      	ldr	r1, [r4, #4]
 800542c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005430:	2300      	movs	r3, #0
 8005432:	9303      	str	r3, [sp, #12]
 8005434:	ab0a      	add	r3, sp, #40	; 0x28
 8005436:	e9cd b301 	strd	fp, r3, [sp, #4]
 800543a:	ab09      	add	r3, sp, #36	; 0x24
 800543c:	ec49 8b10 	vmov	d0, r8, r9
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	6022      	str	r2, [r4, #0]
 8005444:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005448:	4628      	mov	r0, r5
 800544a:	f7ff fecd 	bl	80051e8 <__cvt>
 800544e:	9b06      	ldr	r3, [sp, #24]
 8005450:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005452:	2b47      	cmp	r3, #71	; 0x47
 8005454:	4680      	mov	r8, r0
 8005456:	d108      	bne.n	800546a <_printf_float+0x142>
 8005458:	1cc8      	adds	r0, r1, #3
 800545a:	db02      	blt.n	8005462 <_printf_float+0x13a>
 800545c:	6863      	ldr	r3, [r4, #4]
 800545e:	4299      	cmp	r1, r3
 8005460:	dd41      	ble.n	80054e6 <_printf_float+0x1be>
 8005462:	f1ab 0b02 	sub.w	fp, fp, #2
 8005466:	fa5f fb8b 	uxtb.w	fp, fp
 800546a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800546e:	d820      	bhi.n	80054b2 <_printf_float+0x18a>
 8005470:	3901      	subs	r1, #1
 8005472:	465a      	mov	r2, fp
 8005474:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005478:	9109      	str	r1, [sp, #36]	; 0x24
 800547a:	f7ff ff17 	bl	80052ac <__exponent>
 800547e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005480:	1813      	adds	r3, r2, r0
 8005482:	2a01      	cmp	r2, #1
 8005484:	4681      	mov	r9, r0
 8005486:	6123      	str	r3, [r4, #16]
 8005488:	dc02      	bgt.n	8005490 <_printf_float+0x168>
 800548a:	6822      	ldr	r2, [r4, #0]
 800548c:	07d2      	lsls	r2, r2, #31
 800548e:	d501      	bpl.n	8005494 <_printf_float+0x16c>
 8005490:	3301      	adds	r3, #1
 8005492:	6123      	str	r3, [r4, #16]
 8005494:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005498:	2b00      	cmp	r3, #0
 800549a:	d09c      	beq.n	80053d6 <_printf_float+0xae>
 800549c:	232d      	movs	r3, #45	; 0x2d
 800549e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054a2:	e798      	b.n	80053d6 <_printf_float+0xae>
 80054a4:	9a06      	ldr	r2, [sp, #24]
 80054a6:	2a47      	cmp	r2, #71	; 0x47
 80054a8:	d1be      	bne.n	8005428 <_printf_float+0x100>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1bc      	bne.n	8005428 <_printf_float+0x100>
 80054ae:	2301      	movs	r3, #1
 80054b0:	e7b9      	b.n	8005426 <_printf_float+0xfe>
 80054b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80054b6:	d118      	bne.n	80054ea <_printf_float+0x1c2>
 80054b8:	2900      	cmp	r1, #0
 80054ba:	6863      	ldr	r3, [r4, #4]
 80054bc:	dd0b      	ble.n	80054d6 <_printf_float+0x1ae>
 80054be:	6121      	str	r1, [r4, #16]
 80054c0:	b913      	cbnz	r3, 80054c8 <_printf_float+0x1a0>
 80054c2:	6822      	ldr	r2, [r4, #0]
 80054c4:	07d0      	lsls	r0, r2, #31
 80054c6:	d502      	bpl.n	80054ce <_printf_float+0x1a6>
 80054c8:	3301      	adds	r3, #1
 80054ca:	440b      	add	r3, r1
 80054cc:	6123      	str	r3, [r4, #16]
 80054ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80054d0:	f04f 0900 	mov.w	r9, #0
 80054d4:	e7de      	b.n	8005494 <_printf_float+0x16c>
 80054d6:	b913      	cbnz	r3, 80054de <_printf_float+0x1b6>
 80054d8:	6822      	ldr	r2, [r4, #0]
 80054da:	07d2      	lsls	r2, r2, #31
 80054dc:	d501      	bpl.n	80054e2 <_printf_float+0x1ba>
 80054de:	3302      	adds	r3, #2
 80054e0:	e7f4      	b.n	80054cc <_printf_float+0x1a4>
 80054e2:	2301      	movs	r3, #1
 80054e4:	e7f2      	b.n	80054cc <_printf_float+0x1a4>
 80054e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80054ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054ec:	4299      	cmp	r1, r3
 80054ee:	db05      	blt.n	80054fc <_printf_float+0x1d4>
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	6121      	str	r1, [r4, #16]
 80054f4:	07d8      	lsls	r0, r3, #31
 80054f6:	d5ea      	bpl.n	80054ce <_printf_float+0x1a6>
 80054f8:	1c4b      	adds	r3, r1, #1
 80054fa:	e7e7      	b.n	80054cc <_printf_float+0x1a4>
 80054fc:	2900      	cmp	r1, #0
 80054fe:	bfd4      	ite	le
 8005500:	f1c1 0202 	rsble	r2, r1, #2
 8005504:	2201      	movgt	r2, #1
 8005506:	4413      	add	r3, r2
 8005508:	e7e0      	b.n	80054cc <_printf_float+0x1a4>
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	055a      	lsls	r2, r3, #21
 800550e:	d407      	bmi.n	8005520 <_printf_float+0x1f8>
 8005510:	6923      	ldr	r3, [r4, #16]
 8005512:	4642      	mov	r2, r8
 8005514:	4631      	mov	r1, r6
 8005516:	4628      	mov	r0, r5
 8005518:	47b8      	blx	r7
 800551a:	3001      	adds	r0, #1
 800551c:	d12c      	bne.n	8005578 <_printf_float+0x250>
 800551e:	e764      	b.n	80053ea <_printf_float+0xc2>
 8005520:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005524:	f240 80e0 	bls.w	80056e8 <_printf_float+0x3c0>
 8005528:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800552c:	2200      	movs	r2, #0
 800552e:	2300      	movs	r3, #0
 8005530:	f7fb fad2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005534:	2800      	cmp	r0, #0
 8005536:	d034      	beq.n	80055a2 <_printf_float+0x27a>
 8005538:	4a37      	ldr	r2, [pc, #220]	; (8005618 <_printf_float+0x2f0>)
 800553a:	2301      	movs	r3, #1
 800553c:	4631      	mov	r1, r6
 800553e:	4628      	mov	r0, r5
 8005540:	47b8      	blx	r7
 8005542:	3001      	adds	r0, #1
 8005544:	f43f af51 	beq.w	80053ea <_printf_float+0xc2>
 8005548:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800554c:	429a      	cmp	r2, r3
 800554e:	db02      	blt.n	8005556 <_printf_float+0x22e>
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	07d8      	lsls	r0, r3, #31
 8005554:	d510      	bpl.n	8005578 <_printf_float+0x250>
 8005556:	ee18 3a10 	vmov	r3, s16
 800555a:	4652      	mov	r2, sl
 800555c:	4631      	mov	r1, r6
 800555e:	4628      	mov	r0, r5
 8005560:	47b8      	blx	r7
 8005562:	3001      	adds	r0, #1
 8005564:	f43f af41 	beq.w	80053ea <_printf_float+0xc2>
 8005568:	f04f 0800 	mov.w	r8, #0
 800556c:	f104 091a 	add.w	r9, r4, #26
 8005570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005572:	3b01      	subs	r3, #1
 8005574:	4543      	cmp	r3, r8
 8005576:	dc09      	bgt.n	800558c <_printf_float+0x264>
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	079b      	lsls	r3, r3, #30
 800557c:	f100 8105 	bmi.w	800578a <_printf_float+0x462>
 8005580:	68e0      	ldr	r0, [r4, #12]
 8005582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005584:	4298      	cmp	r0, r3
 8005586:	bfb8      	it	lt
 8005588:	4618      	movlt	r0, r3
 800558a:	e730      	b.n	80053ee <_printf_float+0xc6>
 800558c:	2301      	movs	r3, #1
 800558e:	464a      	mov	r2, r9
 8005590:	4631      	mov	r1, r6
 8005592:	4628      	mov	r0, r5
 8005594:	47b8      	blx	r7
 8005596:	3001      	adds	r0, #1
 8005598:	f43f af27 	beq.w	80053ea <_printf_float+0xc2>
 800559c:	f108 0801 	add.w	r8, r8, #1
 80055a0:	e7e6      	b.n	8005570 <_printf_float+0x248>
 80055a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	dc39      	bgt.n	800561c <_printf_float+0x2f4>
 80055a8:	4a1b      	ldr	r2, [pc, #108]	; (8005618 <_printf_float+0x2f0>)
 80055aa:	2301      	movs	r3, #1
 80055ac:	4631      	mov	r1, r6
 80055ae:	4628      	mov	r0, r5
 80055b0:	47b8      	blx	r7
 80055b2:	3001      	adds	r0, #1
 80055b4:	f43f af19 	beq.w	80053ea <_printf_float+0xc2>
 80055b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055bc:	4313      	orrs	r3, r2
 80055be:	d102      	bne.n	80055c6 <_printf_float+0x29e>
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	07d9      	lsls	r1, r3, #31
 80055c4:	d5d8      	bpl.n	8005578 <_printf_float+0x250>
 80055c6:	ee18 3a10 	vmov	r3, s16
 80055ca:	4652      	mov	r2, sl
 80055cc:	4631      	mov	r1, r6
 80055ce:	4628      	mov	r0, r5
 80055d0:	47b8      	blx	r7
 80055d2:	3001      	adds	r0, #1
 80055d4:	f43f af09 	beq.w	80053ea <_printf_float+0xc2>
 80055d8:	f04f 0900 	mov.w	r9, #0
 80055dc:	f104 0a1a 	add.w	sl, r4, #26
 80055e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055e2:	425b      	negs	r3, r3
 80055e4:	454b      	cmp	r3, r9
 80055e6:	dc01      	bgt.n	80055ec <_printf_float+0x2c4>
 80055e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055ea:	e792      	b.n	8005512 <_printf_float+0x1ea>
 80055ec:	2301      	movs	r3, #1
 80055ee:	4652      	mov	r2, sl
 80055f0:	4631      	mov	r1, r6
 80055f2:	4628      	mov	r0, r5
 80055f4:	47b8      	blx	r7
 80055f6:	3001      	adds	r0, #1
 80055f8:	f43f aef7 	beq.w	80053ea <_printf_float+0xc2>
 80055fc:	f109 0901 	add.w	r9, r9, #1
 8005600:	e7ee      	b.n	80055e0 <_printf_float+0x2b8>
 8005602:	bf00      	nop
 8005604:	7fefffff 	.word	0x7fefffff
 8005608:	080080c4 	.word	0x080080c4
 800560c:	080080c8 	.word	0x080080c8
 8005610:	080080d0 	.word	0x080080d0
 8005614:	080080cc 	.word	0x080080cc
 8005618:	080080d4 	.word	0x080080d4
 800561c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800561e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005620:	429a      	cmp	r2, r3
 8005622:	bfa8      	it	ge
 8005624:	461a      	movge	r2, r3
 8005626:	2a00      	cmp	r2, #0
 8005628:	4691      	mov	r9, r2
 800562a:	dc37      	bgt.n	800569c <_printf_float+0x374>
 800562c:	f04f 0b00 	mov.w	fp, #0
 8005630:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005634:	f104 021a 	add.w	r2, r4, #26
 8005638:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800563a:	9305      	str	r3, [sp, #20]
 800563c:	eba3 0309 	sub.w	r3, r3, r9
 8005640:	455b      	cmp	r3, fp
 8005642:	dc33      	bgt.n	80056ac <_printf_float+0x384>
 8005644:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005648:	429a      	cmp	r2, r3
 800564a:	db3b      	blt.n	80056c4 <_printf_float+0x39c>
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	07da      	lsls	r2, r3, #31
 8005650:	d438      	bmi.n	80056c4 <_printf_float+0x39c>
 8005652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005654:	9a05      	ldr	r2, [sp, #20]
 8005656:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005658:	1a9a      	subs	r2, r3, r2
 800565a:	eba3 0901 	sub.w	r9, r3, r1
 800565e:	4591      	cmp	r9, r2
 8005660:	bfa8      	it	ge
 8005662:	4691      	movge	r9, r2
 8005664:	f1b9 0f00 	cmp.w	r9, #0
 8005668:	dc35      	bgt.n	80056d6 <_printf_float+0x3ae>
 800566a:	f04f 0800 	mov.w	r8, #0
 800566e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005672:	f104 0a1a 	add.w	sl, r4, #26
 8005676:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800567a:	1a9b      	subs	r3, r3, r2
 800567c:	eba3 0309 	sub.w	r3, r3, r9
 8005680:	4543      	cmp	r3, r8
 8005682:	f77f af79 	ble.w	8005578 <_printf_float+0x250>
 8005686:	2301      	movs	r3, #1
 8005688:	4652      	mov	r2, sl
 800568a:	4631      	mov	r1, r6
 800568c:	4628      	mov	r0, r5
 800568e:	47b8      	blx	r7
 8005690:	3001      	adds	r0, #1
 8005692:	f43f aeaa 	beq.w	80053ea <_printf_float+0xc2>
 8005696:	f108 0801 	add.w	r8, r8, #1
 800569a:	e7ec      	b.n	8005676 <_printf_float+0x34e>
 800569c:	4613      	mov	r3, r2
 800569e:	4631      	mov	r1, r6
 80056a0:	4642      	mov	r2, r8
 80056a2:	4628      	mov	r0, r5
 80056a4:	47b8      	blx	r7
 80056a6:	3001      	adds	r0, #1
 80056a8:	d1c0      	bne.n	800562c <_printf_float+0x304>
 80056aa:	e69e      	b.n	80053ea <_printf_float+0xc2>
 80056ac:	2301      	movs	r3, #1
 80056ae:	4631      	mov	r1, r6
 80056b0:	4628      	mov	r0, r5
 80056b2:	9205      	str	r2, [sp, #20]
 80056b4:	47b8      	blx	r7
 80056b6:	3001      	adds	r0, #1
 80056b8:	f43f ae97 	beq.w	80053ea <_printf_float+0xc2>
 80056bc:	9a05      	ldr	r2, [sp, #20]
 80056be:	f10b 0b01 	add.w	fp, fp, #1
 80056c2:	e7b9      	b.n	8005638 <_printf_float+0x310>
 80056c4:	ee18 3a10 	vmov	r3, s16
 80056c8:	4652      	mov	r2, sl
 80056ca:	4631      	mov	r1, r6
 80056cc:	4628      	mov	r0, r5
 80056ce:	47b8      	blx	r7
 80056d0:	3001      	adds	r0, #1
 80056d2:	d1be      	bne.n	8005652 <_printf_float+0x32a>
 80056d4:	e689      	b.n	80053ea <_printf_float+0xc2>
 80056d6:	9a05      	ldr	r2, [sp, #20]
 80056d8:	464b      	mov	r3, r9
 80056da:	4442      	add	r2, r8
 80056dc:	4631      	mov	r1, r6
 80056de:	4628      	mov	r0, r5
 80056e0:	47b8      	blx	r7
 80056e2:	3001      	adds	r0, #1
 80056e4:	d1c1      	bne.n	800566a <_printf_float+0x342>
 80056e6:	e680      	b.n	80053ea <_printf_float+0xc2>
 80056e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056ea:	2a01      	cmp	r2, #1
 80056ec:	dc01      	bgt.n	80056f2 <_printf_float+0x3ca>
 80056ee:	07db      	lsls	r3, r3, #31
 80056f0:	d538      	bpl.n	8005764 <_printf_float+0x43c>
 80056f2:	2301      	movs	r3, #1
 80056f4:	4642      	mov	r2, r8
 80056f6:	4631      	mov	r1, r6
 80056f8:	4628      	mov	r0, r5
 80056fa:	47b8      	blx	r7
 80056fc:	3001      	adds	r0, #1
 80056fe:	f43f ae74 	beq.w	80053ea <_printf_float+0xc2>
 8005702:	ee18 3a10 	vmov	r3, s16
 8005706:	4652      	mov	r2, sl
 8005708:	4631      	mov	r1, r6
 800570a:	4628      	mov	r0, r5
 800570c:	47b8      	blx	r7
 800570e:	3001      	adds	r0, #1
 8005710:	f43f ae6b 	beq.w	80053ea <_printf_float+0xc2>
 8005714:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005718:	2200      	movs	r2, #0
 800571a:	2300      	movs	r3, #0
 800571c:	f7fb f9dc 	bl	8000ad8 <__aeabi_dcmpeq>
 8005720:	b9d8      	cbnz	r0, 800575a <_printf_float+0x432>
 8005722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005724:	f108 0201 	add.w	r2, r8, #1
 8005728:	3b01      	subs	r3, #1
 800572a:	4631      	mov	r1, r6
 800572c:	4628      	mov	r0, r5
 800572e:	47b8      	blx	r7
 8005730:	3001      	adds	r0, #1
 8005732:	d10e      	bne.n	8005752 <_printf_float+0x42a>
 8005734:	e659      	b.n	80053ea <_printf_float+0xc2>
 8005736:	2301      	movs	r3, #1
 8005738:	4652      	mov	r2, sl
 800573a:	4631      	mov	r1, r6
 800573c:	4628      	mov	r0, r5
 800573e:	47b8      	blx	r7
 8005740:	3001      	adds	r0, #1
 8005742:	f43f ae52 	beq.w	80053ea <_printf_float+0xc2>
 8005746:	f108 0801 	add.w	r8, r8, #1
 800574a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800574c:	3b01      	subs	r3, #1
 800574e:	4543      	cmp	r3, r8
 8005750:	dcf1      	bgt.n	8005736 <_printf_float+0x40e>
 8005752:	464b      	mov	r3, r9
 8005754:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005758:	e6dc      	b.n	8005514 <_printf_float+0x1ec>
 800575a:	f04f 0800 	mov.w	r8, #0
 800575e:	f104 0a1a 	add.w	sl, r4, #26
 8005762:	e7f2      	b.n	800574a <_printf_float+0x422>
 8005764:	2301      	movs	r3, #1
 8005766:	4642      	mov	r2, r8
 8005768:	e7df      	b.n	800572a <_printf_float+0x402>
 800576a:	2301      	movs	r3, #1
 800576c:	464a      	mov	r2, r9
 800576e:	4631      	mov	r1, r6
 8005770:	4628      	mov	r0, r5
 8005772:	47b8      	blx	r7
 8005774:	3001      	adds	r0, #1
 8005776:	f43f ae38 	beq.w	80053ea <_printf_float+0xc2>
 800577a:	f108 0801 	add.w	r8, r8, #1
 800577e:	68e3      	ldr	r3, [r4, #12]
 8005780:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005782:	1a5b      	subs	r3, r3, r1
 8005784:	4543      	cmp	r3, r8
 8005786:	dcf0      	bgt.n	800576a <_printf_float+0x442>
 8005788:	e6fa      	b.n	8005580 <_printf_float+0x258>
 800578a:	f04f 0800 	mov.w	r8, #0
 800578e:	f104 0919 	add.w	r9, r4, #25
 8005792:	e7f4      	b.n	800577e <_printf_float+0x456>

08005794 <_printf_common>:
 8005794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005798:	4616      	mov	r6, r2
 800579a:	4699      	mov	r9, r3
 800579c:	688a      	ldr	r2, [r1, #8]
 800579e:	690b      	ldr	r3, [r1, #16]
 80057a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057a4:	4293      	cmp	r3, r2
 80057a6:	bfb8      	it	lt
 80057a8:	4613      	movlt	r3, r2
 80057aa:	6033      	str	r3, [r6, #0]
 80057ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057b0:	4607      	mov	r7, r0
 80057b2:	460c      	mov	r4, r1
 80057b4:	b10a      	cbz	r2, 80057ba <_printf_common+0x26>
 80057b6:	3301      	adds	r3, #1
 80057b8:	6033      	str	r3, [r6, #0]
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	0699      	lsls	r1, r3, #26
 80057be:	bf42      	ittt	mi
 80057c0:	6833      	ldrmi	r3, [r6, #0]
 80057c2:	3302      	addmi	r3, #2
 80057c4:	6033      	strmi	r3, [r6, #0]
 80057c6:	6825      	ldr	r5, [r4, #0]
 80057c8:	f015 0506 	ands.w	r5, r5, #6
 80057cc:	d106      	bne.n	80057dc <_printf_common+0x48>
 80057ce:	f104 0a19 	add.w	sl, r4, #25
 80057d2:	68e3      	ldr	r3, [r4, #12]
 80057d4:	6832      	ldr	r2, [r6, #0]
 80057d6:	1a9b      	subs	r3, r3, r2
 80057d8:	42ab      	cmp	r3, r5
 80057da:	dc26      	bgt.n	800582a <_printf_common+0x96>
 80057dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057e0:	1e13      	subs	r3, r2, #0
 80057e2:	6822      	ldr	r2, [r4, #0]
 80057e4:	bf18      	it	ne
 80057e6:	2301      	movne	r3, #1
 80057e8:	0692      	lsls	r2, r2, #26
 80057ea:	d42b      	bmi.n	8005844 <_printf_common+0xb0>
 80057ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057f0:	4649      	mov	r1, r9
 80057f2:	4638      	mov	r0, r7
 80057f4:	47c0      	blx	r8
 80057f6:	3001      	adds	r0, #1
 80057f8:	d01e      	beq.n	8005838 <_printf_common+0xa4>
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	68e5      	ldr	r5, [r4, #12]
 80057fe:	6832      	ldr	r2, [r6, #0]
 8005800:	f003 0306 	and.w	r3, r3, #6
 8005804:	2b04      	cmp	r3, #4
 8005806:	bf08      	it	eq
 8005808:	1aad      	subeq	r5, r5, r2
 800580a:	68a3      	ldr	r3, [r4, #8]
 800580c:	6922      	ldr	r2, [r4, #16]
 800580e:	bf0c      	ite	eq
 8005810:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005814:	2500      	movne	r5, #0
 8005816:	4293      	cmp	r3, r2
 8005818:	bfc4      	itt	gt
 800581a:	1a9b      	subgt	r3, r3, r2
 800581c:	18ed      	addgt	r5, r5, r3
 800581e:	2600      	movs	r6, #0
 8005820:	341a      	adds	r4, #26
 8005822:	42b5      	cmp	r5, r6
 8005824:	d11a      	bne.n	800585c <_printf_common+0xc8>
 8005826:	2000      	movs	r0, #0
 8005828:	e008      	b.n	800583c <_printf_common+0xa8>
 800582a:	2301      	movs	r3, #1
 800582c:	4652      	mov	r2, sl
 800582e:	4649      	mov	r1, r9
 8005830:	4638      	mov	r0, r7
 8005832:	47c0      	blx	r8
 8005834:	3001      	adds	r0, #1
 8005836:	d103      	bne.n	8005840 <_printf_common+0xac>
 8005838:	f04f 30ff 	mov.w	r0, #4294967295
 800583c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005840:	3501      	adds	r5, #1
 8005842:	e7c6      	b.n	80057d2 <_printf_common+0x3e>
 8005844:	18e1      	adds	r1, r4, r3
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	2030      	movs	r0, #48	; 0x30
 800584a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800584e:	4422      	add	r2, r4
 8005850:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005854:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005858:	3302      	adds	r3, #2
 800585a:	e7c7      	b.n	80057ec <_printf_common+0x58>
 800585c:	2301      	movs	r3, #1
 800585e:	4622      	mov	r2, r4
 8005860:	4649      	mov	r1, r9
 8005862:	4638      	mov	r0, r7
 8005864:	47c0      	blx	r8
 8005866:	3001      	adds	r0, #1
 8005868:	d0e6      	beq.n	8005838 <_printf_common+0xa4>
 800586a:	3601      	adds	r6, #1
 800586c:	e7d9      	b.n	8005822 <_printf_common+0x8e>
	...

08005870 <_printf_i>:
 8005870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005874:	7e0f      	ldrb	r7, [r1, #24]
 8005876:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005878:	2f78      	cmp	r7, #120	; 0x78
 800587a:	4691      	mov	r9, r2
 800587c:	4680      	mov	r8, r0
 800587e:	460c      	mov	r4, r1
 8005880:	469a      	mov	sl, r3
 8005882:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005886:	d807      	bhi.n	8005898 <_printf_i+0x28>
 8005888:	2f62      	cmp	r7, #98	; 0x62
 800588a:	d80a      	bhi.n	80058a2 <_printf_i+0x32>
 800588c:	2f00      	cmp	r7, #0
 800588e:	f000 80d8 	beq.w	8005a42 <_printf_i+0x1d2>
 8005892:	2f58      	cmp	r7, #88	; 0x58
 8005894:	f000 80a3 	beq.w	80059de <_printf_i+0x16e>
 8005898:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800589c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058a0:	e03a      	b.n	8005918 <_printf_i+0xa8>
 80058a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058a6:	2b15      	cmp	r3, #21
 80058a8:	d8f6      	bhi.n	8005898 <_printf_i+0x28>
 80058aa:	a101      	add	r1, pc, #4	; (adr r1, 80058b0 <_printf_i+0x40>)
 80058ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058b0:	08005909 	.word	0x08005909
 80058b4:	0800591d 	.word	0x0800591d
 80058b8:	08005899 	.word	0x08005899
 80058bc:	08005899 	.word	0x08005899
 80058c0:	08005899 	.word	0x08005899
 80058c4:	08005899 	.word	0x08005899
 80058c8:	0800591d 	.word	0x0800591d
 80058cc:	08005899 	.word	0x08005899
 80058d0:	08005899 	.word	0x08005899
 80058d4:	08005899 	.word	0x08005899
 80058d8:	08005899 	.word	0x08005899
 80058dc:	08005a29 	.word	0x08005a29
 80058e0:	0800594d 	.word	0x0800594d
 80058e4:	08005a0b 	.word	0x08005a0b
 80058e8:	08005899 	.word	0x08005899
 80058ec:	08005899 	.word	0x08005899
 80058f0:	08005a4b 	.word	0x08005a4b
 80058f4:	08005899 	.word	0x08005899
 80058f8:	0800594d 	.word	0x0800594d
 80058fc:	08005899 	.word	0x08005899
 8005900:	08005899 	.word	0x08005899
 8005904:	08005a13 	.word	0x08005a13
 8005908:	682b      	ldr	r3, [r5, #0]
 800590a:	1d1a      	adds	r2, r3, #4
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	602a      	str	r2, [r5, #0]
 8005910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005914:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005918:	2301      	movs	r3, #1
 800591a:	e0a3      	b.n	8005a64 <_printf_i+0x1f4>
 800591c:	6820      	ldr	r0, [r4, #0]
 800591e:	6829      	ldr	r1, [r5, #0]
 8005920:	0606      	lsls	r6, r0, #24
 8005922:	f101 0304 	add.w	r3, r1, #4
 8005926:	d50a      	bpl.n	800593e <_printf_i+0xce>
 8005928:	680e      	ldr	r6, [r1, #0]
 800592a:	602b      	str	r3, [r5, #0]
 800592c:	2e00      	cmp	r6, #0
 800592e:	da03      	bge.n	8005938 <_printf_i+0xc8>
 8005930:	232d      	movs	r3, #45	; 0x2d
 8005932:	4276      	negs	r6, r6
 8005934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005938:	485e      	ldr	r0, [pc, #376]	; (8005ab4 <_printf_i+0x244>)
 800593a:	230a      	movs	r3, #10
 800593c:	e019      	b.n	8005972 <_printf_i+0x102>
 800593e:	680e      	ldr	r6, [r1, #0]
 8005940:	602b      	str	r3, [r5, #0]
 8005942:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005946:	bf18      	it	ne
 8005948:	b236      	sxthne	r6, r6
 800594a:	e7ef      	b.n	800592c <_printf_i+0xbc>
 800594c:	682b      	ldr	r3, [r5, #0]
 800594e:	6820      	ldr	r0, [r4, #0]
 8005950:	1d19      	adds	r1, r3, #4
 8005952:	6029      	str	r1, [r5, #0]
 8005954:	0601      	lsls	r1, r0, #24
 8005956:	d501      	bpl.n	800595c <_printf_i+0xec>
 8005958:	681e      	ldr	r6, [r3, #0]
 800595a:	e002      	b.n	8005962 <_printf_i+0xf2>
 800595c:	0646      	lsls	r6, r0, #25
 800595e:	d5fb      	bpl.n	8005958 <_printf_i+0xe8>
 8005960:	881e      	ldrh	r6, [r3, #0]
 8005962:	4854      	ldr	r0, [pc, #336]	; (8005ab4 <_printf_i+0x244>)
 8005964:	2f6f      	cmp	r7, #111	; 0x6f
 8005966:	bf0c      	ite	eq
 8005968:	2308      	moveq	r3, #8
 800596a:	230a      	movne	r3, #10
 800596c:	2100      	movs	r1, #0
 800596e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005972:	6865      	ldr	r5, [r4, #4]
 8005974:	60a5      	str	r5, [r4, #8]
 8005976:	2d00      	cmp	r5, #0
 8005978:	bfa2      	ittt	ge
 800597a:	6821      	ldrge	r1, [r4, #0]
 800597c:	f021 0104 	bicge.w	r1, r1, #4
 8005980:	6021      	strge	r1, [r4, #0]
 8005982:	b90e      	cbnz	r6, 8005988 <_printf_i+0x118>
 8005984:	2d00      	cmp	r5, #0
 8005986:	d04d      	beq.n	8005a24 <_printf_i+0x1b4>
 8005988:	4615      	mov	r5, r2
 800598a:	fbb6 f1f3 	udiv	r1, r6, r3
 800598e:	fb03 6711 	mls	r7, r3, r1, r6
 8005992:	5dc7      	ldrb	r7, [r0, r7]
 8005994:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005998:	4637      	mov	r7, r6
 800599a:	42bb      	cmp	r3, r7
 800599c:	460e      	mov	r6, r1
 800599e:	d9f4      	bls.n	800598a <_printf_i+0x11a>
 80059a0:	2b08      	cmp	r3, #8
 80059a2:	d10b      	bne.n	80059bc <_printf_i+0x14c>
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	07de      	lsls	r6, r3, #31
 80059a8:	d508      	bpl.n	80059bc <_printf_i+0x14c>
 80059aa:	6923      	ldr	r3, [r4, #16]
 80059ac:	6861      	ldr	r1, [r4, #4]
 80059ae:	4299      	cmp	r1, r3
 80059b0:	bfde      	ittt	le
 80059b2:	2330      	movle	r3, #48	; 0x30
 80059b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059bc:	1b52      	subs	r2, r2, r5
 80059be:	6122      	str	r2, [r4, #16]
 80059c0:	f8cd a000 	str.w	sl, [sp]
 80059c4:	464b      	mov	r3, r9
 80059c6:	aa03      	add	r2, sp, #12
 80059c8:	4621      	mov	r1, r4
 80059ca:	4640      	mov	r0, r8
 80059cc:	f7ff fee2 	bl	8005794 <_printf_common>
 80059d0:	3001      	adds	r0, #1
 80059d2:	d14c      	bne.n	8005a6e <_printf_i+0x1fe>
 80059d4:	f04f 30ff 	mov.w	r0, #4294967295
 80059d8:	b004      	add	sp, #16
 80059da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059de:	4835      	ldr	r0, [pc, #212]	; (8005ab4 <_printf_i+0x244>)
 80059e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80059e4:	6829      	ldr	r1, [r5, #0]
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80059ec:	6029      	str	r1, [r5, #0]
 80059ee:	061d      	lsls	r5, r3, #24
 80059f0:	d514      	bpl.n	8005a1c <_printf_i+0x1ac>
 80059f2:	07df      	lsls	r7, r3, #31
 80059f4:	bf44      	itt	mi
 80059f6:	f043 0320 	orrmi.w	r3, r3, #32
 80059fa:	6023      	strmi	r3, [r4, #0]
 80059fc:	b91e      	cbnz	r6, 8005a06 <_printf_i+0x196>
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	f023 0320 	bic.w	r3, r3, #32
 8005a04:	6023      	str	r3, [r4, #0]
 8005a06:	2310      	movs	r3, #16
 8005a08:	e7b0      	b.n	800596c <_printf_i+0xfc>
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	f043 0320 	orr.w	r3, r3, #32
 8005a10:	6023      	str	r3, [r4, #0]
 8005a12:	2378      	movs	r3, #120	; 0x78
 8005a14:	4828      	ldr	r0, [pc, #160]	; (8005ab8 <_printf_i+0x248>)
 8005a16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a1a:	e7e3      	b.n	80059e4 <_printf_i+0x174>
 8005a1c:	0659      	lsls	r1, r3, #25
 8005a1e:	bf48      	it	mi
 8005a20:	b2b6      	uxthmi	r6, r6
 8005a22:	e7e6      	b.n	80059f2 <_printf_i+0x182>
 8005a24:	4615      	mov	r5, r2
 8005a26:	e7bb      	b.n	80059a0 <_printf_i+0x130>
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	6826      	ldr	r6, [r4, #0]
 8005a2c:	6961      	ldr	r1, [r4, #20]
 8005a2e:	1d18      	adds	r0, r3, #4
 8005a30:	6028      	str	r0, [r5, #0]
 8005a32:	0635      	lsls	r5, r6, #24
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	d501      	bpl.n	8005a3c <_printf_i+0x1cc>
 8005a38:	6019      	str	r1, [r3, #0]
 8005a3a:	e002      	b.n	8005a42 <_printf_i+0x1d2>
 8005a3c:	0670      	lsls	r0, r6, #25
 8005a3e:	d5fb      	bpl.n	8005a38 <_printf_i+0x1c8>
 8005a40:	8019      	strh	r1, [r3, #0]
 8005a42:	2300      	movs	r3, #0
 8005a44:	6123      	str	r3, [r4, #16]
 8005a46:	4615      	mov	r5, r2
 8005a48:	e7ba      	b.n	80059c0 <_printf_i+0x150>
 8005a4a:	682b      	ldr	r3, [r5, #0]
 8005a4c:	1d1a      	adds	r2, r3, #4
 8005a4e:	602a      	str	r2, [r5, #0]
 8005a50:	681d      	ldr	r5, [r3, #0]
 8005a52:	6862      	ldr	r2, [r4, #4]
 8005a54:	2100      	movs	r1, #0
 8005a56:	4628      	mov	r0, r5
 8005a58:	f7fa fbca 	bl	80001f0 <memchr>
 8005a5c:	b108      	cbz	r0, 8005a62 <_printf_i+0x1f2>
 8005a5e:	1b40      	subs	r0, r0, r5
 8005a60:	6060      	str	r0, [r4, #4]
 8005a62:	6863      	ldr	r3, [r4, #4]
 8005a64:	6123      	str	r3, [r4, #16]
 8005a66:	2300      	movs	r3, #0
 8005a68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a6c:	e7a8      	b.n	80059c0 <_printf_i+0x150>
 8005a6e:	6923      	ldr	r3, [r4, #16]
 8005a70:	462a      	mov	r2, r5
 8005a72:	4649      	mov	r1, r9
 8005a74:	4640      	mov	r0, r8
 8005a76:	47d0      	blx	sl
 8005a78:	3001      	adds	r0, #1
 8005a7a:	d0ab      	beq.n	80059d4 <_printf_i+0x164>
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	079b      	lsls	r3, r3, #30
 8005a80:	d413      	bmi.n	8005aaa <_printf_i+0x23a>
 8005a82:	68e0      	ldr	r0, [r4, #12]
 8005a84:	9b03      	ldr	r3, [sp, #12]
 8005a86:	4298      	cmp	r0, r3
 8005a88:	bfb8      	it	lt
 8005a8a:	4618      	movlt	r0, r3
 8005a8c:	e7a4      	b.n	80059d8 <_printf_i+0x168>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	4632      	mov	r2, r6
 8005a92:	4649      	mov	r1, r9
 8005a94:	4640      	mov	r0, r8
 8005a96:	47d0      	blx	sl
 8005a98:	3001      	adds	r0, #1
 8005a9a:	d09b      	beq.n	80059d4 <_printf_i+0x164>
 8005a9c:	3501      	adds	r5, #1
 8005a9e:	68e3      	ldr	r3, [r4, #12]
 8005aa0:	9903      	ldr	r1, [sp, #12]
 8005aa2:	1a5b      	subs	r3, r3, r1
 8005aa4:	42ab      	cmp	r3, r5
 8005aa6:	dcf2      	bgt.n	8005a8e <_printf_i+0x21e>
 8005aa8:	e7eb      	b.n	8005a82 <_printf_i+0x212>
 8005aaa:	2500      	movs	r5, #0
 8005aac:	f104 0619 	add.w	r6, r4, #25
 8005ab0:	e7f5      	b.n	8005a9e <_printf_i+0x22e>
 8005ab2:	bf00      	nop
 8005ab4:	080080d6 	.word	0x080080d6
 8005ab8:	080080e7 	.word	0x080080e7

08005abc <iprintf>:
 8005abc:	b40f      	push	{r0, r1, r2, r3}
 8005abe:	4b0a      	ldr	r3, [pc, #40]	; (8005ae8 <iprintf+0x2c>)
 8005ac0:	b513      	push	{r0, r1, r4, lr}
 8005ac2:	681c      	ldr	r4, [r3, #0]
 8005ac4:	b124      	cbz	r4, 8005ad0 <iprintf+0x14>
 8005ac6:	69a3      	ldr	r3, [r4, #24]
 8005ac8:	b913      	cbnz	r3, 8005ad0 <iprintf+0x14>
 8005aca:	4620      	mov	r0, r4
 8005acc:	f000 ff02 	bl	80068d4 <__sinit>
 8005ad0:	ab05      	add	r3, sp, #20
 8005ad2:	9a04      	ldr	r2, [sp, #16]
 8005ad4:	68a1      	ldr	r1, [r4, #8]
 8005ad6:	9301      	str	r3, [sp, #4]
 8005ad8:	4620      	mov	r0, r4
 8005ada:	f001 fdb7 	bl	800764c <_vfiprintf_r>
 8005ade:	b002      	add	sp, #8
 8005ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ae4:	b004      	add	sp, #16
 8005ae6:	4770      	bx	lr
 8005ae8:	2000000c 	.word	0x2000000c

08005aec <siprintf>:
 8005aec:	b40e      	push	{r1, r2, r3}
 8005aee:	b500      	push	{lr}
 8005af0:	b09c      	sub	sp, #112	; 0x70
 8005af2:	ab1d      	add	r3, sp, #116	; 0x74
 8005af4:	9002      	str	r0, [sp, #8]
 8005af6:	9006      	str	r0, [sp, #24]
 8005af8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005afc:	4809      	ldr	r0, [pc, #36]	; (8005b24 <siprintf+0x38>)
 8005afe:	9107      	str	r1, [sp, #28]
 8005b00:	9104      	str	r1, [sp, #16]
 8005b02:	4909      	ldr	r1, [pc, #36]	; (8005b28 <siprintf+0x3c>)
 8005b04:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b08:	9105      	str	r1, [sp, #20]
 8005b0a:	6800      	ldr	r0, [r0, #0]
 8005b0c:	9301      	str	r3, [sp, #4]
 8005b0e:	a902      	add	r1, sp, #8
 8005b10:	f001 fc72 	bl	80073f8 <_svfiprintf_r>
 8005b14:	9b02      	ldr	r3, [sp, #8]
 8005b16:	2200      	movs	r2, #0
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	b01c      	add	sp, #112	; 0x70
 8005b1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b20:	b003      	add	sp, #12
 8005b22:	4770      	bx	lr
 8005b24:	2000000c 	.word	0x2000000c
 8005b28:	ffff0208 	.word	0xffff0208

08005b2c <quorem>:
 8005b2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b30:	6903      	ldr	r3, [r0, #16]
 8005b32:	690c      	ldr	r4, [r1, #16]
 8005b34:	42a3      	cmp	r3, r4
 8005b36:	4607      	mov	r7, r0
 8005b38:	f2c0 8081 	blt.w	8005c3e <quorem+0x112>
 8005b3c:	3c01      	subs	r4, #1
 8005b3e:	f101 0814 	add.w	r8, r1, #20
 8005b42:	f100 0514 	add.w	r5, r0, #20
 8005b46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b4a:	9301      	str	r3, [sp, #4]
 8005b4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b54:	3301      	adds	r3, #1
 8005b56:	429a      	cmp	r2, r3
 8005b58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005b5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b60:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b64:	d331      	bcc.n	8005bca <quorem+0x9e>
 8005b66:	f04f 0e00 	mov.w	lr, #0
 8005b6a:	4640      	mov	r0, r8
 8005b6c:	46ac      	mov	ip, r5
 8005b6e:	46f2      	mov	sl, lr
 8005b70:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b74:	b293      	uxth	r3, r2
 8005b76:	fb06 e303 	mla	r3, r6, r3, lr
 8005b7a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	ebaa 0303 	sub.w	r3, sl, r3
 8005b84:	f8dc a000 	ldr.w	sl, [ip]
 8005b88:	0c12      	lsrs	r2, r2, #16
 8005b8a:	fa13 f38a 	uxtah	r3, r3, sl
 8005b8e:	fb06 e202 	mla	r2, r6, r2, lr
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	9b00      	ldr	r3, [sp, #0]
 8005b96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005b9a:	b292      	uxth	r2, r2
 8005b9c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005ba0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ba4:	f8bd 3000 	ldrh.w	r3, [sp]
 8005ba8:	4581      	cmp	r9, r0
 8005baa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bae:	f84c 3b04 	str.w	r3, [ip], #4
 8005bb2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005bb6:	d2db      	bcs.n	8005b70 <quorem+0x44>
 8005bb8:	f855 300b 	ldr.w	r3, [r5, fp]
 8005bbc:	b92b      	cbnz	r3, 8005bca <quorem+0x9e>
 8005bbe:	9b01      	ldr	r3, [sp, #4]
 8005bc0:	3b04      	subs	r3, #4
 8005bc2:	429d      	cmp	r5, r3
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	d32e      	bcc.n	8005c26 <quorem+0xfa>
 8005bc8:	613c      	str	r4, [r7, #16]
 8005bca:	4638      	mov	r0, r7
 8005bcc:	f001 f9c0 	bl	8006f50 <__mcmp>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	db24      	blt.n	8005c1e <quorem+0xf2>
 8005bd4:	3601      	adds	r6, #1
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	f04f 0c00 	mov.w	ip, #0
 8005bdc:	f858 2b04 	ldr.w	r2, [r8], #4
 8005be0:	f8d0 e000 	ldr.w	lr, [r0]
 8005be4:	b293      	uxth	r3, r2
 8005be6:	ebac 0303 	sub.w	r3, ip, r3
 8005bea:	0c12      	lsrs	r2, r2, #16
 8005bec:	fa13 f38e 	uxtah	r3, r3, lr
 8005bf0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005bf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bfe:	45c1      	cmp	r9, r8
 8005c00:	f840 3b04 	str.w	r3, [r0], #4
 8005c04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005c08:	d2e8      	bcs.n	8005bdc <quorem+0xb0>
 8005c0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c12:	b922      	cbnz	r2, 8005c1e <quorem+0xf2>
 8005c14:	3b04      	subs	r3, #4
 8005c16:	429d      	cmp	r5, r3
 8005c18:	461a      	mov	r2, r3
 8005c1a:	d30a      	bcc.n	8005c32 <quorem+0x106>
 8005c1c:	613c      	str	r4, [r7, #16]
 8005c1e:	4630      	mov	r0, r6
 8005c20:	b003      	add	sp, #12
 8005c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c26:	6812      	ldr	r2, [r2, #0]
 8005c28:	3b04      	subs	r3, #4
 8005c2a:	2a00      	cmp	r2, #0
 8005c2c:	d1cc      	bne.n	8005bc8 <quorem+0x9c>
 8005c2e:	3c01      	subs	r4, #1
 8005c30:	e7c7      	b.n	8005bc2 <quorem+0x96>
 8005c32:	6812      	ldr	r2, [r2, #0]
 8005c34:	3b04      	subs	r3, #4
 8005c36:	2a00      	cmp	r2, #0
 8005c38:	d1f0      	bne.n	8005c1c <quorem+0xf0>
 8005c3a:	3c01      	subs	r4, #1
 8005c3c:	e7eb      	b.n	8005c16 <quorem+0xea>
 8005c3e:	2000      	movs	r0, #0
 8005c40:	e7ee      	b.n	8005c20 <quorem+0xf4>
 8005c42:	0000      	movs	r0, r0
 8005c44:	0000      	movs	r0, r0
	...

08005c48 <_dtoa_r>:
 8005c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c4c:	ed2d 8b04 	vpush	{d8-d9}
 8005c50:	ec57 6b10 	vmov	r6, r7, d0
 8005c54:	b093      	sub	sp, #76	; 0x4c
 8005c56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005c58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005c5c:	9106      	str	r1, [sp, #24]
 8005c5e:	ee10 aa10 	vmov	sl, s0
 8005c62:	4604      	mov	r4, r0
 8005c64:	9209      	str	r2, [sp, #36]	; 0x24
 8005c66:	930c      	str	r3, [sp, #48]	; 0x30
 8005c68:	46bb      	mov	fp, r7
 8005c6a:	b975      	cbnz	r5, 8005c8a <_dtoa_r+0x42>
 8005c6c:	2010      	movs	r0, #16
 8005c6e:	f000 fed7 	bl	8006a20 <malloc>
 8005c72:	4602      	mov	r2, r0
 8005c74:	6260      	str	r0, [r4, #36]	; 0x24
 8005c76:	b920      	cbnz	r0, 8005c82 <_dtoa_r+0x3a>
 8005c78:	4ba7      	ldr	r3, [pc, #668]	; (8005f18 <_dtoa_r+0x2d0>)
 8005c7a:	21ea      	movs	r1, #234	; 0xea
 8005c7c:	48a7      	ldr	r0, [pc, #668]	; (8005f1c <_dtoa_r+0x2d4>)
 8005c7e:	f001 ff3b 	bl	8007af8 <__assert_func>
 8005c82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005c86:	6005      	str	r5, [r0, #0]
 8005c88:	60c5      	str	r5, [r0, #12]
 8005c8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c8c:	6819      	ldr	r1, [r3, #0]
 8005c8e:	b151      	cbz	r1, 8005ca6 <_dtoa_r+0x5e>
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	604a      	str	r2, [r1, #4]
 8005c94:	2301      	movs	r3, #1
 8005c96:	4093      	lsls	r3, r2
 8005c98:	608b      	str	r3, [r1, #8]
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	f000 ff16 	bl	8006acc <_Bfree>
 8005ca0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	1e3b      	subs	r3, r7, #0
 8005ca8:	bfaa      	itet	ge
 8005caa:	2300      	movge	r3, #0
 8005cac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005cb0:	f8c8 3000 	strge.w	r3, [r8]
 8005cb4:	4b9a      	ldr	r3, [pc, #616]	; (8005f20 <_dtoa_r+0x2d8>)
 8005cb6:	bfbc      	itt	lt
 8005cb8:	2201      	movlt	r2, #1
 8005cba:	f8c8 2000 	strlt.w	r2, [r8]
 8005cbe:	ea33 030b 	bics.w	r3, r3, fp
 8005cc2:	d11b      	bne.n	8005cfc <_dtoa_r+0xb4>
 8005cc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005cc6:	f242 730f 	movw	r3, #9999	; 0x270f
 8005cca:	6013      	str	r3, [r2, #0]
 8005ccc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005cd0:	4333      	orrs	r3, r6
 8005cd2:	f000 8592 	beq.w	80067fa <_dtoa_r+0xbb2>
 8005cd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cd8:	b963      	cbnz	r3, 8005cf4 <_dtoa_r+0xac>
 8005cda:	4b92      	ldr	r3, [pc, #584]	; (8005f24 <_dtoa_r+0x2dc>)
 8005cdc:	e022      	b.n	8005d24 <_dtoa_r+0xdc>
 8005cde:	4b92      	ldr	r3, [pc, #584]	; (8005f28 <_dtoa_r+0x2e0>)
 8005ce0:	9301      	str	r3, [sp, #4]
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	9801      	ldr	r0, [sp, #4]
 8005cea:	b013      	add	sp, #76	; 0x4c
 8005cec:	ecbd 8b04 	vpop	{d8-d9}
 8005cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf4:	4b8b      	ldr	r3, [pc, #556]	; (8005f24 <_dtoa_r+0x2dc>)
 8005cf6:	9301      	str	r3, [sp, #4]
 8005cf8:	3303      	adds	r3, #3
 8005cfa:	e7f3      	b.n	8005ce4 <_dtoa_r+0x9c>
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	2300      	movs	r3, #0
 8005d00:	4650      	mov	r0, sl
 8005d02:	4659      	mov	r1, fp
 8005d04:	f7fa fee8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d08:	ec4b ab19 	vmov	d9, sl, fp
 8005d0c:	4680      	mov	r8, r0
 8005d0e:	b158      	cbz	r0, 8005d28 <_dtoa_r+0xe0>
 8005d10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d12:	2301      	movs	r3, #1
 8005d14:	6013      	str	r3, [r2, #0]
 8005d16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 856b 	beq.w	80067f4 <_dtoa_r+0xbac>
 8005d1e:	4883      	ldr	r0, [pc, #524]	; (8005f2c <_dtoa_r+0x2e4>)
 8005d20:	6018      	str	r0, [r3, #0]
 8005d22:	1e43      	subs	r3, r0, #1
 8005d24:	9301      	str	r3, [sp, #4]
 8005d26:	e7df      	b.n	8005ce8 <_dtoa_r+0xa0>
 8005d28:	ec4b ab10 	vmov	d0, sl, fp
 8005d2c:	aa10      	add	r2, sp, #64	; 0x40
 8005d2e:	a911      	add	r1, sp, #68	; 0x44
 8005d30:	4620      	mov	r0, r4
 8005d32:	f001 f9b3 	bl	800709c <__d2b>
 8005d36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005d3a:	ee08 0a10 	vmov	s16, r0
 8005d3e:	2d00      	cmp	r5, #0
 8005d40:	f000 8084 	beq.w	8005e4c <_dtoa_r+0x204>
 8005d44:	ee19 3a90 	vmov	r3, s19
 8005d48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005d50:	4656      	mov	r6, sl
 8005d52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005d56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005d5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005d5e:	4b74      	ldr	r3, [pc, #464]	; (8005f30 <_dtoa_r+0x2e8>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	4630      	mov	r0, r6
 8005d64:	4639      	mov	r1, r7
 8005d66:	f7fa fa97 	bl	8000298 <__aeabi_dsub>
 8005d6a:	a365      	add	r3, pc, #404	; (adr r3, 8005f00 <_dtoa_r+0x2b8>)
 8005d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d70:	f7fa fc4a 	bl	8000608 <__aeabi_dmul>
 8005d74:	a364      	add	r3, pc, #400	; (adr r3, 8005f08 <_dtoa_r+0x2c0>)
 8005d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7a:	f7fa fa8f 	bl	800029c <__adddf3>
 8005d7e:	4606      	mov	r6, r0
 8005d80:	4628      	mov	r0, r5
 8005d82:	460f      	mov	r7, r1
 8005d84:	f7fa fbd6 	bl	8000534 <__aeabi_i2d>
 8005d88:	a361      	add	r3, pc, #388	; (adr r3, 8005f10 <_dtoa_r+0x2c8>)
 8005d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8e:	f7fa fc3b 	bl	8000608 <__aeabi_dmul>
 8005d92:	4602      	mov	r2, r0
 8005d94:	460b      	mov	r3, r1
 8005d96:	4630      	mov	r0, r6
 8005d98:	4639      	mov	r1, r7
 8005d9a:	f7fa fa7f 	bl	800029c <__adddf3>
 8005d9e:	4606      	mov	r6, r0
 8005da0:	460f      	mov	r7, r1
 8005da2:	f7fa fee1 	bl	8000b68 <__aeabi_d2iz>
 8005da6:	2200      	movs	r2, #0
 8005da8:	9000      	str	r0, [sp, #0]
 8005daa:	2300      	movs	r3, #0
 8005dac:	4630      	mov	r0, r6
 8005dae:	4639      	mov	r1, r7
 8005db0:	f7fa fe9c 	bl	8000aec <__aeabi_dcmplt>
 8005db4:	b150      	cbz	r0, 8005dcc <_dtoa_r+0x184>
 8005db6:	9800      	ldr	r0, [sp, #0]
 8005db8:	f7fa fbbc 	bl	8000534 <__aeabi_i2d>
 8005dbc:	4632      	mov	r2, r6
 8005dbe:	463b      	mov	r3, r7
 8005dc0:	f7fa fe8a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dc4:	b910      	cbnz	r0, 8005dcc <_dtoa_r+0x184>
 8005dc6:	9b00      	ldr	r3, [sp, #0]
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	9b00      	ldr	r3, [sp, #0]
 8005dce:	2b16      	cmp	r3, #22
 8005dd0:	d85a      	bhi.n	8005e88 <_dtoa_r+0x240>
 8005dd2:	9a00      	ldr	r2, [sp, #0]
 8005dd4:	4b57      	ldr	r3, [pc, #348]	; (8005f34 <_dtoa_r+0x2ec>)
 8005dd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dde:	ec51 0b19 	vmov	r0, r1, d9
 8005de2:	f7fa fe83 	bl	8000aec <__aeabi_dcmplt>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d050      	beq.n	8005e8c <_dtoa_r+0x244>
 8005dea:	9b00      	ldr	r3, [sp, #0]
 8005dec:	3b01      	subs	r3, #1
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	2300      	movs	r3, #0
 8005df2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005df4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005df6:	1b5d      	subs	r5, r3, r5
 8005df8:	1e6b      	subs	r3, r5, #1
 8005dfa:	9305      	str	r3, [sp, #20]
 8005dfc:	bf45      	ittet	mi
 8005dfe:	f1c5 0301 	rsbmi	r3, r5, #1
 8005e02:	9304      	strmi	r3, [sp, #16]
 8005e04:	2300      	movpl	r3, #0
 8005e06:	2300      	movmi	r3, #0
 8005e08:	bf4c      	ite	mi
 8005e0a:	9305      	strmi	r3, [sp, #20]
 8005e0c:	9304      	strpl	r3, [sp, #16]
 8005e0e:	9b00      	ldr	r3, [sp, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	db3d      	blt.n	8005e90 <_dtoa_r+0x248>
 8005e14:	9b05      	ldr	r3, [sp, #20]
 8005e16:	9a00      	ldr	r2, [sp, #0]
 8005e18:	920a      	str	r2, [sp, #40]	; 0x28
 8005e1a:	4413      	add	r3, r2
 8005e1c:	9305      	str	r3, [sp, #20]
 8005e1e:	2300      	movs	r3, #0
 8005e20:	9307      	str	r3, [sp, #28]
 8005e22:	9b06      	ldr	r3, [sp, #24]
 8005e24:	2b09      	cmp	r3, #9
 8005e26:	f200 8089 	bhi.w	8005f3c <_dtoa_r+0x2f4>
 8005e2a:	2b05      	cmp	r3, #5
 8005e2c:	bfc4      	itt	gt
 8005e2e:	3b04      	subgt	r3, #4
 8005e30:	9306      	strgt	r3, [sp, #24]
 8005e32:	9b06      	ldr	r3, [sp, #24]
 8005e34:	f1a3 0302 	sub.w	r3, r3, #2
 8005e38:	bfcc      	ite	gt
 8005e3a:	2500      	movgt	r5, #0
 8005e3c:	2501      	movle	r5, #1
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	f200 8087 	bhi.w	8005f52 <_dtoa_r+0x30a>
 8005e44:	e8df f003 	tbb	[pc, r3]
 8005e48:	59383a2d 	.word	0x59383a2d
 8005e4c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005e50:	441d      	add	r5, r3
 8005e52:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	bfc1      	itttt	gt
 8005e5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005e5e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005e62:	fa0b f303 	lslgt.w	r3, fp, r3
 8005e66:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005e6a:	bfda      	itte	le
 8005e6c:	f1c3 0320 	rsble	r3, r3, #32
 8005e70:	fa06 f003 	lslle.w	r0, r6, r3
 8005e74:	4318      	orrgt	r0, r3
 8005e76:	f7fa fb4d 	bl	8000514 <__aeabi_ui2d>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	4606      	mov	r6, r0
 8005e7e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005e82:	3d01      	subs	r5, #1
 8005e84:	930e      	str	r3, [sp, #56]	; 0x38
 8005e86:	e76a      	b.n	8005d5e <_dtoa_r+0x116>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e7b2      	b.n	8005df2 <_dtoa_r+0x1aa>
 8005e8c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005e8e:	e7b1      	b.n	8005df4 <_dtoa_r+0x1ac>
 8005e90:	9b04      	ldr	r3, [sp, #16]
 8005e92:	9a00      	ldr	r2, [sp, #0]
 8005e94:	1a9b      	subs	r3, r3, r2
 8005e96:	9304      	str	r3, [sp, #16]
 8005e98:	4253      	negs	r3, r2
 8005e9a:	9307      	str	r3, [sp, #28]
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	930a      	str	r3, [sp, #40]	; 0x28
 8005ea0:	e7bf      	b.n	8005e22 <_dtoa_r+0x1da>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	9308      	str	r3, [sp, #32]
 8005ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	dc55      	bgt.n	8005f58 <_dtoa_r+0x310>
 8005eac:	2301      	movs	r3, #1
 8005eae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	9209      	str	r2, [sp, #36]	; 0x24
 8005eb6:	e00c      	b.n	8005ed2 <_dtoa_r+0x28a>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e7f3      	b.n	8005ea4 <_dtoa_r+0x25c>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ec0:	9308      	str	r3, [sp, #32]
 8005ec2:	9b00      	ldr	r3, [sp, #0]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	9302      	str	r3, [sp, #8]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	9303      	str	r3, [sp, #12]
 8005ece:	bfb8      	it	lt
 8005ed0:	2301      	movlt	r3, #1
 8005ed2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	6042      	str	r2, [r0, #4]
 8005ed8:	2204      	movs	r2, #4
 8005eda:	f102 0614 	add.w	r6, r2, #20
 8005ede:	429e      	cmp	r6, r3
 8005ee0:	6841      	ldr	r1, [r0, #4]
 8005ee2:	d93d      	bls.n	8005f60 <_dtoa_r+0x318>
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f000 fdb1 	bl	8006a4c <_Balloc>
 8005eea:	9001      	str	r0, [sp, #4]
 8005eec:	2800      	cmp	r0, #0
 8005eee:	d13b      	bne.n	8005f68 <_dtoa_r+0x320>
 8005ef0:	4b11      	ldr	r3, [pc, #68]	; (8005f38 <_dtoa_r+0x2f0>)
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005ef8:	e6c0      	b.n	8005c7c <_dtoa_r+0x34>
 8005efa:	2301      	movs	r3, #1
 8005efc:	e7df      	b.n	8005ebe <_dtoa_r+0x276>
 8005efe:	bf00      	nop
 8005f00:	636f4361 	.word	0x636f4361
 8005f04:	3fd287a7 	.word	0x3fd287a7
 8005f08:	8b60c8b3 	.word	0x8b60c8b3
 8005f0c:	3fc68a28 	.word	0x3fc68a28
 8005f10:	509f79fb 	.word	0x509f79fb
 8005f14:	3fd34413 	.word	0x3fd34413
 8005f18:	08008105 	.word	0x08008105
 8005f1c:	0800811c 	.word	0x0800811c
 8005f20:	7ff00000 	.word	0x7ff00000
 8005f24:	08008101 	.word	0x08008101
 8005f28:	080080f8 	.word	0x080080f8
 8005f2c:	080080d5 	.word	0x080080d5
 8005f30:	3ff80000 	.word	0x3ff80000
 8005f34:	08008270 	.word	0x08008270
 8005f38:	08008177 	.word	0x08008177
 8005f3c:	2501      	movs	r5, #1
 8005f3e:	2300      	movs	r3, #0
 8005f40:	9306      	str	r3, [sp, #24]
 8005f42:	9508      	str	r5, [sp, #32]
 8005f44:	f04f 33ff 	mov.w	r3, #4294967295
 8005f48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	2312      	movs	r3, #18
 8005f50:	e7b0      	b.n	8005eb4 <_dtoa_r+0x26c>
 8005f52:	2301      	movs	r3, #1
 8005f54:	9308      	str	r3, [sp, #32]
 8005f56:	e7f5      	b.n	8005f44 <_dtoa_r+0x2fc>
 8005f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005f5e:	e7b8      	b.n	8005ed2 <_dtoa_r+0x28a>
 8005f60:	3101      	adds	r1, #1
 8005f62:	6041      	str	r1, [r0, #4]
 8005f64:	0052      	lsls	r2, r2, #1
 8005f66:	e7b8      	b.n	8005eda <_dtoa_r+0x292>
 8005f68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f6a:	9a01      	ldr	r2, [sp, #4]
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	9b03      	ldr	r3, [sp, #12]
 8005f70:	2b0e      	cmp	r3, #14
 8005f72:	f200 809d 	bhi.w	80060b0 <_dtoa_r+0x468>
 8005f76:	2d00      	cmp	r5, #0
 8005f78:	f000 809a 	beq.w	80060b0 <_dtoa_r+0x468>
 8005f7c:	9b00      	ldr	r3, [sp, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	dd32      	ble.n	8005fe8 <_dtoa_r+0x3a0>
 8005f82:	4ab7      	ldr	r2, [pc, #732]	; (8006260 <_dtoa_r+0x618>)
 8005f84:	f003 030f 	and.w	r3, r3, #15
 8005f88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005f8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f90:	9b00      	ldr	r3, [sp, #0]
 8005f92:	05d8      	lsls	r0, r3, #23
 8005f94:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005f98:	d516      	bpl.n	8005fc8 <_dtoa_r+0x380>
 8005f9a:	4bb2      	ldr	r3, [pc, #712]	; (8006264 <_dtoa_r+0x61c>)
 8005f9c:	ec51 0b19 	vmov	r0, r1, d9
 8005fa0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005fa4:	f7fa fc5a 	bl	800085c <__aeabi_ddiv>
 8005fa8:	f007 070f 	and.w	r7, r7, #15
 8005fac:	4682      	mov	sl, r0
 8005fae:	468b      	mov	fp, r1
 8005fb0:	2503      	movs	r5, #3
 8005fb2:	4eac      	ldr	r6, [pc, #688]	; (8006264 <_dtoa_r+0x61c>)
 8005fb4:	b957      	cbnz	r7, 8005fcc <_dtoa_r+0x384>
 8005fb6:	4642      	mov	r2, r8
 8005fb8:	464b      	mov	r3, r9
 8005fba:	4650      	mov	r0, sl
 8005fbc:	4659      	mov	r1, fp
 8005fbe:	f7fa fc4d 	bl	800085c <__aeabi_ddiv>
 8005fc2:	4682      	mov	sl, r0
 8005fc4:	468b      	mov	fp, r1
 8005fc6:	e028      	b.n	800601a <_dtoa_r+0x3d2>
 8005fc8:	2502      	movs	r5, #2
 8005fca:	e7f2      	b.n	8005fb2 <_dtoa_r+0x36a>
 8005fcc:	07f9      	lsls	r1, r7, #31
 8005fce:	d508      	bpl.n	8005fe2 <_dtoa_r+0x39a>
 8005fd0:	4640      	mov	r0, r8
 8005fd2:	4649      	mov	r1, r9
 8005fd4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005fd8:	f7fa fb16 	bl	8000608 <__aeabi_dmul>
 8005fdc:	3501      	adds	r5, #1
 8005fde:	4680      	mov	r8, r0
 8005fe0:	4689      	mov	r9, r1
 8005fe2:	107f      	asrs	r7, r7, #1
 8005fe4:	3608      	adds	r6, #8
 8005fe6:	e7e5      	b.n	8005fb4 <_dtoa_r+0x36c>
 8005fe8:	f000 809b 	beq.w	8006122 <_dtoa_r+0x4da>
 8005fec:	9b00      	ldr	r3, [sp, #0]
 8005fee:	4f9d      	ldr	r7, [pc, #628]	; (8006264 <_dtoa_r+0x61c>)
 8005ff0:	425e      	negs	r6, r3
 8005ff2:	4b9b      	ldr	r3, [pc, #620]	; (8006260 <_dtoa_r+0x618>)
 8005ff4:	f006 020f 	and.w	r2, r6, #15
 8005ff8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006000:	ec51 0b19 	vmov	r0, r1, d9
 8006004:	f7fa fb00 	bl	8000608 <__aeabi_dmul>
 8006008:	1136      	asrs	r6, r6, #4
 800600a:	4682      	mov	sl, r0
 800600c:	468b      	mov	fp, r1
 800600e:	2300      	movs	r3, #0
 8006010:	2502      	movs	r5, #2
 8006012:	2e00      	cmp	r6, #0
 8006014:	d17a      	bne.n	800610c <_dtoa_r+0x4c4>
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1d3      	bne.n	8005fc2 <_dtoa_r+0x37a>
 800601a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 8082 	beq.w	8006126 <_dtoa_r+0x4de>
 8006022:	4b91      	ldr	r3, [pc, #580]	; (8006268 <_dtoa_r+0x620>)
 8006024:	2200      	movs	r2, #0
 8006026:	4650      	mov	r0, sl
 8006028:	4659      	mov	r1, fp
 800602a:	f7fa fd5f 	bl	8000aec <__aeabi_dcmplt>
 800602e:	2800      	cmp	r0, #0
 8006030:	d079      	beq.n	8006126 <_dtoa_r+0x4de>
 8006032:	9b03      	ldr	r3, [sp, #12]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d076      	beq.n	8006126 <_dtoa_r+0x4de>
 8006038:	9b02      	ldr	r3, [sp, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	dd36      	ble.n	80060ac <_dtoa_r+0x464>
 800603e:	9b00      	ldr	r3, [sp, #0]
 8006040:	4650      	mov	r0, sl
 8006042:	4659      	mov	r1, fp
 8006044:	1e5f      	subs	r7, r3, #1
 8006046:	2200      	movs	r2, #0
 8006048:	4b88      	ldr	r3, [pc, #544]	; (800626c <_dtoa_r+0x624>)
 800604a:	f7fa fadd 	bl	8000608 <__aeabi_dmul>
 800604e:	9e02      	ldr	r6, [sp, #8]
 8006050:	4682      	mov	sl, r0
 8006052:	468b      	mov	fp, r1
 8006054:	3501      	adds	r5, #1
 8006056:	4628      	mov	r0, r5
 8006058:	f7fa fa6c 	bl	8000534 <__aeabi_i2d>
 800605c:	4652      	mov	r2, sl
 800605e:	465b      	mov	r3, fp
 8006060:	f7fa fad2 	bl	8000608 <__aeabi_dmul>
 8006064:	4b82      	ldr	r3, [pc, #520]	; (8006270 <_dtoa_r+0x628>)
 8006066:	2200      	movs	r2, #0
 8006068:	f7fa f918 	bl	800029c <__adddf3>
 800606c:	46d0      	mov	r8, sl
 800606e:	46d9      	mov	r9, fp
 8006070:	4682      	mov	sl, r0
 8006072:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006076:	2e00      	cmp	r6, #0
 8006078:	d158      	bne.n	800612c <_dtoa_r+0x4e4>
 800607a:	4b7e      	ldr	r3, [pc, #504]	; (8006274 <_dtoa_r+0x62c>)
 800607c:	2200      	movs	r2, #0
 800607e:	4640      	mov	r0, r8
 8006080:	4649      	mov	r1, r9
 8006082:	f7fa f909 	bl	8000298 <__aeabi_dsub>
 8006086:	4652      	mov	r2, sl
 8006088:	465b      	mov	r3, fp
 800608a:	4680      	mov	r8, r0
 800608c:	4689      	mov	r9, r1
 800608e:	f7fa fd4b 	bl	8000b28 <__aeabi_dcmpgt>
 8006092:	2800      	cmp	r0, #0
 8006094:	f040 8295 	bne.w	80065c2 <_dtoa_r+0x97a>
 8006098:	4652      	mov	r2, sl
 800609a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800609e:	4640      	mov	r0, r8
 80060a0:	4649      	mov	r1, r9
 80060a2:	f7fa fd23 	bl	8000aec <__aeabi_dcmplt>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	f040 8289 	bne.w	80065be <_dtoa_r+0x976>
 80060ac:	ec5b ab19 	vmov	sl, fp, d9
 80060b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f2c0 8148 	blt.w	8006348 <_dtoa_r+0x700>
 80060b8:	9a00      	ldr	r2, [sp, #0]
 80060ba:	2a0e      	cmp	r2, #14
 80060bc:	f300 8144 	bgt.w	8006348 <_dtoa_r+0x700>
 80060c0:	4b67      	ldr	r3, [pc, #412]	; (8006260 <_dtoa_r+0x618>)
 80060c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f280 80d5 	bge.w	800627c <_dtoa_r+0x634>
 80060d2:	9b03      	ldr	r3, [sp, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f300 80d1 	bgt.w	800627c <_dtoa_r+0x634>
 80060da:	f040 826f 	bne.w	80065bc <_dtoa_r+0x974>
 80060de:	4b65      	ldr	r3, [pc, #404]	; (8006274 <_dtoa_r+0x62c>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	4640      	mov	r0, r8
 80060e4:	4649      	mov	r1, r9
 80060e6:	f7fa fa8f 	bl	8000608 <__aeabi_dmul>
 80060ea:	4652      	mov	r2, sl
 80060ec:	465b      	mov	r3, fp
 80060ee:	f7fa fd11 	bl	8000b14 <__aeabi_dcmpge>
 80060f2:	9e03      	ldr	r6, [sp, #12]
 80060f4:	4637      	mov	r7, r6
 80060f6:	2800      	cmp	r0, #0
 80060f8:	f040 8245 	bne.w	8006586 <_dtoa_r+0x93e>
 80060fc:	9d01      	ldr	r5, [sp, #4]
 80060fe:	2331      	movs	r3, #49	; 0x31
 8006100:	f805 3b01 	strb.w	r3, [r5], #1
 8006104:	9b00      	ldr	r3, [sp, #0]
 8006106:	3301      	adds	r3, #1
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	e240      	b.n	800658e <_dtoa_r+0x946>
 800610c:	07f2      	lsls	r2, r6, #31
 800610e:	d505      	bpl.n	800611c <_dtoa_r+0x4d4>
 8006110:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006114:	f7fa fa78 	bl	8000608 <__aeabi_dmul>
 8006118:	3501      	adds	r5, #1
 800611a:	2301      	movs	r3, #1
 800611c:	1076      	asrs	r6, r6, #1
 800611e:	3708      	adds	r7, #8
 8006120:	e777      	b.n	8006012 <_dtoa_r+0x3ca>
 8006122:	2502      	movs	r5, #2
 8006124:	e779      	b.n	800601a <_dtoa_r+0x3d2>
 8006126:	9f00      	ldr	r7, [sp, #0]
 8006128:	9e03      	ldr	r6, [sp, #12]
 800612a:	e794      	b.n	8006056 <_dtoa_r+0x40e>
 800612c:	9901      	ldr	r1, [sp, #4]
 800612e:	4b4c      	ldr	r3, [pc, #304]	; (8006260 <_dtoa_r+0x618>)
 8006130:	4431      	add	r1, r6
 8006132:	910d      	str	r1, [sp, #52]	; 0x34
 8006134:	9908      	ldr	r1, [sp, #32]
 8006136:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800613a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800613e:	2900      	cmp	r1, #0
 8006140:	d043      	beq.n	80061ca <_dtoa_r+0x582>
 8006142:	494d      	ldr	r1, [pc, #308]	; (8006278 <_dtoa_r+0x630>)
 8006144:	2000      	movs	r0, #0
 8006146:	f7fa fb89 	bl	800085c <__aeabi_ddiv>
 800614a:	4652      	mov	r2, sl
 800614c:	465b      	mov	r3, fp
 800614e:	f7fa f8a3 	bl	8000298 <__aeabi_dsub>
 8006152:	9d01      	ldr	r5, [sp, #4]
 8006154:	4682      	mov	sl, r0
 8006156:	468b      	mov	fp, r1
 8006158:	4649      	mov	r1, r9
 800615a:	4640      	mov	r0, r8
 800615c:	f7fa fd04 	bl	8000b68 <__aeabi_d2iz>
 8006160:	4606      	mov	r6, r0
 8006162:	f7fa f9e7 	bl	8000534 <__aeabi_i2d>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	4640      	mov	r0, r8
 800616c:	4649      	mov	r1, r9
 800616e:	f7fa f893 	bl	8000298 <__aeabi_dsub>
 8006172:	3630      	adds	r6, #48	; 0x30
 8006174:	f805 6b01 	strb.w	r6, [r5], #1
 8006178:	4652      	mov	r2, sl
 800617a:	465b      	mov	r3, fp
 800617c:	4680      	mov	r8, r0
 800617e:	4689      	mov	r9, r1
 8006180:	f7fa fcb4 	bl	8000aec <__aeabi_dcmplt>
 8006184:	2800      	cmp	r0, #0
 8006186:	d163      	bne.n	8006250 <_dtoa_r+0x608>
 8006188:	4642      	mov	r2, r8
 800618a:	464b      	mov	r3, r9
 800618c:	4936      	ldr	r1, [pc, #216]	; (8006268 <_dtoa_r+0x620>)
 800618e:	2000      	movs	r0, #0
 8006190:	f7fa f882 	bl	8000298 <__aeabi_dsub>
 8006194:	4652      	mov	r2, sl
 8006196:	465b      	mov	r3, fp
 8006198:	f7fa fca8 	bl	8000aec <__aeabi_dcmplt>
 800619c:	2800      	cmp	r0, #0
 800619e:	f040 80b5 	bne.w	800630c <_dtoa_r+0x6c4>
 80061a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061a4:	429d      	cmp	r5, r3
 80061a6:	d081      	beq.n	80060ac <_dtoa_r+0x464>
 80061a8:	4b30      	ldr	r3, [pc, #192]	; (800626c <_dtoa_r+0x624>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	4650      	mov	r0, sl
 80061ae:	4659      	mov	r1, fp
 80061b0:	f7fa fa2a 	bl	8000608 <__aeabi_dmul>
 80061b4:	4b2d      	ldr	r3, [pc, #180]	; (800626c <_dtoa_r+0x624>)
 80061b6:	4682      	mov	sl, r0
 80061b8:	468b      	mov	fp, r1
 80061ba:	4640      	mov	r0, r8
 80061bc:	4649      	mov	r1, r9
 80061be:	2200      	movs	r2, #0
 80061c0:	f7fa fa22 	bl	8000608 <__aeabi_dmul>
 80061c4:	4680      	mov	r8, r0
 80061c6:	4689      	mov	r9, r1
 80061c8:	e7c6      	b.n	8006158 <_dtoa_r+0x510>
 80061ca:	4650      	mov	r0, sl
 80061cc:	4659      	mov	r1, fp
 80061ce:	f7fa fa1b 	bl	8000608 <__aeabi_dmul>
 80061d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061d4:	9d01      	ldr	r5, [sp, #4]
 80061d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80061d8:	4682      	mov	sl, r0
 80061da:	468b      	mov	fp, r1
 80061dc:	4649      	mov	r1, r9
 80061de:	4640      	mov	r0, r8
 80061e0:	f7fa fcc2 	bl	8000b68 <__aeabi_d2iz>
 80061e4:	4606      	mov	r6, r0
 80061e6:	f7fa f9a5 	bl	8000534 <__aeabi_i2d>
 80061ea:	3630      	adds	r6, #48	; 0x30
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	4640      	mov	r0, r8
 80061f2:	4649      	mov	r1, r9
 80061f4:	f7fa f850 	bl	8000298 <__aeabi_dsub>
 80061f8:	f805 6b01 	strb.w	r6, [r5], #1
 80061fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061fe:	429d      	cmp	r5, r3
 8006200:	4680      	mov	r8, r0
 8006202:	4689      	mov	r9, r1
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	d124      	bne.n	8006254 <_dtoa_r+0x60c>
 800620a:	4b1b      	ldr	r3, [pc, #108]	; (8006278 <_dtoa_r+0x630>)
 800620c:	4650      	mov	r0, sl
 800620e:	4659      	mov	r1, fp
 8006210:	f7fa f844 	bl	800029c <__adddf3>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	4640      	mov	r0, r8
 800621a:	4649      	mov	r1, r9
 800621c:	f7fa fc84 	bl	8000b28 <__aeabi_dcmpgt>
 8006220:	2800      	cmp	r0, #0
 8006222:	d173      	bne.n	800630c <_dtoa_r+0x6c4>
 8006224:	4652      	mov	r2, sl
 8006226:	465b      	mov	r3, fp
 8006228:	4913      	ldr	r1, [pc, #76]	; (8006278 <_dtoa_r+0x630>)
 800622a:	2000      	movs	r0, #0
 800622c:	f7fa f834 	bl	8000298 <__aeabi_dsub>
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	4640      	mov	r0, r8
 8006236:	4649      	mov	r1, r9
 8006238:	f7fa fc58 	bl	8000aec <__aeabi_dcmplt>
 800623c:	2800      	cmp	r0, #0
 800623e:	f43f af35 	beq.w	80060ac <_dtoa_r+0x464>
 8006242:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006244:	1e6b      	subs	r3, r5, #1
 8006246:	930f      	str	r3, [sp, #60]	; 0x3c
 8006248:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800624c:	2b30      	cmp	r3, #48	; 0x30
 800624e:	d0f8      	beq.n	8006242 <_dtoa_r+0x5fa>
 8006250:	9700      	str	r7, [sp, #0]
 8006252:	e049      	b.n	80062e8 <_dtoa_r+0x6a0>
 8006254:	4b05      	ldr	r3, [pc, #20]	; (800626c <_dtoa_r+0x624>)
 8006256:	f7fa f9d7 	bl	8000608 <__aeabi_dmul>
 800625a:	4680      	mov	r8, r0
 800625c:	4689      	mov	r9, r1
 800625e:	e7bd      	b.n	80061dc <_dtoa_r+0x594>
 8006260:	08008270 	.word	0x08008270
 8006264:	08008248 	.word	0x08008248
 8006268:	3ff00000 	.word	0x3ff00000
 800626c:	40240000 	.word	0x40240000
 8006270:	401c0000 	.word	0x401c0000
 8006274:	40140000 	.word	0x40140000
 8006278:	3fe00000 	.word	0x3fe00000
 800627c:	9d01      	ldr	r5, [sp, #4]
 800627e:	4656      	mov	r6, sl
 8006280:	465f      	mov	r7, fp
 8006282:	4642      	mov	r2, r8
 8006284:	464b      	mov	r3, r9
 8006286:	4630      	mov	r0, r6
 8006288:	4639      	mov	r1, r7
 800628a:	f7fa fae7 	bl	800085c <__aeabi_ddiv>
 800628e:	f7fa fc6b 	bl	8000b68 <__aeabi_d2iz>
 8006292:	4682      	mov	sl, r0
 8006294:	f7fa f94e 	bl	8000534 <__aeabi_i2d>
 8006298:	4642      	mov	r2, r8
 800629a:	464b      	mov	r3, r9
 800629c:	f7fa f9b4 	bl	8000608 <__aeabi_dmul>
 80062a0:	4602      	mov	r2, r0
 80062a2:	460b      	mov	r3, r1
 80062a4:	4630      	mov	r0, r6
 80062a6:	4639      	mov	r1, r7
 80062a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80062ac:	f7f9 fff4 	bl	8000298 <__aeabi_dsub>
 80062b0:	f805 6b01 	strb.w	r6, [r5], #1
 80062b4:	9e01      	ldr	r6, [sp, #4]
 80062b6:	9f03      	ldr	r7, [sp, #12]
 80062b8:	1bae      	subs	r6, r5, r6
 80062ba:	42b7      	cmp	r7, r6
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	d135      	bne.n	800632e <_dtoa_r+0x6e6>
 80062c2:	f7f9 ffeb 	bl	800029c <__adddf3>
 80062c6:	4642      	mov	r2, r8
 80062c8:	464b      	mov	r3, r9
 80062ca:	4606      	mov	r6, r0
 80062cc:	460f      	mov	r7, r1
 80062ce:	f7fa fc2b 	bl	8000b28 <__aeabi_dcmpgt>
 80062d2:	b9d0      	cbnz	r0, 800630a <_dtoa_r+0x6c2>
 80062d4:	4642      	mov	r2, r8
 80062d6:	464b      	mov	r3, r9
 80062d8:	4630      	mov	r0, r6
 80062da:	4639      	mov	r1, r7
 80062dc:	f7fa fbfc 	bl	8000ad8 <__aeabi_dcmpeq>
 80062e0:	b110      	cbz	r0, 80062e8 <_dtoa_r+0x6a0>
 80062e2:	f01a 0f01 	tst.w	sl, #1
 80062e6:	d110      	bne.n	800630a <_dtoa_r+0x6c2>
 80062e8:	4620      	mov	r0, r4
 80062ea:	ee18 1a10 	vmov	r1, s16
 80062ee:	f000 fbed 	bl	8006acc <_Bfree>
 80062f2:	2300      	movs	r3, #0
 80062f4:	9800      	ldr	r0, [sp, #0]
 80062f6:	702b      	strb	r3, [r5, #0]
 80062f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062fa:	3001      	adds	r0, #1
 80062fc:	6018      	str	r0, [r3, #0]
 80062fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006300:	2b00      	cmp	r3, #0
 8006302:	f43f acf1 	beq.w	8005ce8 <_dtoa_r+0xa0>
 8006306:	601d      	str	r5, [r3, #0]
 8006308:	e4ee      	b.n	8005ce8 <_dtoa_r+0xa0>
 800630a:	9f00      	ldr	r7, [sp, #0]
 800630c:	462b      	mov	r3, r5
 800630e:	461d      	mov	r5, r3
 8006310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006314:	2a39      	cmp	r2, #57	; 0x39
 8006316:	d106      	bne.n	8006326 <_dtoa_r+0x6de>
 8006318:	9a01      	ldr	r2, [sp, #4]
 800631a:	429a      	cmp	r2, r3
 800631c:	d1f7      	bne.n	800630e <_dtoa_r+0x6c6>
 800631e:	9901      	ldr	r1, [sp, #4]
 8006320:	2230      	movs	r2, #48	; 0x30
 8006322:	3701      	adds	r7, #1
 8006324:	700a      	strb	r2, [r1, #0]
 8006326:	781a      	ldrb	r2, [r3, #0]
 8006328:	3201      	adds	r2, #1
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	e790      	b.n	8006250 <_dtoa_r+0x608>
 800632e:	4ba6      	ldr	r3, [pc, #664]	; (80065c8 <_dtoa_r+0x980>)
 8006330:	2200      	movs	r2, #0
 8006332:	f7fa f969 	bl	8000608 <__aeabi_dmul>
 8006336:	2200      	movs	r2, #0
 8006338:	2300      	movs	r3, #0
 800633a:	4606      	mov	r6, r0
 800633c:	460f      	mov	r7, r1
 800633e:	f7fa fbcb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006342:	2800      	cmp	r0, #0
 8006344:	d09d      	beq.n	8006282 <_dtoa_r+0x63a>
 8006346:	e7cf      	b.n	80062e8 <_dtoa_r+0x6a0>
 8006348:	9a08      	ldr	r2, [sp, #32]
 800634a:	2a00      	cmp	r2, #0
 800634c:	f000 80d7 	beq.w	80064fe <_dtoa_r+0x8b6>
 8006350:	9a06      	ldr	r2, [sp, #24]
 8006352:	2a01      	cmp	r2, #1
 8006354:	f300 80ba 	bgt.w	80064cc <_dtoa_r+0x884>
 8006358:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800635a:	2a00      	cmp	r2, #0
 800635c:	f000 80b2 	beq.w	80064c4 <_dtoa_r+0x87c>
 8006360:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006364:	9e07      	ldr	r6, [sp, #28]
 8006366:	9d04      	ldr	r5, [sp, #16]
 8006368:	9a04      	ldr	r2, [sp, #16]
 800636a:	441a      	add	r2, r3
 800636c:	9204      	str	r2, [sp, #16]
 800636e:	9a05      	ldr	r2, [sp, #20]
 8006370:	2101      	movs	r1, #1
 8006372:	441a      	add	r2, r3
 8006374:	4620      	mov	r0, r4
 8006376:	9205      	str	r2, [sp, #20]
 8006378:	f000 fc60 	bl	8006c3c <__i2b>
 800637c:	4607      	mov	r7, r0
 800637e:	2d00      	cmp	r5, #0
 8006380:	dd0c      	ble.n	800639c <_dtoa_r+0x754>
 8006382:	9b05      	ldr	r3, [sp, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	dd09      	ble.n	800639c <_dtoa_r+0x754>
 8006388:	42ab      	cmp	r3, r5
 800638a:	9a04      	ldr	r2, [sp, #16]
 800638c:	bfa8      	it	ge
 800638e:	462b      	movge	r3, r5
 8006390:	1ad2      	subs	r2, r2, r3
 8006392:	9204      	str	r2, [sp, #16]
 8006394:	9a05      	ldr	r2, [sp, #20]
 8006396:	1aed      	subs	r5, r5, r3
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	9305      	str	r3, [sp, #20]
 800639c:	9b07      	ldr	r3, [sp, #28]
 800639e:	b31b      	cbz	r3, 80063e8 <_dtoa_r+0x7a0>
 80063a0:	9b08      	ldr	r3, [sp, #32]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f000 80af 	beq.w	8006506 <_dtoa_r+0x8be>
 80063a8:	2e00      	cmp	r6, #0
 80063aa:	dd13      	ble.n	80063d4 <_dtoa_r+0x78c>
 80063ac:	4639      	mov	r1, r7
 80063ae:	4632      	mov	r2, r6
 80063b0:	4620      	mov	r0, r4
 80063b2:	f000 fd03 	bl	8006dbc <__pow5mult>
 80063b6:	ee18 2a10 	vmov	r2, s16
 80063ba:	4601      	mov	r1, r0
 80063bc:	4607      	mov	r7, r0
 80063be:	4620      	mov	r0, r4
 80063c0:	f000 fc52 	bl	8006c68 <__multiply>
 80063c4:	ee18 1a10 	vmov	r1, s16
 80063c8:	4680      	mov	r8, r0
 80063ca:	4620      	mov	r0, r4
 80063cc:	f000 fb7e 	bl	8006acc <_Bfree>
 80063d0:	ee08 8a10 	vmov	s16, r8
 80063d4:	9b07      	ldr	r3, [sp, #28]
 80063d6:	1b9a      	subs	r2, r3, r6
 80063d8:	d006      	beq.n	80063e8 <_dtoa_r+0x7a0>
 80063da:	ee18 1a10 	vmov	r1, s16
 80063de:	4620      	mov	r0, r4
 80063e0:	f000 fcec 	bl	8006dbc <__pow5mult>
 80063e4:	ee08 0a10 	vmov	s16, r0
 80063e8:	2101      	movs	r1, #1
 80063ea:	4620      	mov	r0, r4
 80063ec:	f000 fc26 	bl	8006c3c <__i2b>
 80063f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	4606      	mov	r6, r0
 80063f6:	f340 8088 	ble.w	800650a <_dtoa_r+0x8c2>
 80063fa:	461a      	mov	r2, r3
 80063fc:	4601      	mov	r1, r0
 80063fe:	4620      	mov	r0, r4
 8006400:	f000 fcdc 	bl	8006dbc <__pow5mult>
 8006404:	9b06      	ldr	r3, [sp, #24]
 8006406:	2b01      	cmp	r3, #1
 8006408:	4606      	mov	r6, r0
 800640a:	f340 8081 	ble.w	8006510 <_dtoa_r+0x8c8>
 800640e:	f04f 0800 	mov.w	r8, #0
 8006412:	6933      	ldr	r3, [r6, #16]
 8006414:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006418:	6918      	ldr	r0, [r3, #16]
 800641a:	f000 fbbf 	bl	8006b9c <__hi0bits>
 800641e:	f1c0 0020 	rsb	r0, r0, #32
 8006422:	9b05      	ldr	r3, [sp, #20]
 8006424:	4418      	add	r0, r3
 8006426:	f010 001f 	ands.w	r0, r0, #31
 800642a:	f000 8092 	beq.w	8006552 <_dtoa_r+0x90a>
 800642e:	f1c0 0320 	rsb	r3, r0, #32
 8006432:	2b04      	cmp	r3, #4
 8006434:	f340 808a 	ble.w	800654c <_dtoa_r+0x904>
 8006438:	f1c0 001c 	rsb	r0, r0, #28
 800643c:	9b04      	ldr	r3, [sp, #16]
 800643e:	4403      	add	r3, r0
 8006440:	9304      	str	r3, [sp, #16]
 8006442:	9b05      	ldr	r3, [sp, #20]
 8006444:	4403      	add	r3, r0
 8006446:	4405      	add	r5, r0
 8006448:	9305      	str	r3, [sp, #20]
 800644a:	9b04      	ldr	r3, [sp, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	dd07      	ble.n	8006460 <_dtoa_r+0x818>
 8006450:	ee18 1a10 	vmov	r1, s16
 8006454:	461a      	mov	r2, r3
 8006456:	4620      	mov	r0, r4
 8006458:	f000 fd0a 	bl	8006e70 <__lshift>
 800645c:	ee08 0a10 	vmov	s16, r0
 8006460:	9b05      	ldr	r3, [sp, #20]
 8006462:	2b00      	cmp	r3, #0
 8006464:	dd05      	ble.n	8006472 <_dtoa_r+0x82a>
 8006466:	4631      	mov	r1, r6
 8006468:	461a      	mov	r2, r3
 800646a:	4620      	mov	r0, r4
 800646c:	f000 fd00 	bl	8006e70 <__lshift>
 8006470:	4606      	mov	r6, r0
 8006472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006474:	2b00      	cmp	r3, #0
 8006476:	d06e      	beq.n	8006556 <_dtoa_r+0x90e>
 8006478:	ee18 0a10 	vmov	r0, s16
 800647c:	4631      	mov	r1, r6
 800647e:	f000 fd67 	bl	8006f50 <__mcmp>
 8006482:	2800      	cmp	r0, #0
 8006484:	da67      	bge.n	8006556 <_dtoa_r+0x90e>
 8006486:	9b00      	ldr	r3, [sp, #0]
 8006488:	3b01      	subs	r3, #1
 800648a:	ee18 1a10 	vmov	r1, s16
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	220a      	movs	r2, #10
 8006492:	2300      	movs	r3, #0
 8006494:	4620      	mov	r0, r4
 8006496:	f000 fb3b 	bl	8006b10 <__multadd>
 800649a:	9b08      	ldr	r3, [sp, #32]
 800649c:	ee08 0a10 	vmov	s16, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 81b1 	beq.w	8006808 <_dtoa_r+0xbc0>
 80064a6:	2300      	movs	r3, #0
 80064a8:	4639      	mov	r1, r7
 80064aa:	220a      	movs	r2, #10
 80064ac:	4620      	mov	r0, r4
 80064ae:	f000 fb2f 	bl	8006b10 <__multadd>
 80064b2:	9b02      	ldr	r3, [sp, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	4607      	mov	r7, r0
 80064b8:	f300 808e 	bgt.w	80065d8 <_dtoa_r+0x990>
 80064bc:	9b06      	ldr	r3, [sp, #24]
 80064be:	2b02      	cmp	r3, #2
 80064c0:	dc51      	bgt.n	8006566 <_dtoa_r+0x91e>
 80064c2:	e089      	b.n	80065d8 <_dtoa_r+0x990>
 80064c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80064ca:	e74b      	b.n	8006364 <_dtoa_r+0x71c>
 80064cc:	9b03      	ldr	r3, [sp, #12]
 80064ce:	1e5e      	subs	r6, r3, #1
 80064d0:	9b07      	ldr	r3, [sp, #28]
 80064d2:	42b3      	cmp	r3, r6
 80064d4:	bfbf      	itttt	lt
 80064d6:	9b07      	ldrlt	r3, [sp, #28]
 80064d8:	9607      	strlt	r6, [sp, #28]
 80064da:	1af2      	sublt	r2, r6, r3
 80064dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80064de:	bfb6      	itet	lt
 80064e0:	189b      	addlt	r3, r3, r2
 80064e2:	1b9e      	subge	r6, r3, r6
 80064e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80064e6:	9b03      	ldr	r3, [sp, #12]
 80064e8:	bfb8      	it	lt
 80064ea:	2600      	movlt	r6, #0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	bfb7      	itett	lt
 80064f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80064f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80064f8:	1a9d      	sublt	r5, r3, r2
 80064fa:	2300      	movlt	r3, #0
 80064fc:	e734      	b.n	8006368 <_dtoa_r+0x720>
 80064fe:	9e07      	ldr	r6, [sp, #28]
 8006500:	9d04      	ldr	r5, [sp, #16]
 8006502:	9f08      	ldr	r7, [sp, #32]
 8006504:	e73b      	b.n	800637e <_dtoa_r+0x736>
 8006506:	9a07      	ldr	r2, [sp, #28]
 8006508:	e767      	b.n	80063da <_dtoa_r+0x792>
 800650a:	9b06      	ldr	r3, [sp, #24]
 800650c:	2b01      	cmp	r3, #1
 800650e:	dc18      	bgt.n	8006542 <_dtoa_r+0x8fa>
 8006510:	f1ba 0f00 	cmp.w	sl, #0
 8006514:	d115      	bne.n	8006542 <_dtoa_r+0x8fa>
 8006516:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800651a:	b993      	cbnz	r3, 8006542 <_dtoa_r+0x8fa>
 800651c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006520:	0d1b      	lsrs	r3, r3, #20
 8006522:	051b      	lsls	r3, r3, #20
 8006524:	b183      	cbz	r3, 8006548 <_dtoa_r+0x900>
 8006526:	9b04      	ldr	r3, [sp, #16]
 8006528:	3301      	adds	r3, #1
 800652a:	9304      	str	r3, [sp, #16]
 800652c:	9b05      	ldr	r3, [sp, #20]
 800652e:	3301      	adds	r3, #1
 8006530:	9305      	str	r3, [sp, #20]
 8006532:	f04f 0801 	mov.w	r8, #1
 8006536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006538:	2b00      	cmp	r3, #0
 800653a:	f47f af6a 	bne.w	8006412 <_dtoa_r+0x7ca>
 800653e:	2001      	movs	r0, #1
 8006540:	e76f      	b.n	8006422 <_dtoa_r+0x7da>
 8006542:	f04f 0800 	mov.w	r8, #0
 8006546:	e7f6      	b.n	8006536 <_dtoa_r+0x8ee>
 8006548:	4698      	mov	r8, r3
 800654a:	e7f4      	b.n	8006536 <_dtoa_r+0x8ee>
 800654c:	f43f af7d 	beq.w	800644a <_dtoa_r+0x802>
 8006550:	4618      	mov	r0, r3
 8006552:	301c      	adds	r0, #28
 8006554:	e772      	b.n	800643c <_dtoa_r+0x7f4>
 8006556:	9b03      	ldr	r3, [sp, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	dc37      	bgt.n	80065cc <_dtoa_r+0x984>
 800655c:	9b06      	ldr	r3, [sp, #24]
 800655e:	2b02      	cmp	r3, #2
 8006560:	dd34      	ble.n	80065cc <_dtoa_r+0x984>
 8006562:	9b03      	ldr	r3, [sp, #12]
 8006564:	9302      	str	r3, [sp, #8]
 8006566:	9b02      	ldr	r3, [sp, #8]
 8006568:	b96b      	cbnz	r3, 8006586 <_dtoa_r+0x93e>
 800656a:	4631      	mov	r1, r6
 800656c:	2205      	movs	r2, #5
 800656e:	4620      	mov	r0, r4
 8006570:	f000 face 	bl	8006b10 <__multadd>
 8006574:	4601      	mov	r1, r0
 8006576:	4606      	mov	r6, r0
 8006578:	ee18 0a10 	vmov	r0, s16
 800657c:	f000 fce8 	bl	8006f50 <__mcmp>
 8006580:	2800      	cmp	r0, #0
 8006582:	f73f adbb 	bgt.w	80060fc <_dtoa_r+0x4b4>
 8006586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006588:	9d01      	ldr	r5, [sp, #4]
 800658a:	43db      	mvns	r3, r3
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	f04f 0800 	mov.w	r8, #0
 8006592:	4631      	mov	r1, r6
 8006594:	4620      	mov	r0, r4
 8006596:	f000 fa99 	bl	8006acc <_Bfree>
 800659a:	2f00      	cmp	r7, #0
 800659c:	f43f aea4 	beq.w	80062e8 <_dtoa_r+0x6a0>
 80065a0:	f1b8 0f00 	cmp.w	r8, #0
 80065a4:	d005      	beq.n	80065b2 <_dtoa_r+0x96a>
 80065a6:	45b8      	cmp	r8, r7
 80065a8:	d003      	beq.n	80065b2 <_dtoa_r+0x96a>
 80065aa:	4641      	mov	r1, r8
 80065ac:	4620      	mov	r0, r4
 80065ae:	f000 fa8d 	bl	8006acc <_Bfree>
 80065b2:	4639      	mov	r1, r7
 80065b4:	4620      	mov	r0, r4
 80065b6:	f000 fa89 	bl	8006acc <_Bfree>
 80065ba:	e695      	b.n	80062e8 <_dtoa_r+0x6a0>
 80065bc:	2600      	movs	r6, #0
 80065be:	4637      	mov	r7, r6
 80065c0:	e7e1      	b.n	8006586 <_dtoa_r+0x93e>
 80065c2:	9700      	str	r7, [sp, #0]
 80065c4:	4637      	mov	r7, r6
 80065c6:	e599      	b.n	80060fc <_dtoa_r+0x4b4>
 80065c8:	40240000 	.word	0x40240000
 80065cc:	9b08      	ldr	r3, [sp, #32]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 80ca 	beq.w	8006768 <_dtoa_r+0xb20>
 80065d4:	9b03      	ldr	r3, [sp, #12]
 80065d6:	9302      	str	r3, [sp, #8]
 80065d8:	2d00      	cmp	r5, #0
 80065da:	dd05      	ble.n	80065e8 <_dtoa_r+0x9a0>
 80065dc:	4639      	mov	r1, r7
 80065de:	462a      	mov	r2, r5
 80065e0:	4620      	mov	r0, r4
 80065e2:	f000 fc45 	bl	8006e70 <__lshift>
 80065e6:	4607      	mov	r7, r0
 80065e8:	f1b8 0f00 	cmp.w	r8, #0
 80065ec:	d05b      	beq.n	80066a6 <_dtoa_r+0xa5e>
 80065ee:	6879      	ldr	r1, [r7, #4]
 80065f0:	4620      	mov	r0, r4
 80065f2:	f000 fa2b 	bl	8006a4c <_Balloc>
 80065f6:	4605      	mov	r5, r0
 80065f8:	b928      	cbnz	r0, 8006606 <_dtoa_r+0x9be>
 80065fa:	4b87      	ldr	r3, [pc, #540]	; (8006818 <_dtoa_r+0xbd0>)
 80065fc:	4602      	mov	r2, r0
 80065fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006602:	f7ff bb3b 	b.w	8005c7c <_dtoa_r+0x34>
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	3202      	adds	r2, #2
 800660a:	0092      	lsls	r2, r2, #2
 800660c:	f107 010c 	add.w	r1, r7, #12
 8006610:	300c      	adds	r0, #12
 8006612:	f000 fa0d 	bl	8006a30 <memcpy>
 8006616:	2201      	movs	r2, #1
 8006618:	4629      	mov	r1, r5
 800661a:	4620      	mov	r0, r4
 800661c:	f000 fc28 	bl	8006e70 <__lshift>
 8006620:	9b01      	ldr	r3, [sp, #4]
 8006622:	f103 0901 	add.w	r9, r3, #1
 8006626:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800662a:	4413      	add	r3, r2
 800662c:	9305      	str	r3, [sp, #20]
 800662e:	f00a 0301 	and.w	r3, sl, #1
 8006632:	46b8      	mov	r8, r7
 8006634:	9304      	str	r3, [sp, #16]
 8006636:	4607      	mov	r7, r0
 8006638:	4631      	mov	r1, r6
 800663a:	ee18 0a10 	vmov	r0, s16
 800663e:	f7ff fa75 	bl	8005b2c <quorem>
 8006642:	4641      	mov	r1, r8
 8006644:	9002      	str	r0, [sp, #8]
 8006646:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800664a:	ee18 0a10 	vmov	r0, s16
 800664e:	f000 fc7f 	bl	8006f50 <__mcmp>
 8006652:	463a      	mov	r2, r7
 8006654:	9003      	str	r0, [sp, #12]
 8006656:	4631      	mov	r1, r6
 8006658:	4620      	mov	r0, r4
 800665a:	f000 fc95 	bl	8006f88 <__mdiff>
 800665e:	68c2      	ldr	r2, [r0, #12]
 8006660:	f109 3bff 	add.w	fp, r9, #4294967295
 8006664:	4605      	mov	r5, r0
 8006666:	bb02      	cbnz	r2, 80066aa <_dtoa_r+0xa62>
 8006668:	4601      	mov	r1, r0
 800666a:	ee18 0a10 	vmov	r0, s16
 800666e:	f000 fc6f 	bl	8006f50 <__mcmp>
 8006672:	4602      	mov	r2, r0
 8006674:	4629      	mov	r1, r5
 8006676:	4620      	mov	r0, r4
 8006678:	9207      	str	r2, [sp, #28]
 800667a:	f000 fa27 	bl	8006acc <_Bfree>
 800667e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006682:	ea43 0102 	orr.w	r1, r3, r2
 8006686:	9b04      	ldr	r3, [sp, #16]
 8006688:	430b      	orrs	r3, r1
 800668a:	464d      	mov	r5, r9
 800668c:	d10f      	bne.n	80066ae <_dtoa_r+0xa66>
 800668e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006692:	d02a      	beq.n	80066ea <_dtoa_r+0xaa2>
 8006694:	9b03      	ldr	r3, [sp, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	dd02      	ble.n	80066a0 <_dtoa_r+0xa58>
 800669a:	9b02      	ldr	r3, [sp, #8]
 800669c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80066a0:	f88b a000 	strb.w	sl, [fp]
 80066a4:	e775      	b.n	8006592 <_dtoa_r+0x94a>
 80066a6:	4638      	mov	r0, r7
 80066a8:	e7ba      	b.n	8006620 <_dtoa_r+0x9d8>
 80066aa:	2201      	movs	r2, #1
 80066ac:	e7e2      	b.n	8006674 <_dtoa_r+0xa2c>
 80066ae:	9b03      	ldr	r3, [sp, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	db04      	blt.n	80066be <_dtoa_r+0xa76>
 80066b4:	9906      	ldr	r1, [sp, #24]
 80066b6:	430b      	orrs	r3, r1
 80066b8:	9904      	ldr	r1, [sp, #16]
 80066ba:	430b      	orrs	r3, r1
 80066bc:	d122      	bne.n	8006704 <_dtoa_r+0xabc>
 80066be:	2a00      	cmp	r2, #0
 80066c0:	ddee      	ble.n	80066a0 <_dtoa_r+0xa58>
 80066c2:	ee18 1a10 	vmov	r1, s16
 80066c6:	2201      	movs	r2, #1
 80066c8:	4620      	mov	r0, r4
 80066ca:	f000 fbd1 	bl	8006e70 <__lshift>
 80066ce:	4631      	mov	r1, r6
 80066d0:	ee08 0a10 	vmov	s16, r0
 80066d4:	f000 fc3c 	bl	8006f50 <__mcmp>
 80066d8:	2800      	cmp	r0, #0
 80066da:	dc03      	bgt.n	80066e4 <_dtoa_r+0xa9c>
 80066dc:	d1e0      	bne.n	80066a0 <_dtoa_r+0xa58>
 80066de:	f01a 0f01 	tst.w	sl, #1
 80066e2:	d0dd      	beq.n	80066a0 <_dtoa_r+0xa58>
 80066e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80066e8:	d1d7      	bne.n	800669a <_dtoa_r+0xa52>
 80066ea:	2339      	movs	r3, #57	; 0x39
 80066ec:	f88b 3000 	strb.w	r3, [fp]
 80066f0:	462b      	mov	r3, r5
 80066f2:	461d      	mov	r5, r3
 80066f4:	3b01      	subs	r3, #1
 80066f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80066fa:	2a39      	cmp	r2, #57	; 0x39
 80066fc:	d071      	beq.n	80067e2 <_dtoa_r+0xb9a>
 80066fe:	3201      	adds	r2, #1
 8006700:	701a      	strb	r2, [r3, #0]
 8006702:	e746      	b.n	8006592 <_dtoa_r+0x94a>
 8006704:	2a00      	cmp	r2, #0
 8006706:	dd07      	ble.n	8006718 <_dtoa_r+0xad0>
 8006708:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800670c:	d0ed      	beq.n	80066ea <_dtoa_r+0xaa2>
 800670e:	f10a 0301 	add.w	r3, sl, #1
 8006712:	f88b 3000 	strb.w	r3, [fp]
 8006716:	e73c      	b.n	8006592 <_dtoa_r+0x94a>
 8006718:	9b05      	ldr	r3, [sp, #20]
 800671a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800671e:	4599      	cmp	r9, r3
 8006720:	d047      	beq.n	80067b2 <_dtoa_r+0xb6a>
 8006722:	ee18 1a10 	vmov	r1, s16
 8006726:	2300      	movs	r3, #0
 8006728:	220a      	movs	r2, #10
 800672a:	4620      	mov	r0, r4
 800672c:	f000 f9f0 	bl	8006b10 <__multadd>
 8006730:	45b8      	cmp	r8, r7
 8006732:	ee08 0a10 	vmov	s16, r0
 8006736:	f04f 0300 	mov.w	r3, #0
 800673a:	f04f 020a 	mov.w	r2, #10
 800673e:	4641      	mov	r1, r8
 8006740:	4620      	mov	r0, r4
 8006742:	d106      	bne.n	8006752 <_dtoa_r+0xb0a>
 8006744:	f000 f9e4 	bl	8006b10 <__multadd>
 8006748:	4680      	mov	r8, r0
 800674a:	4607      	mov	r7, r0
 800674c:	f109 0901 	add.w	r9, r9, #1
 8006750:	e772      	b.n	8006638 <_dtoa_r+0x9f0>
 8006752:	f000 f9dd 	bl	8006b10 <__multadd>
 8006756:	4639      	mov	r1, r7
 8006758:	4680      	mov	r8, r0
 800675a:	2300      	movs	r3, #0
 800675c:	220a      	movs	r2, #10
 800675e:	4620      	mov	r0, r4
 8006760:	f000 f9d6 	bl	8006b10 <__multadd>
 8006764:	4607      	mov	r7, r0
 8006766:	e7f1      	b.n	800674c <_dtoa_r+0xb04>
 8006768:	9b03      	ldr	r3, [sp, #12]
 800676a:	9302      	str	r3, [sp, #8]
 800676c:	9d01      	ldr	r5, [sp, #4]
 800676e:	ee18 0a10 	vmov	r0, s16
 8006772:	4631      	mov	r1, r6
 8006774:	f7ff f9da 	bl	8005b2c <quorem>
 8006778:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800677c:	9b01      	ldr	r3, [sp, #4]
 800677e:	f805 ab01 	strb.w	sl, [r5], #1
 8006782:	1aea      	subs	r2, r5, r3
 8006784:	9b02      	ldr	r3, [sp, #8]
 8006786:	4293      	cmp	r3, r2
 8006788:	dd09      	ble.n	800679e <_dtoa_r+0xb56>
 800678a:	ee18 1a10 	vmov	r1, s16
 800678e:	2300      	movs	r3, #0
 8006790:	220a      	movs	r2, #10
 8006792:	4620      	mov	r0, r4
 8006794:	f000 f9bc 	bl	8006b10 <__multadd>
 8006798:	ee08 0a10 	vmov	s16, r0
 800679c:	e7e7      	b.n	800676e <_dtoa_r+0xb26>
 800679e:	9b02      	ldr	r3, [sp, #8]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	bfc8      	it	gt
 80067a4:	461d      	movgt	r5, r3
 80067a6:	9b01      	ldr	r3, [sp, #4]
 80067a8:	bfd8      	it	le
 80067aa:	2501      	movle	r5, #1
 80067ac:	441d      	add	r5, r3
 80067ae:	f04f 0800 	mov.w	r8, #0
 80067b2:	ee18 1a10 	vmov	r1, s16
 80067b6:	2201      	movs	r2, #1
 80067b8:	4620      	mov	r0, r4
 80067ba:	f000 fb59 	bl	8006e70 <__lshift>
 80067be:	4631      	mov	r1, r6
 80067c0:	ee08 0a10 	vmov	s16, r0
 80067c4:	f000 fbc4 	bl	8006f50 <__mcmp>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	dc91      	bgt.n	80066f0 <_dtoa_r+0xaa8>
 80067cc:	d102      	bne.n	80067d4 <_dtoa_r+0xb8c>
 80067ce:	f01a 0f01 	tst.w	sl, #1
 80067d2:	d18d      	bne.n	80066f0 <_dtoa_r+0xaa8>
 80067d4:	462b      	mov	r3, r5
 80067d6:	461d      	mov	r5, r3
 80067d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067dc:	2a30      	cmp	r2, #48	; 0x30
 80067de:	d0fa      	beq.n	80067d6 <_dtoa_r+0xb8e>
 80067e0:	e6d7      	b.n	8006592 <_dtoa_r+0x94a>
 80067e2:	9a01      	ldr	r2, [sp, #4]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d184      	bne.n	80066f2 <_dtoa_r+0xaaa>
 80067e8:	9b00      	ldr	r3, [sp, #0]
 80067ea:	3301      	adds	r3, #1
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	2331      	movs	r3, #49	; 0x31
 80067f0:	7013      	strb	r3, [r2, #0]
 80067f2:	e6ce      	b.n	8006592 <_dtoa_r+0x94a>
 80067f4:	4b09      	ldr	r3, [pc, #36]	; (800681c <_dtoa_r+0xbd4>)
 80067f6:	f7ff ba95 	b.w	8005d24 <_dtoa_r+0xdc>
 80067fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f47f aa6e 	bne.w	8005cde <_dtoa_r+0x96>
 8006802:	4b07      	ldr	r3, [pc, #28]	; (8006820 <_dtoa_r+0xbd8>)
 8006804:	f7ff ba8e 	b.w	8005d24 <_dtoa_r+0xdc>
 8006808:	9b02      	ldr	r3, [sp, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	dcae      	bgt.n	800676c <_dtoa_r+0xb24>
 800680e:	9b06      	ldr	r3, [sp, #24]
 8006810:	2b02      	cmp	r3, #2
 8006812:	f73f aea8 	bgt.w	8006566 <_dtoa_r+0x91e>
 8006816:	e7a9      	b.n	800676c <_dtoa_r+0xb24>
 8006818:	08008177 	.word	0x08008177
 800681c:	080080d4 	.word	0x080080d4
 8006820:	080080f8 	.word	0x080080f8

08006824 <std>:
 8006824:	2300      	movs	r3, #0
 8006826:	b510      	push	{r4, lr}
 8006828:	4604      	mov	r4, r0
 800682a:	e9c0 3300 	strd	r3, r3, [r0]
 800682e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006832:	6083      	str	r3, [r0, #8]
 8006834:	8181      	strh	r1, [r0, #12]
 8006836:	6643      	str	r3, [r0, #100]	; 0x64
 8006838:	81c2      	strh	r2, [r0, #14]
 800683a:	6183      	str	r3, [r0, #24]
 800683c:	4619      	mov	r1, r3
 800683e:	2208      	movs	r2, #8
 8006840:	305c      	adds	r0, #92	; 0x5c
 8006842:	f7fe fcc9 	bl	80051d8 <memset>
 8006846:	4b05      	ldr	r3, [pc, #20]	; (800685c <std+0x38>)
 8006848:	6263      	str	r3, [r4, #36]	; 0x24
 800684a:	4b05      	ldr	r3, [pc, #20]	; (8006860 <std+0x3c>)
 800684c:	62a3      	str	r3, [r4, #40]	; 0x28
 800684e:	4b05      	ldr	r3, [pc, #20]	; (8006864 <std+0x40>)
 8006850:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006852:	4b05      	ldr	r3, [pc, #20]	; (8006868 <std+0x44>)
 8006854:	6224      	str	r4, [r4, #32]
 8006856:	6323      	str	r3, [r4, #48]	; 0x30
 8006858:	bd10      	pop	{r4, pc}
 800685a:	bf00      	nop
 800685c:	080078cd 	.word	0x080078cd
 8006860:	080078ef 	.word	0x080078ef
 8006864:	08007927 	.word	0x08007927
 8006868:	0800794b 	.word	0x0800794b

0800686c <_cleanup_r>:
 800686c:	4901      	ldr	r1, [pc, #4]	; (8006874 <_cleanup_r+0x8>)
 800686e:	f000 b8af 	b.w	80069d0 <_fwalk_reent>
 8006872:	bf00      	nop
 8006874:	08007c61 	.word	0x08007c61

08006878 <__sfmoreglue>:
 8006878:	b570      	push	{r4, r5, r6, lr}
 800687a:	2268      	movs	r2, #104	; 0x68
 800687c:	1e4d      	subs	r5, r1, #1
 800687e:	4355      	muls	r5, r2
 8006880:	460e      	mov	r6, r1
 8006882:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006886:	f000 fce7 	bl	8007258 <_malloc_r>
 800688a:	4604      	mov	r4, r0
 800688c:	b140      	cbz	r0, 80068a0 <__sfmoreglue+0x28>
 800688e:	2100      	movs	r1, #0
 8006890:	e9c0 1600 	strd	r1, r6, [r0]
 8006894:	300c      	adds	r0, #12
 8006896:	60a0      	str	r0, [r4, #8]
 8006898:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800689c:	f7fe fc9c 	bl	80051d8 <memset>
 80068a0:	4620      	mov	r0, r4
 80068a2:	bd70      	pop	{r4, r5, r6, pc}

080068a4 <__sfp_lock_acquire>:
 80068a4:	4801      	ldr	r0, [pc, #4]	; (80068ac <__sfp_lock_acquire+0x8>)
 80068a6:	f000 b8b8 	b.w	8006a1a <__retarget_lock_acquire_recursive>
 80068aa:	bf00      	nop
 80068ac:	20000375 	.word	0x20000375

080068b0 <__sfp_lock_release>:
 80068b0:	4801      	ldr	r0, [pc, #4]	; (80068b8 <__sfp_lock_release+0x8>)
 80068b2:	f000 b8b3 	b.w	8006a1c <__retarget_lock_release_recursive>
 80068b6:	bf00      	nop
 80068b8:	20000375 	.word	0x20000375

080068bc <__sinit_lock_acquire>:
 80068bc:	4801      	ldr	r0, [pc, #4]	; (80068c4 <__sinit_lock_acquire+0x8>)
 80068be:	f000 b8ac 	b.w	8006a1a <__retarget_lock_acquire_recursive>
 80068c2:	bf00      	nop
 80068c4:	20000376 	.word	0x20000376

080068c8 <__sinit_lock_release>:
 80068c8:	4801      	ldr	r0, [pc, #4]	; (80068d0 <__sinit_lock_release+0x8>)
 80068ca:	f000 b8a7 	b.w	8006a1c <__retarget_lock_release_recursive>
 80068ce:	bf00      	nop
 80068d0:	20000376 	.word	0x20000376

080068d4 <__sinit>:
 80068d4:	b510      	push	{r4, lr}
 80068d6:	4604      	mov	r4, r0
 80068d8:	f7ff fff0 	bl	80068bc <__sinit_lock_acquire>
 80068dc:	69a3      	ldr	r3, [r4, #24]
 80068de:	b11b      	cbz	r3, 80068e8 <__sinit+0x14>
 80068e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068e4:	f7ff bff0 	b.w	80068c8 <__sinit_lock_release>
 80068e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80068ec:	6523      	str	r3, [r4, #80]	; 0x50
 80068ee:	4b13      	ldr	r3, [pc, #76]	; (800693c <__sinit+0x68>)
 80068f0:	4a13      	ldr	r2, [pc, #76]	; (8006940 <__sinit+0x6c>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80068f6:	42a3      	cmp	r3, r4
 80068f8:	bf04      	itt	eq
 80068fa:	2301      	moveq	r3, #1
 80068fc:	61a3      	streq	r3, [r4, #24]
 80068fe:	4620      	mov	r0, r4
 8006900:	f000 f820 	bl	8006944 <__sfp>
 8006904:	6060      	str	r0, [r4, #4]
 8006906:	4620      	mov	r0, r4
 8006908:	f000 f81c 	bl	8006944 <__sfp>
 800690c:	60a0      	str	r0, [r4, #8]
 800690e:	4620      	mov	r0, r4
 8006910:	f000 f818 	bl	8006944 <__sfp>
 8006914:	2200      	movs	r2, #0
 8006916:	60e0      	str	r0, [r4, #12]
 8006918:	2104      	movs	r1, #4
 800691a:	6860      	ldr	r0, [r4, #4]
 800691c:	f7ff ff82 	bl	8006824 <std>
 8006920:	68a0      	ldr	r0, [r4, #8]
 8006922:	2201      	movs	r2, #1
 8006924:	2109      	movs	r1, #9
 8006926:	f7ff ff7d 	bl	8006824 <std>
 800692a:	68e0      	ldr	r0, [r4, #12]
 800692c:	2202      	movs	r2, #2
 800692e:	2112      	movs	r1, #18
 8006930:	f7ff ff78 	bl	8006824 <std>
 8006934:	2301      	movs	r3, #1
 8006936:	61a3      	str	r3, [r4, #24]
 8006938:	e7d2      	b.n	80068e0 <__sinit+0xc>
 800693a:	bf00      	nop
 800693c:	080080c0 	.word	0x080080c0
 8006940:	0800686d 	.word	0x0800686d

08006944 <__sfp>:
 8006944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006946:	4607      	mov	r7, r0
 8006948:	f7ff ffac 	bl	80068a4 <__sfp_lock_acquire>
 800694c:	4b1e      	ldr	r3, [pc, #120]	; (80069c8 <__sfp+0x84>)
 800694e:	681e      	ldr	r6, [r3, #0]
 8006950:	69b3      	ldr	r3, [r6, #24]
 8006952:	b913      	cbnz	r3, 800695a <__sfp+0x16>
 8006954:	4630      	mov	r0, r6
 8006956:	f7ff ffbd 	bl	80068d4 <__sinit>
 800695a:	3648      	adds	r6, #72	; 0x48
 800695c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006960:	3b01      	subs	r3, #1
 8006962:	d503      	bpl.n	800696c <__sfp+0x28>
 8006964:	6833      	ldr	r3, [r6, #0]
 8006966:	b30b      	cbz	r3, 80069ac <__sfp+0x68>
 8006968:	6836      	ldr	r6, [r6, #0]
 800696a:	e7f7      	b.n	800695c <__sfp+0x18>
 800696c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006970:	b9d5      	cbnz	r5, 80069a8 <__sfp+0x64>
 8006972:	4b16      	ldr	r3, [pc, #88]	; (80069cc <__sfp+0x88>)
 8006974:	60e3      	str	r3, [r4, #12]
 8006976:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800697a:	6665      	str	r5, [r4, #100]	; 0x64
 800697c:	f000 f84c 	bl	8006a18 <__retarget_lock_init_recursive>
 8006980:	f7ff ff96 	bl	80068b0 <__sfp_lock_release>
 8006984:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006988:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800698c:	6025      	str	r5, [r4, #0]
 800698e:	61a5      	str	r5, [r4, #24]
 8006990:	2208      	movs	r2, #8
 8006992:	4629      	mov	r1, r5
 8006994:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006998:	f7fe fc1e 	bl	80051d8 <memset>
 800699c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80069a4:	4620      	mov	r0, r4
 80069a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069a8:	3468      	adds	r4, #104	; 0x68
 80069aa:	e7d9      	b.n	8006960 <__sfp+0x1c>
 80069ac:	2104      	movs	r1, #4
 80069ae:	4638      	mov	r0, r7
 80069b0:	f7ff ff62 	bl	8006878 <__sfmoreglue>
 80069b4:	4604      	mov	r4, r0
 80069b6:	6030      	str	r0, [r6, #0]
 80069b8:	2800      	cmp	r0, #0
 80069ba:	d1d5      	bne.n	8006968 <__sfp+0x24>
 80069bc:	f7ff ff78 	bl	80068b0 <__sfp_lock_release>
 80069c0:	230c      	movs	r3, #12
 80069c2:	603b      	str	r3, [r7, #0]
 80069c4:	e7ee      	b.n	80069a4 <__sfp+0x60>
 80069c6:	bf00      	nop
 80069c8:	080080c0 	.word	0x080080c0
 80069cc:	ffff0001 	.word	0xffff0001

080069d0 <_fwalk_reent>:
 80069d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069d4:	4606      	mov	r6, r0
 80069d6:	4688      	mov	r8, r1
 80069d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069dc:	2700      	movs	r7, #0
 80069de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069e2:	f1b9 0901 	subs.w	r9, r9, #1
 80069e6:	d505      	bpl.n	80069f4 <_fwalk_reent+0x24>
 80069e8:	6824      	ldr	r4, [r4, #0]
 80069ea:	2c00      	cmp	r4, #0
 80069ec:	d1f7      	bne.n	80069de <_fwalk_reent+0xe>
 80069ee:	4638      	mov	r0, r7
 80069f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069f4:	89ab      	ldrh	r3, [r5, #12]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d907      	bls.n	8006a0a <_fwalk_reent+0x3a>
 80069fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069fe:	3301      	adds	r3, #1
 8006a00:	d003      	beq.n	8006a0a <_fwalk_reent+0x3a>
 8006a02:	4629      	mov	r1, r5
 8006a04:	4630      	mov	r0, r6
 8006a06:	47c0      	blx	r8
 8006a08:	4307      	orrs	r7, r0
 8006a0a:	3568      	adds	r5, #104	; 0x68
 8006a0c:	e7e9      	b.n	80069e2 <_fwalk_reent+0x12>
	...

08006a10 <_localeconv_r>:
 8006a10:	4800      	ldr	r0, [pc, #0]	; (8006a14 <_localeconv_r+0x4>)
 8006a12:	4770      	bx	lr
 8006a14:	20000160 	.word	0x20000160

08006a18 <__retarget_lock_init_recursive>:
 8006a18:	4770      	bx	lr

08006a1a <__retarget_lock_acquire_recursive>:
 8006a1a:	4770      	bx	lr

08006a1c <__retarget_lock_release_recursive>:
 8006a1c:	4770      	bx	lr
	...

08006a20 <malloc>:
 8006a20:	4b02      	ldr	r3, [pc, #8]	; (8006a2c <malloc+0xc>)
 8006a22:	4601      	mov	r1, r0
 8006a24:	6818      	ldr	r0, [r3, #0]
 8006a26:	f000 bc17 	b.w	8007258 <_malloc_r>
 8006a2a:	bf00      	nop
 8006a2c:	2000000c 	.word	0x2000000c

08006a30 <memcpy>:
 8006a30:	440a      	add	r2, r1
 8006a32:	4291      	cmp	r1, r2
 8006a34:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a38:	d100      	bne.n	8006a3c <memcpy+0xc>
 8006a3a:	4770      	bx	lr
 8006a3c:	b510      	push	{r4, lr}
 8006a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a46:	4291      	cmp	r1, r2
 8006a48:	d1f9      	bne.n	8006a3e <memcpy+0xe>
 8006a4a:	bd10      	pop	{r4, pc}

08006a4c <_Balloc>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a50:	4604      	mov	r4, r0
 8006a52:	460d      	mov	r5, r1
 8006a54:	b976      	cbnz	r6, 8006a74 <_Balloc+0x28>
 8006a56:	2010      	movs	r0, #16
 8006a58:	f7ff ffe2 	bl	8006a20 <malloc>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	6260      	str	r0, [r4, #36]	; 0x24
 8006a60:	b920      	cbnz	r0, 8006a6c <_Balloc+0x20>
 8006a62:	4b18      	ldr	r3, [pc, #96]	; (8006ac4 <_Balloc+0x78>)
 8006a64:	4818      	ldr	r0, [pc, #96]	; (8006ac8 <_Balloc+0x7c>)
 8006a66:	2166      	movs	r1, #102	; 0x66
 8006a68:	f001 f846 	bl	8007af8 <__assert_func>
 8006a6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a70:	6006      	str	r6, [r0, #0]
 8006a72:	60c6      	str	r6, [r0, #12]
 8006a74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006a76:	68f3      	ldr	r3, [r6, #12]
 8006a78:	b183      	cbz	r3, 8006a9c <_Balloc+0x50>
 8006a7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a82:	b9b8      	cbnz	r0, 8006ab4 <_Balloc+0x68>
 8006a84:	2101      	movs	r1, #1
 8006a86:	fa01 f605 	lsl.w	r6, r1, r5
 8006a8a:	1d72      	adds	r2, r6, #5
 8006a8c:	0092      	lsls	r2, r2, #2
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f000 fb60 	bl	8007154 <_calloc_r>
 8006a94:	b160      	cbz	r0, 8006ab0 <_Balloc+0x64>
 8006a96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a9a:	e00e      	b.n	8006aba <_Balloc+0x6e>
 8006a9c:	2221      	movs	r2, #33	; 0x21
 8006a9e:	2104      	movs	r1, #4
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f000 fb57 	bl	8007154 <_calloc_r>
 8006aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006aa8:	60f0      	str	r0, [r6, #12]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1e4      	bne.n	8006a7a <_Balloc+0x2e>
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	bd70      	pop	{r4, r5, r6, pc}
 8006ab4:	6802      	ldr	r2, [r0, #0]
 8006ab6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006aba:	2300      	movs	r3, #0
 8006abc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ac0:	e7f7      	b.n	8006ab2 <_Balloc+0x66>
 8006ac2:	bf00      	nop
 8006ac4:	08008105 	.word	0x08008105
 8006ac8:	080081e8 	.word	0x080081e8

08006acc <_Bfree>:
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ad0:	4605      	mov	r5, r0
 8006ad2:	460c      	mov	r4, r1
 8006ad4:	b976      	cbnz	r6, 8006af4 <_Bfree+0x28>
 8006ad6:	2010      	movs	r0, #16
 8006ad8:	f7ff ffa2 	bl	8006a20 <malloc>
 8006adc:	4602      	mov	r2, r0
 8006ade:	6268      	str	r0, [r5, #36]	; 0x24
 8006ae0:	b920      	cbnz	r0, 8006aec <_Bfree+0x20>
 8006ae2:	4b09      	ldr	r3, [pc, #36]	; (8006b08 <_Bfree+0x3c>)
 8006ae4:	4809      	ldr	r0, [pc, #36]	; (8006b0c <_Bfree+0x40>)
 8006ae6:	218a      	movs	r1, #138	; 0x8a
 8006ae8:	f001 f806 	bl	8007af8 <__assert_func>
 8006aec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006af0:	6006      	str	r6, [r0, #0]
 8006af2:	60c6      	str	r6, [r0, #12]
 8006af4:	b13c      	cbz	r4, 8006b06 <_Bfree+0x3a>
 8006af6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006af8:	6862      	ldr	r2, [r4, #4]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b00:	6021      	str	r1, [r4, #0]
 8006b02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b06:	bd70      	pop	{r4, r5, r6, pc}
 8006b08:	08008105 	.word	0x08008105
 8006b0c:	080081e8 	.word	0x080081e8

08006b10 <__multadd>:
 8006b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b14:	690d      	ldr	r5, [r1, #16]
 8006b16:	4607      	mov	r7, r0
 8006b18:	460c      	mov	r4, r1
 8006b1a:	461e      	mov	r6, r3
 8006b1c:	f101 0c14 	add.w	ip, r1, #20
 8006b20:	2000      	movs	r0, #0
 8006b22:	f8dc 3000 	ldr.w	r3, [ip]
 8006b26:	b299      	uxth	r1, r3
 8006b28:	fb02 6101 	mla	r1, r2, r1, r6
 8006b2c:	0c1e      	lsrs	r6, r3, #16
 8006b2e:	0c0b      	lsrs	r3, r1, #16
 8006b30:	fb02 3306 	mla	r3, r2, r6, r3
 8006b34:	b289      	uxth	r1, r1
 8006b36:	3001      	adds	r0, #1
 8006b38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b3c:	4285      	cmp	r5, r0
 8006b3e:	f84c 1b04 	str.w	r1, [ip], #4
 8006b42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b46:	dcec      	bgt.n	8006b22 <__multadd+0x12>
 8006b48:	b30e      	cbz	r6, 8006b8e <__multadd+0x7e>
 8006b4a:	68a3      	ldr	r3, [r4, #8]
 8006b4c:	42ab      	cmp	r3, r5
 8006b4e:	dc19      	bgt.n	8006b84 <__multadd+0x74>
 8006b50:	6861      	ldr	r1, [r4, #4]
 8006b52:	4638      	mov	r0, r7
 8006b54:	3101      	adds	r1, #1
 8006b56:	f7ff ff79 	bl	8006a4c <_Balloc>
 8006b5a:	4680      	mov	r8, r0
 8006b5c:	b928      	cbnz	r0, 8006b6a <__multadd+0x5a>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	4b0c      	ldr	r3, [pc, #48]	; (8006b94 <__multadd+0x84>)
 8006b62:	480d      	ldr	r0, [pc, #52]	; (8006b98 <__multadd+0x88>)
 8006b64:	21b5      	movs	r1, #181	; 0xb5
 8006b66:	f000 ffc7 	bl	8007af8 <__assert_func>
 8006b6a:	6922      	ldr	r2, [r4, #16]
 8006b6c:	3202      	adds	r2, #2
 8006b6e:	f104 010c 	add.w	r1, r4, #12
 8006b72:	0092      	lsls	r2, r2, #2
 8006b74:	300c      	adds	r0, #12
 8006b76:	f7ff ff5b 	bl	8006a30 <memcpy>
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	4638      	mov	r0, r7
 8006b7e:	f7ff ffa5 	bl	8006acc <_Bfree>
 8006b82:	4644      	mov	r4, r8
 8006b84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b88:	3501      	adds	r5, #1
 8006b8a:	615e      	str	r6, [r3, #20]
 8006b8c:	6125      	str	r5, [r4, #16]
 8006b8e:	4620      	mov	r0, r4
 8006b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b94:	08008177 	.word	0x08008177
 8006b98:	080081e8 	.word	0x080081e8

08006b9c <__hi0bits>:
 8006b9c:	0c03      	lsrs	r3, r0, #16
 8006b9e:	041b      	lsls	r3, r3, #16
 8006ba0:	b9d3      	cbnz	r3, 8006bd8 <__hi0bits+0x3c>
 8006ba2:	0400      	lsls	r0, r0, #16
 8006ba4:	2310      	movs	r3, #16
 8006ba6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006baa:	bf04      	itt	eq
 8006bac:	0200      	lsleq	r0, r0, #8
 8006bae:	3308      	addeq	r3, #8
 8006bb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006bb4:	bf04      	itt	eq
 8006bb6:	0100      	lsleq	r0, r0, #4
 8006bb8:	3304      	addeq	r3, #4
 8006bba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006bbe:	bf04      	itt	eq
 8006bc0:	0080      	lsleq	r0, r0, #2
 8006bc2:	3302      	addeq	r3, #2
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	db05      	blt.n	8006bd4 <__hi0bits+0x38>
 8006bc8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006bcc:	f103 0301 	add.w	r3, r3, #1
 8006bd0:	bf08      	it	eq
 8006bd2:	2320      	moveq	r3, #32
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	4770      	bx	lr
 8006bd8:	2300      	movs	r3, #0
 8006bda:	e7e4      	b.n	8006ba6 <__hi0bits+0xa>

08006bdc <__lo0bits>:
 8006bdc:	6803      	ldr	r3, [r0, #0]
 8006bde:	f013 0207 	ands.w	r2, r3, #7
 8006be2:	4601      	mov	r1, r0
 8006be4:	d00b      	beq.n	8006bfe <__lo0bits+0x22>
 8006be6:	07da      	lsls	r2, r3, #31
 8006be8:	d423      	bmi.n	8006c32 <__lo0bits+0x56>
 8006bea:	0798      	lsls	r0, r3, #30
 8006bec:	bf49      	itett	mi
 8006bee:	085b      	lsrmi	r3, r3, #1
 8006bf0:	089b      	lsrpl	r3, r3, #2
 8006bf2:	2001      	movmi	r0, #1
 8006bf4:	600b      	strmi	r3, [r1, #0]
 8006bf6:	bf5c      	itt	pl
 8006bf8:	600b      	strpl	r3, [r1, #0]
 8006bfa:	2002      	movpl	r0, #2
 8006bfc:	4770      	bx	lr
 8006bfe:	b298      	uxth	r0, r3
 8006c00:	b9a8      	cbnz	r0, 8006c2e <__lo0bits+0x52>
 8006c02:	0c1b      	lsrs	r3, r3, #16
 8006c04:	2010      	movs	r0, #16
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	b90a      	cbnz	r2, 8006c0e <__lo0bits+0x32>
 8006c0a:	3008      	adds	r0, #8
 8006c0c:	0a1b      	lsrs	r3, r3, #8
 8006c0e:	071a      	lsls	r2, r3, #28
 8006c10:	bf04      	itt	eq
 8006c12:	091b      	lsreq	r3, r3, #4
 8006c14:	3004      	addeq	r0, #4
 8006c16:	079a      	lsls	r2, r3, #30
 8006c18:	bf04      	itt	eq
 8006c1a:	089b      	lsreq	r3, r3, #2
 8006c1c:	3002      	addeq	r0, #2
 8006c1e:	07da      	lsls	r2, r3, #31
 8006c20:	d403      	bmi.n	8006c2a <__lo0bits+0x4e>
 8006c22:	085b      	lsrs	r3, r3, #1
 8006c24:	f100 0001 	add.w	r0, r0, #1
 8006c28:	d005      	beq.n	8006c36 <__lo0bits+0x5a>
 8006c2a:	600b      	str	r3, [r1, #0]
 8006c2c:	4770      	bx	lr
 8006c2e:	4610      	mov	r0, r2
 8006c30:	e7e9      	b.n	8006c06 <__lo0bits+0x2a>
 8006c32:	2000      	movs	r0, #0
 8006c34:	4770      	bx	lr
 8006c36:	2020      	movs	r0, #32
 8006c38:	4770      	bx	lr
	...

08006c3c <__i2b>:
 8006c3c:	b510      	push	{r4, lr}
 8006c3e:	460c      	mov	r4, r1
 8006c40:	2101      	movs	r1, #1
 8006c42:	f7ff ff03 	bl	8006a4c <_Balloc>
 8006c46:	4602      	mov	r2, r0
 8006c48:	b928      	cbnz	r0, 8006c56 <__i2b+0x1a>
 8006c4a:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <__i2b+0x24>)
 8006c4c:	4805      	ldr	r0, [pc, #20]	; (8006c64 <__i2b+0x28>)
 8006c4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006c52:	f000 ff51 	bl	8007af8 <__assert_func>
 8006c56:	2301      	movs	r3, #1
 8006c58:	6144      	str	r4, [r0, #20]
 8006c5a:	6103      	str	r3, [r0, #16]
 8006c5c:	bd10      	pop	{r4, pc}
 8006c5e:	bf00      	nop
 8006c60:	08008177 	.word	0x08008177
 8006c64:	080081e8 	.word	0x080081e8

08006c68 <__multiply>:
 8006c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6c:	4691      	mov	r9, r2
 8006c6e:	690a      	ldr	r2, [r1, #16]
 8006c70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	bfb8      	it	lt
 8006c78:	460b      	movlt	r3, r1
 8006c7a:	460c      	mov	r4, r1
 8006c7c:	bfbc      	itt	lt
 8006c7e:	464c      	movlt	r4, r9
 8006c80:	4699      	movlt	r9, r3
 8006c82:	6927      	ldr	r7, [r4, #16]
 8006c84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c88:	68a3      	ldr	r3, [r4, #8]
 8006c8a:	6861      	ldr	r1, [r4, #4]
 8006c8c:	eb07 060a 	add.w	r6, r7, sl
 8006c90:	42b3      	cmp	r3, r6
 8006c92:	b085      	sub	sp, #20
 8006c94:	bfb8      	it	lt
 8006c96:	3101      	addlt	r1, #1
 8006c98:	f7ff fed8 	bl	8006a4c <_Balloc>
 8006c9c:	b930      	cbnz	r0, 8006cac <__multiply+0x44>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	4b44      	ldr	r3, [pc, #272]	; (8006db4 <__multiply+0x14c>)
 8006ca2:	4845      	ldr	r0, [pc, #276]	; (8006db8 <__multiply+0x150>)
 8006ca4:	f240 115d 	movw	r1, #349	; 0x15d
 8006ca8:	f000 ff26 	bl	8007af8 <__assert_func>
 8006cac:	f100 0514 	add.w	r5, r0, #20
 8006cb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006cb4:	462b      	mov	r3, r5
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	4543      	cmp	r3, r8
 8006cba:	d321      	bcc.n	8006d00 <__multiply+0x98>
 8006cbc:	f104 0314 	add.w	r3, r4, #20
 8006cc0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006cc4:	f109 0314 	add.w	r3, r9, #20
 8006cc8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ccc:	9202      	str	r2, [sp, #8]
 8006cce:	1b3a      	subs	r2, r7, r4
 8006cd0:	3a15      	subs	r2, #21
 8006cd2:	f022 0203 	bic.w	r2, r2, #3
 8006cd6:	3204      	adds	r2, #4
 8006cd8:	f104 0115 	add.w	r1, r4, #21
 8006cdc:	428f      	cmp	r7, r1
 8006cde:	bf38      	it	cc
 8006ce0:	2204      	movcc	r2, #4
 8006ce2:	9201      	str	r2, [sp, #4]
 8006ce4:	9a02      	ldr	r2, [sp, #8]
 8006ce6:	9303      	str	r3, [sp, #12]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d80c      	bhi.n	8006d06 <__multiply+0x9e>
 8006cec:	2e00      	cmp	r6, #0
 8006cee:	dd03      	ble.n	8006cf8 <__multiply+0x90>
 8006cf0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d05a      	beq.n	8006dae <__multiply+0x146>
 8006cf8:	6106      	str	r6, [r0, #16]
 8006cfa:	b005      	add	sp, #20
 8006cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d00:	f843 2b04 	str.w	r2, [r3], #4
 8006d04:	e7d8      	b.n	8006cb8 <__multiply+0x50>
 8006d06:	f8b3 a000 	ldrh.w	sl, [r3]
 8006d0a:	f1ba 0f00 	cmp.w	sl, #0
 8006d0e:	d024      	beq.n	8006d5a <__multiply+0xf2>
 8006d10:	f104 0e14 	add.w	lr, r4, #20
 8006d14:	46a9      	mov	r9, r5
 8006d16:	f04f 0c00 	mov.w	ip, #0
 8006d1a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006d1e:	f8d9 1000 	ldr.w	r1, [r9]
 8006d22:	fa1f fb82 	uxth.w	fp, r2
 8006d26:	b289      	uxth	r1, r1
 8006d28:	fb0a 110b 	mla	r1, sl, fp, r1
 8006d2c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006d30:	f8d9 2000 	ldr.w	r2, [r9]
 8006d34:	4461      	add	r1, ip
 8006d36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d3a:	fb0a c20b 	mla	r2, sl, fp, ip
 8006d3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006d42:	b289      	uxth	r1, r1
 8006d44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d48:	4577      	cmp	r7, lr
 8006d4a:	f849 1b04 	str.w	r1, [r9], #4
 8006d4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d52:	d8e2      	bhi.n	8006d1a <__multiply+0xb2>
 8006d54:	9a01      	ldr	r2, [sp, #4]
 8006d56:	f845 c002 	str.w	ip, [r5, r2]
 8006d5a:	9a03      	ldr	r2, [sp, #12]
 8006d5c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006d60:	3304      	adds	r3, #4
 8006d62:	f1b9 0f00 	cmp.w	r9, #0
 8006d66:	d020      	beq.n	8006daa <__multiply+0x142>
 8006d68:	6829      	ldr	r1, [r5, #0]
 8006d6a:	f104 0c14 	add.w	ip, r4, #20
 8006d6e:	46ae      	mov	lr, r5
 8006d70:	f04f 0a00 	mov.w	sl, #0
 8006d74:	f8bc b000 	ldrh.w	fp, [ip]
 8006d78:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006d7c:	fb09 220b 	mla	r2, r9, fp, r2
 8006d80:	4492      	add	sl, r2
 8006d82:	b289      	uxth	r1, r1
 8006d84:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006d88:	f84e 1b04 	str.w	r1, [lr], #4
 8006d8c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006d90:	f8be 1000 	ldrh.w	r1, [lr]
 8006d94:	0c12      	lsrs	r2, r2, #16
 8006d96:	fb09 1102 	mla	r1, r9, r2, r1
 8006d9a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006d9e:	4567      	cmp	r7, ip
 8006da0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006da4:	d8e6      	bhi.n	8006d74 <__multiply+0x10c>
 8006da6:	9a01      	ldr	r2, [sp, #4]
 8006da8:	50a9      	str	r1, [r5, r2]
 8006daa:	3504      	adds	r5, #4
 8006dac:	e79a      	b.n	8006ce4 <__multiply+0x7c>
 8006dae:	3e01      	subs	r6, #1
 8006db0:	e79c      	b.n	8006cec <__multiply+0x84>
 8006db2:	bf00      	nop
 8006db4:	08008177 	.word	0x08008177
 8006db8:	080081e8 	.word	0x080081e8

08006dbc <__pow5mult>:
 8006dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dc0:	4615      	mov	r5, r2
 8006dc2:	f012 0203 	ands.w	r2, r2, #3
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	460f      	mov	r7, r1
 8006dca:	d007      	beq.n	8006ddc <__pow5mult+0x20>
 8006dcc:	4c25      	ldr	r4, [pc, #148]	; (8006e64 <__pow5mult+0xa8>)
 8006dce:	3a01      	subs	r2, #1
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006dd6:	f7ff fe9b 	bl	8006b10 <__multadd>
 8006dda:	4607      	mov	r7, r0
 8006ddc:	10ad      	asrs	r5, r5, #2
 8006dde:	d03d      	beq.n	8006e5c <__pow5mult+0xa0>
 8006de0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006de2:	b97c      	cbnz	r4, 8006e04 <__pow5mult+0x48>
 8006de4:	2010      	movs	r0, #16
 8006de6:	f7ff fe1b 	bl	8006a20 <malloc>
 8006dea:	4602      	mov	r2, r0
 8006dec:	6270      	str	r0, [r6, #36]	; 0x24
 8006dee:	b928      	cbnz	r0, 8006dfc <__pow5mult+0x40>
 8006df0:	4b1d      	ldr	r3, [pc, #116]	; (8006e68 <__pow5mult+0xac>)
 8006df2:	481e      	ldr	r0, [pc, #120]	; (8006e6c <__pow5mult+0xb0>)
 8006df4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006df8:	f000 fe7e 	bl	8007af8 <__assert_func>
 8006dfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e00:	6004      	str	r4, [r0, #0]
 8006e02:	60c4      	str	r4, [r0, #12]
 8006e04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006e08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e0c:	b94c      	cbnz	r4, 8006e22 <__pow5mult+0x66>
 8006e0e:	f240 2171 	movw	r1, #625	; 0x271
 8006e12:	4630      	mov	r0, r6
 8006e14:	f7ff ff12 	bl	8006c3c <__i2b>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e1e:	4604      	mov	r4, r0
 8006e20:	6003      	str	r3, [r0, #0]
 8006e22:	f04f 0900 	mov.w	r9, #0
 8006e26:	07eb      	lsls	r3, r5, #31
 8006e28:	d50a      	bpl.n	8006e40 <__pow5mult+0x84>
 8006e2a:	4639      	mov	r1, r7
 8006e2c:	4622      	mov	r2, r4
 8006e2e:	4630      	mov	r0, r6
 8006e30:	f7ff ff1a 	bl	8006c68 <__multiply>
 8006e34:	4639      	mov	r1, r7
 8006e36:	4680      	mov	r8, r0
 8006e38:	4630      	mov	r0, r6
 8006e3a:	f7ff fe47 	bl	8006acc <_Bfree>
 8006e3e:	4647      	mov	r7, r8
 8006e40:	106d      	asrs	r5, r5, #1
 8006e42:	d00b      	beq.n	8006e5c <__pow5mult+0xa0>
 8006e44:	6820      	ldr	r0, [r4, #0]
 8006e46:	b938      	cbnz	r0, 8006e58 <__pow5mult+0x9c>
 8006e48:	4622      	mov	r2, r4
 8006e4a:	4621      	mov	r1, r4
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	f7ff ff0b 	bl	8006c68 <__multiply>
 8006e52:	6020      	str	r0, [r4, #0]
 8006e54:	f8c0 9000 	str.w	r9, [r0]
 8006e58:	4604      	mov	r4, r0
 8006e5a:	e7e4      	b.n	8006e26 <__pow5mult+0x6a>
 8006e5c:	4638      	mov	r0, r7
 8006e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e62:	bf00      	nop
 8006e64:	08008338 	.word	0x08008338
 8006e68:	08008105 	.word	0x08008105
 8006e6c:	080081e8 	.word	0x080081e8

08006e70 <__lshift>:
 8006e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e74:	460c      	mov	r4, r1
 8006e76:	6849      	ldr	r1, [r1, #4]
 8006e78:	6923      	ldr	r3, [r4, #16]
 8006e7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e7e:	68a3      	ldr	r3, [r4, #8]
 8006e80:	4607      	mov	r7, r0
 8006e82:	4691      	mov	r9, r2
 8006e84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e88:	f108 0601 	add.w	r6, r8, #1
 8006e8c:	42b3      	cmp	r3, r6
 8006e8e:	db0b      	blt.n	8006ea8 <__lshift+0x38>
 8006e90:	4638      	mov	r0, r7
 8006e92:	f7ff fddb 	bl	8006a4c <_Balloc>
 8006e96:	4605      	mov	r5, r0
 8006e98:	b948      	cbnz	r0, 8006eae <__lshift+0x3e>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	4b2a      	ldr	r3, [pc, #168]	; (8006f48 <__lshift+0xd8>)
 8006e9e:	482b      	ldr	r0, [pc, #172]	; (8006f4c <__lshift+0xdc>)
 8006ea0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006ea4:	f000 fe28 	bl	8007af8 <__assert_func>
 8006ea8:	3101      	adds	r1, #1
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	e7ee      	b.n	8006e8c <__lshift+0x1c>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	f100 0114 	add.w	r1, r0, #20
 8006eb4:	f100 0210 	add.w	r2, r0, #16
 8006eb8:	4618      	mov	r0, r3
 8006eba:	4553      	cmp	r3, sl
 8006ebc:	db37      	blt.n	8006f2e <__lshift+0xbe>
 8006ebe:	6920      	ldr	r0, [r4, #16]
 8006ec0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ec4:	f104 0314 	add.w	r3, r4, #20
 8006ec8:	f019 091f 	ands.w	r9, r9, #31
 8006ecc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ed0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006ed4:	d02f      	beq.n	8006f36 <__lshift+0xc6>
 8006ed6:	f1c9 0e20 	rsb	lr, r9, #32
 8006eda:	468a      	mov	sl, r1
 8006edc:	f04f 0c00 	mov.w	ip, #0
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	fa02 f209 	lsl.w	r2, r2, r9
 8006ee6:	ea42 020c 	orr.w	r2, r2, ip
 8006eea:	f84a 2b04 	str.w	r2, [sl], #4
 8006eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ef2:	4298      	cmp	r0, r3
 8006ef4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006ef8:	d8f2      	bhi.n	8006ee0 <__lshift+0x70>
 8006efa:	1b03      	subs	r3, r0, r4
 8006efc:	3b15      	subs	r3, #21
 8006efe:	f023 0303 	bic.w	r3, r3, #3
 8006f02:	3304      	adds	r3, #4
 8006f04:	f104 0215 	add.w	r2, r4, #21
 8006f08:	4290      	cmp	r0, r2
 8006f0a:	bf38      	it	cc
 8006f0c:	2304      	movcc	r3, #4
 8006f0e:	f841 c003 	str.w	ip, [r1, r3]
 8006f12:	f1bc 0f00 	cmp.w	ip, #0
 8006f16:	d001      	beq.n	8006f1c <__lshift+0xac>
 8006f18:	f108 0602 	add.w	r6, r8, #2
 8006f1c:	3e01      	subs	r6, #1
 8006f1e:	4638      	mov	r0, r7
 8006f20:	612e      	str	r6, [r5, #16]
 8006f22:	4621      	mov	r1, r4
 8006f24:	f7ff fdd2 	bl	8006acc <_Bfree>
 8006f28:	4628      	mov	r0, r5
 8006f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f32:	3301      	adds	r3, #1
 8006f34:	e7c1      	b.n	8006eba <__lshift+0x4a>
 8006f36:	3904      	subs	r1, #4
 8006f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f40:	4298      	cmp	r0, r3
 8006f42:	d8f9      	bhi.n	8006f38 <__lshift+0xc8>
 8006f44:	e7ea      	b.n	8006f1c <__lshift+0xac>
 8006f46:	bf00      	nop
 8006f48:	08008177 	.word	0x08008177
 8006f4c:	080081e8 	.word	0x080081e8

08006f50 <__mcmp>:
 8006f50:	b530      	push	{r4, r5, lr}
 8006f52:	6902      	ldr	r2, [r0, #16]
 8006f54:	690c      	ldr	r4, [r1, #16]
 8006f56:	1b12      	subs	r2, r2, r4
 8006f58:	d10e      	bne.n	8006f78 <__mcmp+0x28>
 8006f5a:	f100 0314 	add.w	r3, r0, #20
 8006f5e:	3114      	adds	r1, #20
 8006f60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006f64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006f68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006f6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006f70:	42a5      	cmp	r5, r4
 8006f72:	d003      	beq.n	8006f7c <__mcmp+0x2c>
 8006f74:	d305      	bcc.n	8006f82 <__mcmp+0x32>
 8006f76:	2201      	movs	r2, #1
 8006f78:	4610      	mov	r0, r2
 8006f7a:	bd30      	pop	{r4, r5, pc}
 8006f7c:	4283      	cmp	r3, r0
 8006f7e:	d3f3      	bcc.n	8006f68 <__mcmp+0x18>
 8006f80:	e7fa      	b.n	8006f78 <__mcmp+0x28>
 8006f82:	f04f 32ff 	mov.w	r2, #4294967295
 8006f86:	e7f7      	b.n	8006f78 <__mcmp+0x28>

08006f88 <__mdiff>:
 8006f88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8c:	460c      	mov	r4, r1
 8006f8e:	4606      	mov	r6, r0
 8006f90:	4611      	mov	r1, r2
 8006f92:	4620      	mov	r0, r4
 8006f94:	4690      	mov	r8, r2
 8006f96:	f7ff ffdb 	bl	8006f50 <__mcmp>
 8006f9a:	1e05      	subs	r5, r0, #0
 8006f9c:	d110      	bne.n	8006fc0 <__mdiff+0x38>
 8006f9e:	4629      	mov	r1, r5
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	f7ff fd53 	bl	8006a4c <_Balloc>
 8006fa6:	b930      	cbnz	r0, 8006fb6 <__mdiff+0x2e>
 8006fa8:	4b3a      	ldr	r3, [pc, #232]	; (8007094 <__mdiff+0x10c>)
 8006faa:	4602      	mov	r2, r0
 8006fac:	f240 2132 	movw	r1, #562	; 0x232
 8006fb0:	4839      	ldr	r0, [pc, #228]	; (8007098 <__mdiff+0x110>)
 8006fb2:	f000 fda1 	bl	8007af8 <__assert_func>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006fbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc0:	bfa4      	itt	ge
 8006fc2:	4643      	movge	r3, r8
 8006fc4:	46a0      	movge	r8, r4
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006fcc:	bfa6      	itte	ge
 8006fce:	461c      	movge	r4, r3
 8006fd0:	2500      	movge	r5, #0
 8006fd2:	2501      	movlt	r5, #1
 8006fd4:	f7ff fd3a 	bl	8006a4c <_Balloc>
 8006fd8:	b920      	cbnz	r0, 8006fe4 <__mdiff+0x5c>
 8006fda:	4b2e      	ldr	r3, [pc, #184]	; (8007094 <__mdiff+0x10c>)
 8006fdc:	4602      	mov	r2, r0
 8006fde:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006fe2:	e7e5      	b.n	8006fb0 <__mdiff+0x28>
 8006fe4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006fe8:	6926      	ldr	r6, [r4, #16]
 8006fea:	60c5      	str	r5, [r0, #12]
 8006fec:	f104 0914 	add.w	r9, r4, #20
 8006ff0:	f108 0514 	add.w	r5, r8, #20
 8006ff4:	f100 0e14 	add.w	lr, r0, #20
 8006ff8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006ffc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007000:	f108 0210 	add.w	r2, r8, #16
 8007004:	46f2      	mov	sl, lr
 8007006:	2100      	movs	r1, #0
 8007008:	f859 3b04 	ldr.w	r3, [r9], #4
 800700c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007010:	fa1f f883 	uxth.w	r8, r3
 8007014:	fa11 f18b 	uxtah	r1, r1, fp
 8007018:	0c1b      	lsrs	r3, r3, #16
 800701a:	eba1 0808 	sub.w	r8, r1, r8
 800701e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007022:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007026:	fa1f f888 	uxth.w	r8, r8
 800702a:	1419      	asrs	r1, r3, #16
 800702c:	454e      	cmp	r6, r9
 800702e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007032:	f84a 3b04 	str.w	r3, [sl], #4
 8007036:	d8e7      	bhi.n	8007008 <__mdiff+0x80>
 8007038:	1b33      	subs	r3, r6, r4
 800703a:	3b15      	subs	r3, #21
 800703c:	f023 0303 	bic.w	r3, r3, #3
 8007040:	3304      	adds	r3, #4
 8007042:	3415      	adds	r4, #21
 8007044:	42a6      	cmp	r6, r4
 8007046:	bf38      	it	cc
 8007048:	2304      	movcc	r3, #4
 800704a:	441d      	add	r5, r3
 800704c:	4473      	add	r3, lr
 800704e:	469e      	mov	lr, r3
 8007050:	462e      	mov	r6, r5
 8007052:	4566      	cmp	r6, ip
 8007054:	d30e      	bcc.n	8007074 <__mdiff+0xec>
 8007056:	f10c 0203 	add.w	r2, ip, #3
 800705a:	1b52      	subs	r2, r2, r5
 800705c:	f022 0203 	bic.w	r2, r2, #3
 8007060:	3d03      	subs	r5, #3
 8007062:	45ac      	cmp	ip, r5
 8007064:	bf38      	it	cc
 8007066:	2200      	movcc	r2, #0
 8007068:	441a      	add	r2, r3
 800706a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800706e:	b17b      	cbz	r3, 8007090 <__mdiff+0x108>
 8007070:	6107      	str	r7, [r0, #16]
 8007072:	e7a3      	b.n	8006fbc <__mdiff+0x34>
 8007074:	f856 8b04 	ldr.w	r8, [r6], #4
 8007078:	fa11 f288 	uxtah	r2, r1, r8
 800707c:	1414      	asrs	r4, r2, #16
 800707e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007082:	b292      	uxth	r2, r2
 8007084:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007088:	f84e 2b04 	str.w	r2, [lr], #4
 800708c:	1421      	asrs	r1, r4, #16
 800708e:	e7e0      	b.n	8007052 <__mdiff+0xca>
 8007090:	3f01      	subs	r7, #1
 8007092:	e7ea      	b.n	800706a <__mdiff+0xe2>
 8007094:	08008177 	.word	0x08008177
 8007098:	080081e8 	.word	0x080081e8

0800709c <__d2b>:
 800709c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80070a0:	4689      	mov	r9, r1
 80070a2:	2101      	movs	r1, #1
 80070a4:	ec57 6b10 	vmov	r6, r7, d0
 80070a8:	4690      	mov	r8, r2
 80070aa:	f7ff fccf 	bl	8006a4c <_Balloc>
 80070ae:	4604      	mov	r4, r0
 80070b0:	b930      	cbnz	r0, 80070c0 <__d2b+0x24>
 80070b2:	4602      	mov	r2, r0
 80070b4:	4b25      	ldr	r3, [pc, #148]	; (800714c <__d2b+0xb0>)
 80070b6:	4826      	ldr	r0, [pc, #152]	; (8007150 <__d2b+0xb4>)
 80070b8:	f240 310a 	movw	r1, #778	; 0x30a
 80070bc:	f000 fd1c 	bl	8007af8 <__assert_func>
 80070c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80070c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80070c8:	bb35      	cbnz	r5, 8007118 <__d2b+0x7c>
 80070ca:	2e00      	cmp	r6, #0
 80070cc:	9301      	str	r3, [sp, #4]
 80070ce:	d028      	beq.n	8007122 <__d2b+0x86>
 80070d0:	4668      	mov	r0, sp
 80070d2:	9600      	str	r6, [sp, #0]
 80070d4:	f7ff fd82 	bl	8006bdc <__lo0bits>
 80070d8:	9900      	ldr	r1, [sp, #0]
 80070da:	b300      	cbz	r0, 800711e <__d2b+0x82>
 80070dc:	9a01      	ldr	r2, [sp, #4]
 80070de:	f1c0 0320 	rsb	r3, r0, #32
 80070e2:	fa02 f303 	lsl.w	r3, r2, r3
 80070e6:	430b      	orrs	r3, r1
 80070e8:	40c2      	lsrs	r2, r0
 80070ea:	6163      	str	r3, [r4, #20]
 80070ec:	9201      	str	r2, [sp, #4]
 80070ee:	9b01      	ldr	r3, [sp, #4]
 80070f0:	61a3      	str	r3, [r4, #24]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	bf14      	ite	ne
 80070f6:	2202      	movne	r2, #2
 80070f8:	2201      	moveq	r2, #1
 80070fa:	6122      	str	r2, [r4, #16]
 80070fc:	b1d5      	cbz	r5, 8007134 <__d2b+0x98>
 80070fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007102:	4405      	add	r5, r0
 8007104:	f8c9 5000 	str.w	r5, [r9]
 8007108:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800710c:	f8c8 0000 	str.w	r0, [r8]
 8007110:	4620      	mov	r0, r4
 8007112:	b003      	add	sp, #12
 8007114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007118:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800711c:	e7d5      	b.n	80070ca <__d2b+0x2e>
 800711e:	6161      	str	r1, [r4, #20]
 8007120:	e7e5      	b.n	80070ee <__d2b+0x52>
 8007122:	a801      	add	r0, sp, #4
 8007124:	f7ff fd5a 	bl	8006bdc <__lo0bits>
 8007128:	9b01      	ldr	r3, [sp, #4]
 800712a:	6163      	str	r3, [r4, #20]
 800712c:	2201      	movs	r2, #1
 800712e:	6122      	str	r2, [r4, #16]
 8007130:	3020      	adds	r0, #32
 8007132:	e7e3      	b.n	80070fc <__d2b+0x60>
 8007134:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007138:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800713c:	f8c9 0000 	str.w	r0, [r9]
 8007140:	6918      	ldr	r0, [r3, #16]
 8007142:	f7ff fd2b 	bl	8006b9c <__hi0bits>
 8007146:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800714a:	e7df      	b.n	800710c <__d2b+0x70>
 800714c:	08008177 	.word	0x08008177
 8007150:	080081e8 	.word	0x080081e8

08007154 <_calloc_r>:
 8007154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007156:	fba1 2402 	umull	r2, r4, r1, r2
 800715a:	b94c      	cbnz	r4, 8007170 <_calloc_r+0x1c>
 800715c:	4611      	mov	r1, r2
 800715e:	9201      	str	r2, [sp, #4]
 8007160:	f000 f87a 	bl	8007258 <_malloc_r>
 8007164:	9a01      	ldr	r2, [sp, #4]
 8007166:	4605      	mov	r5, r0
 8007168:	b930      	cbnz	r0, 8007178 <_calloc_r+0x24>
 800716a:	4628      	mov	r0, r5
 800716c:	b003      	add	sp, #12
 800716e:	bd30      	pop	{r4, r5, pc}
 8007170:	220c      	movs	r2, #12
 8007172:	6002      	str	r2, [r0, #0]
 8007174:	2500      	movs	r5, #0
 8007176:	e7f8      	b.n	800716a <_calloc_r+0x16>
 8007178:	4621      	mov	r1, r4
 800717a:	f7fe f82d 	bl	80051d8 <memset>
 800717e:	e7f4      	b.n	800716a <_calloc_r+0x16>

08007180 <_free_r>:
 8007180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007182:	2900      	cmp	r1, #0
 8007184:	d044      	beq.n	8007210 <_free_r+0x90>
 8007186:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800718a:	9001      	str	r0, [sp, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	f1a1 0404 	sub.w	r4, r1, #4
 8007192:	bfb8      	it	lt
 8007194:	18e4      	addlt	r4, r4, r3
 8007196:	f000 fe55 	bl	8007e44 <__malloc_lock>
 800719a:	4a1e      	ldr	r2, [pc, #120]	; (8007214 <_free_r+0x94>)
 800719c:	9801      	ldr	r0, [sp, #4]
 800719e:	6813      	ldr	r3, [r2, #0]
 80071a0:	b933      	cbnz	r3, 80071b0 <_free_r+0x30>
 80071a2:	6063      	str	r3, [r4, #4]
 80071a4:	6014      	str	r4, [r2, #0]
 80071a6:	b003      	add	sp, #12
 80071a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071ac:	f000 be50 	b.w	8007e50 <__malloc_unlock>
 80071b0:	42a3      	cmp	r3, r4
 80071b2:	d908      	bls.n	80071c6 <_free_r+0x46>
 80071b4:	6825      	ldr	r5, [r4, #0]
 80071b6:	1961      	adds	r1, r4, r5
 80071b8:	428b      	cmp	r3, r1
 80071ba:	bf01      	itttt	eq
 80071bc:	6819      	ldreq	r1, [r3, #0]
 80071be:	685b      	ldreq	r3, [r3, #4]
 80071c0:	1949      	addeq	r1, r1, r5
 80071c2:	6021      	streq	r1, [r4, #0]
 80071c4:	e7ed      	b.n	80071a2 <_free_r+0x22>
 80071c6:	461a      	mov	r2, r3
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	b10b      	cbz	r3, 80071d0 <_free_r+0x50>
 80071cc:	42a3      	cmp	r3, r4
 80071ce:	d9fa      	bls.n	80071c6 <_free_r+0x46>
 80071d0:	6811      	ldr	r1, [r2, #0]
 80071d2:	1855      	adds	r5, r2, r1
 80071d4:	42a5      	cmp	r5, r4
 80071d6:	d10b      	bne.n	80071f0 <_free_r+0x70>
 80071d8:	6824      	ldr	r4, [r4, #0]
 80071da:	4421      	add	r1, r4
 80071dc:	1854      	adds	r4, r2, r1
 80071de:	42a3      	cmp	r3, r4
 80071e0:	6011      	str	r1, [r2, #0]
 80071e2:	d1e0      	bne.n	80071a6 <_free_r+0x26>
 80071e4:	681c      	ldr	r4, [r3, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	6053      	str	r3, [r2, #4]
 80071ea:	4421      	add	r1, r4
 80071ec:	6011      	str	r1, [r2, #0]
 80071ee:	e7da      	b.n	80071a6 <_free_r+0x26>
 80071f0:	d902      	bls.n	80071f8 <_free_r+0x78>
 80071f2:	230c      	movs	r3, #12
 80071f4:	6003      	str	r3, [r0, #0]
 80071f6:	e7d6      	b.n	80071a6 <_free_r+0x26>
 80071f8:	6825      	ldr	r5, [r4, #0]
 80071fa:	1961      	adds	r1, r4, r5
 80071fc:	428b      	cmp	r3, r1
 80071fe:	bf04      	itt	eq
 8007200:	6819      	ldreq	r1, [r3, #0]
 8007202:	685b      	ldreq	r3, [r3, #4]
 8007204:	6063      	str	r3, [r4, #4]
 8007206:	bf04      	itt	eq
 8007208:	1949      	addeq	r1, r1, r5
 800720a:	6021      	streq	r1, [r4, #0]
 800720c:	6054      	str	r4, [r2, #4]
 800720e:	e7ca      	b.n	80071a6 <_free_r+0x26>
 8007210:	b003      	add	sp, #12
 8007212:	bd30      	pop	{r4, r5, pc}
 8007214:	20000378 	.word	0x20000378

08007218 <sbrk_aligned>:
 8007218:	b570      	push	{r4, r5, r6, lr}
 800721a:	4e0e      	ldr	r6, [pc, #56]	; (8007254 <sbrk_aligned+0x3c>)
 800721c:	460c      	mov	r4, r1
 800721e:	6831      	ldr	r1, [r6, #0]
 8007220:	4605      	mov	r5, r0
 8007222:	b911      	cbnz	r1, 800722a <sbrk_aligned+0x12>
 8007224:	f000 fb42 	bl	80078ac <_sbrk_r>
 8007228:	6030      	str	r0, [r6, #0]
 800722a:	4621      	mov	r1, r4
 800722c:	4628      	mov	r0, r5
 800722e:	f000 fb3d 	bl	80078ac <_sbrk_r>
 8007232:	1c43      	adds	r3, r0, #1
 8007234:	d00a      	beq.n	800724c <sbrk_aligned+0x34>
 8007236:	1cc4      	adds	r4, r0, #3
 8007238:	f024 0403 	bic.w	r4, r4, #3
 800723c:	42a0      	cmp	r0, r4
 800723e:	d007      	beq.n	8007250 <sbrk_aligned+0x38>
 8007240:	1a21      	subs	r1, r4, r0
 8007242:	4628      	mov	r0, r5
 8007244:	f000 fb32 	bl	80078ac <_sbrk_r>
 8007248:	3001      	adds	r0, #1
 800724a:	d101      	bne.n	8007250 <sbrk_aligned+0x38>
 800724c:	f04f 34ff 	mov.w	r4, #4294967295
 8007250:	4620      	mov	r0, r4
 8007252:	bd70      	pop	{r4, r5, r6, pc}
 8007254:	2000037c 	.word	0x2000037c

08007258 <_malloc_r>:
 8007258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800725c:	1ccd      	adds	r5, r1, #3
 800725e:	f025 0503 	bic.w	r5, r5, #3
 8007262:	3508      	adds	r5, #8
 8007264:	2d0c      	cmp	r5, #12
 8007266:	bf38      	it	cc
 8007268:	250c      	movcc	r5, #12
 800726a:	2d00      	cmp	r5, #0
 800726c:	4607      	mov	r7, r0
 800726e:	db01      	blt.n	8007274 <_malloc_r+0x1c>
 8007270:	42a9      	cmp	r1, r5
 8007272:	d905      	bls.n	8007280 <_malloc_r+0x28>
 8007274:	230c      	movs	r3, #12
 8007276:	603b      	str	r3, [r7, #0]
 8007278:	2600      	movs	r6, #0
 800727a:	4630      	mov	r0, r6
 800727c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007280:	4e2e      	ldr	r6, [pc, #184]	; (800733c <_malloc_r+0xe4>)
 8007282:	f000 fddf 	bl	8007e44 <__malloc_lock>
 8007286:	6833      	ldr	r3, [r6, #0]
 8007288:	461c      	mov	r4, r3
 800728a:	bb34      	cbnz	r4, 80072da <_malloc_r+0x82>
 800728c:	4629      	mov	r1, r5
 800728e:	4638      	mov	r0, r7
 8007290:	f7ff ffc2 	bl	8007218 <sbrk_aligned>
 8007294:	1c43      	adds	r3, r0, #1
 8007296:	4604      	mov	r4, r0
 8007298:	d14d      	bne.n	8007336 <_malloc_r+0xde>
 800729a:	6834      	ldr	r4, [r6, #0]
 800729c:	4626      	mov	r6, r4
 800729e:	2e00      	cmp	r6, #0
 80072a0:	d140      	bne.n	8007324 <_malloc_r+0xcc>
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	4631      	mov	r1, r6
 80072a6:	4638      	mov	r0, r7
 80072a8:	eb04 0803 	add.w	r8, r4, r3
 80072ac:	f000 fafe 	bl	80078ac <_sbrk_r>
 80072b0:	4580      	cmp	r8, r0
 80072b2:	d13a      	bne.n	800732a <_malloc_r+0xd2>
 80072b4:	6821      	ldr	r1, [r4, #0]
 80072b6:	3503      	adds	r5, #3
 80072b8:	1a6d      	subs	r5, r5, r1
 80072ba:	f025 0503 	bic.w	r5, r5, #3
 80072be:	3508      	adds	r5, #8
 80072c0:	2d0c      	cmp	r5, #12
 80072c2:	bf38      	it	cc
 80072c4:	250c      	movcc	r5, #12
 80072c6:	4629      	mov	r1, r5
 80072c8:	4638      	mov	r0, r7
 80072ca:	f7ff ffa5 	bl	8007218 <sbrk_aligned>
 80072ce:	3001      	adds	r0, #1
 80072d0:	d02b      	beq.n	800732a <_malloc_r+0xd2>
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	442b      	add	r3, r5
 80072d6:	6023      	str	r3, [r4, #0]
 80072d8:	e00e      	b.n	80072f8 <_malloc_r+0xa0>
 80072da:	6822      	ldr	r2, [r4, #0]
 80072dc:	1b52      	subs	r2, r2, r5
 80072de:	d41e      	bmi.n	800731e <_malloc_r+0xc6>
 80072e0:	2a0b      	cmp	r2, #11
 80072e2:	d916      	bls.n	8007312 <_malloc_r+0xba>
 80072e4:	1961      	adds	r1, r4, r5
 80072e6:	42a3      	cmp	r3, r4
 80072e8:	6025      	str	r5, [r4, #0]
 80072ea:	bf18      	it	ne
 80072ec:	6059      	strne	r1, [r3, #4]
 80072ee:	6863      	ldr	r3, [r4, #4]
 80072f0:	bf08      	it	eq
 80072f2:	6031      	streq	r1, [r6, #0]
 80072f4:	5162      	str	r2, [r4, r5]
 80072f6:	604b      	str	r3, [r1, #4]
 80072f8:	4638      	mov	r0, r7
 80072fa:	f104 060b 	add.w	r6, r4, #11
 80072fe:	f000 fda7 	bl	8007e50 <__malloc_unlock>
 8007302:	f026 0607 	bic.w	r6, r6, #7
 8007306:	1d23      	adds	r3, r4, #4
 8007308:	1af2      	subs	r2, r6, r3
 800730a:	d0b6      	beq.n	800727a <_malloc_r+0x22>
 800730c:	1b9b      	subs	r3, r3, r6
 800730e:	50a3      	str	r3, [r4, r2]
 8007310:	e7b3      	b.n	800727a <_malloc_r+0x22>
 8007312:	6862      	ldr	r2, [r4, #4]
 8007314:	42a3      	cmp	r3, r4
 8007316:	bf0c      	ite	eq
 8007318:	6032      	streq	r2, [r6, #0]
 800731a:	605a      	strne	r2, [r3, #4]
 800731c:	e7ec      	b.n	80072f8 <_malloc_r+0xa0>
 800731e:	4623      	mov	r3, r4
 8007320:	6864      	ldr	r4, [r4, #4]
 8007322:	e7b2      	b.n	800728a <_malloc_r+0x32>
 8007324:	4634      	mov	r4, r6
 8007326:	6876      	ldr	r6, [r6, #4]
 8007328:	e7b9      	b.n	800729e <_malloc_r+0x46>
 800732a:	230c      	movs	r3, #12
 800732c:	603b      	str	r3, [r7, #0]
 800732e:	4638      	mov	r0, r7
 8007330:	f000 fd8e 	bl	8007e50 <__malloc_unlock>
 8007334:	e7a1      	b.n	800727a <_malloc_r+0x22>
 8007336:	6025      	str	r5, [r4, #0]
 8007338:	e7de      	b.n	80072f8 <_malloc_r+0xa0>
 800733a:	bf00      	nop
 800733c:	20000378 	.word	0x20000378

08007340 <__ssputs_r>:
 8007340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007344:	688e      	ldr	r6, [r1, #8]
 8007346:	429e      	cmp	r6, r3
 8007348:	4682      	mov	sl, r0
 800734a:	460c      	mov	r4, r1
 800734c:	4690      	mov	r8, r2
 800734e:	461f      	mov	r7, r3
 8007350:	d838      	bhi.n	80073c4 <__ssputs_r+0x84>
 8007352:	898a      	ldrh	r2, [r1, #12]
 8007354:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007358:	d032      	beq.n	80073c0 <__ssputs_r+0x80>
 800735a:	6825      	ldr	r5, [r4, #0]
 800735c:	6909      	ldr	r1, [r1, #16]
 800735e:	eba5 0901 	sub.w	r9, r5, r1
 8007362:	6965      	ldr	r5, [r4, #20]
 8007364:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007368:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800736c:	3301      	adds	r3, #1
 800736e:	444b      	add	r3, r9
 8007370:	106d      	asrs	r5, r5, #1
 8007372:	429d      	cmp	r5, r3
 8007374:	bf38      	it	cc
 8007376:	461d      	movcc	r5, r3
 8007378:	0553      	lsls	r3, r2, #21
 800737a:	d531      	bpl.n	80073e0 <__ssputs_r+0xa0>
 800737c:	4629      	mov	r1, r5
 800737e:	f7ff ff6b 	bl	8007258 <_malloc_r>
 8007382:	4606      	mov	r6, r0
 8007384:	b950      	cbnz	r0, 800739c <__ssputs_r+0x5c>
 8007386:	230c      	movs	r3, #12
 8007388:	f8ca 3000 	str.w	r3, [sl]
 800738c:	89a3      	ldrh	r3, [r4, #12]
 800738e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007392:	81a3      	strh	r3, [r4, #12]
 8007394:	f04f 30ff 	mov.w	r0, #4294967295
 8007398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800739c:	6921      	ldr	r1, [r4, #16]
 800739e:	464a      	mov	r2, r9
 80073a0:	f7ff fb46 	bl	8006a30 <memcpy>
 80073a4:	89a3      	ldrh	r3, [r4, #12]
 80073a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ae:	81a3      	strh	r3, [r4, #12]
 80073b0:	6126      	str	r6, [r4, #16]
 80073b2:	6165      	str	r5, [r4, #20]
 80073b4:	444e      	add	r6, r9
 80073b6:	eba5 0509 	sub.w	r5, r5, r9
 80073ba:	6026      	str	r6, [r4, #0]
 80073bc:	60a5      	str	r5, [r4, #8]
 80073be:	463e      	mov	r6, r7
 80073c0:	42be      	cmp	r6, r7
 80073c2:	d900      	bls.n	80073c6 <__ssputs_r+0x86>
 80073c4:	463e      	mov	r6, r7
 80073c6:	6820      	ldr	r0, [r4, #0]
 80073c8:	4632      	mov	r2, r6
 80073ca:	4641      	mov	r1, r8
 80073cc:	f000 fd20 	bl	8007e10 <memmove>
 80073d0:	68a3      	ldr	r3, [r4, #8]
 80073d2:	1b9b      	subs	r3, r3, r6
 80073d4:	60a3      	str	r3, [r4, #8]
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	4433      	add	r3, r6
 80073da:	6023      	str	r3, [r4, #0]
 80073dc:	2000      	movs	r0, #0
 80073de:	e7db      	b.n	8007398 <__ssputs_r+0x58>
 80073e0:	462a      	mov	r2, r5
 80073e2:	f000 fd3b 	bl	8007e5c <_realloc_r>
 80073e6:	4606      	mov	r6, r0
 80073e8:	2800      	cmp	r0, #0
 80073ea:	d1e1      	bne.n	80073b0 <__ssputs_r+0x70>
 80073ec:	6921      	ldr	r1, [r4, #16]
 80073ee:	4650      	mov	r0, sl
 80073f0:	f7ff fec6 	bl	8007180 <_free_r>
 80073f4:	e7c7      	b.n	8007386 <__ssputs_r+0x46>
	...

080073f8 <_svfiprintf_r>:
 80073f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fc:	4698      	mov	r8, r3
 80073fe:	898b      	ldrh	r3, [r1, #12]
 8007400:	061b      	lsls	r3, r3, #24
 8007402:	b09d      	sub	sp, #116	; 0x74
 8007404:	4607      	mov	r7, r0
 8007406:	460d      	mov	r5, r1
 8007408:	4614      	mov	r4, r2
 800740a:	d50e      	bpl.n	800742a <_svfiprintf_r+0x32>
 800740c:	690b      	ldr	r3, [r1, #16]
 800740e:	b963      	cbnz	r3, 800742a <_svfiprintf_r+0x32>
 8007410:	2140      	movs	r1, #64	; 0x40
 8007412:	f7ff ff21 	bl	8007258 <_malloc_r>
 8007416:	6028      	str	r0, [r5, #0]
 8007418:	6128      	str	r0, [r5, #16]
 800741a:	b920      	cbnz	r0, 8007426 <_svfiprintf_r+0x2e>
 800741c:	230c      	movs	r3, #12
 800741e:	603b      	str	r3, [r7, #0]
 8007420:	f04f 30ff 	mov.w	r0, #4294967295
 8007424:	e0d1      	b.n	80075ca <_svfiprintf_r+0x1d2>
 8007426:	2340      	movs	r3, #64	; 0x40
 8007428:	616b      	str	r3, [r5, #20]
 800742a:	2300      	movs	r3, #0
 800742c:	9309      	str	r3, [sp, #36]	; 0x24
 800742e:	2320      	movs	r3, #32
 8007430:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007434:	f8cd 800c 	str.w	r8, [sp, #12]
 8007438:	2330      	movs	r3, #48	; 0x30
 800743a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80075e4 <_svfiprintf_r+0x1ec>
 800743e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007442:	f04f 0901 	mov.w	r9, #1
 8007446:	4623      	mov	r3, r4
 8007448:	469a      	mov	sl, r3
 800744a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800744e:	b10a      	cbz	r2, 8007454 <_svfiprintf_r+0x5c>
 8007450:	2a25      	cmp	r2, #37	; 0x25
 8007452:	d1f9      	bne.n	8007448 <_svfiprintf_r+0x50>
 8007454:	ebba 0b04 	subs.w	fp, sl, r4
 8007458:	d00b      	beq.n	8007472 <_svfiprintf_r+0x7a>
 800745a:	465b      	mov	r3, fp
 800745c:	4622      	mov	r2, r4
 800745e:	4629      	mov	r1, r5
 8007460:	4638      	mov	r0, r7
 8007462:	f7ff ff6d 	bl	8007340 <__ssputs_r>
 8007466:	3001      	adds	r0, #1
 8007468:	f000 80aa 	beq.w	80075c0 <_svfiprintf_r+0x1c8>
 800746c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800746e:	445a      	add	r2, fp
 8007470:	9209      	str	r2, [sp, #36]	; 0x24
 8007472:	f89a 3000 	ldrb.w	r3, [sl]
 8007476:	2b00      	cmp	r3, #0
 8007478:	f000 80a2 	beq.w	80075c0 <_svfiprintf_r+0x1c8>
 800747c:	2300      	movs	r3, #0
 800747e:	f04f 32ff 	mov.w	r2, #4294967295
 8007482:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007486:	f10a 0a01 	add.w	sl, sl, #1
 800748a:	9304      	str	r3, [sp, #16]
 800748c:	9307      	str	r3, [sp, #28]
 800748e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007492:	931a      	str	r3, [sp, #104]	; 0x68
 8007494:	4654      	mov	r4, sl
 8007496:	2205      	movs	r2, #5
 8007498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800749c:	4851      	ldr	r0, [pc, #324]	; (80075e4 <_svfiprintf_r+0x1ec>)
 800749e:	f7f8 fea7 	bl	80001f0 <memchr>
 80074a2:	9a04      	ldr	r2, [sp, #16]
 80074a4:	b9d8      	cbnz	r0, 80074de <_svfiprintf_r+0xe6>
 80074a6:	06d0      	lsls	r0, r2, #27
 80074a8:	bf44      	itt	mi
 80074aa:	2320      	movmi	r3, #32
 80074ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074b0:	0711      	lsls	r1, r2, #28
 80074b2:	bf44      	itt	mi
 80074b4:	232b      	movmi	r3, #43	; 0x2b
 80074b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074ba:	f89a 3000 	ldrb.w	r3, [sl]
 80074be:	2b2a      	cmp	r3, #42	; 0x2a
 80074c0:	d015      	beq.n	80074ee <_svfiprintf_r+0xf6>
 80074c2:	9a07      	ldr	r2, [sp, #28]
 80074c4:	4654      	mov	r4, sl
 80074c6:	2000      	movs	r0, #0
 80074c8:	f04f 0c0a 	mov.w	ip, #10
 80074cc:	4621      	mov	r1, r4
 80074ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074d2:	3b30      	subs	r3, #48	; 0x30
 80074d4:	2b09      	cmp	r3, #9
 80074d6:	d94e      	bls.n	8007576 <_svfiprintf_r+0x17e>
 80074d8:	b1b0      	cbz	r0, 8007508 <_svfiprintf_r+0x110>
 80074da:	9207      	str	r2, [sp, #28]
 80074dc:	e014      	b.n	8007508 <_svfiprintf_r+0x110>
 80074de:	eba0 0308 	sub.w	r3, r0, r8
 80074e2:	fa09 f303 	lsl.w	r3, r9, r3
 80074e6:	4313      	orrs	r3, r2
 80074e8:	9304      	str	r3, [sp, #16]
 80074ea:	46a2      	mov	sl, r4
 80074ec:	e7d2      	b.n	8007494 <_svfiprintf_r+0x9c>
 80074ee:	9b03      	ldr	r3, [sp, #12]
 80074f0:	1d19      	adds	r1, r3, #4
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	9103      	str	r1, [sp, #12]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	bfbb      	ittet	lt
 80074fa:	425b      	neglt	r3, r3
 80074fc:	f042 0202 	orrlt.w	r2, r2, #2
 8007500:	9307      	strge	r3, [sp, #28]
 8007502:	9307      	strlt	r3, [sp, #28]
 8007504:	bfb8      	it	lt
 8007506:	9204      	strlt	r2, [sp, #16]
 8007508:	7823      	ldrb	r3, [r4, #0]
 800750a:	2b2e      	cmp	r3, #46	; 0x2e
 800750c:	d10c      	bne.n	8007528 <_svfiprintf_r+0x130>
 800750e:	7863      	ldrb	r3, [r4, #1]
 8007510:	2b2a      	cmp	r3, #42	; 0x2a
 8007512:	d135      	bne.n	8007580 <_svfiprintf_r+0x188>
 8007514:	9b03      	ldr	r3, [sp, #12]
 8007516:	1d1a      	adds	r2, r3, #4
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	9203      	str	r2, [sp, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	bfb8      	it	lt
 8007520:	f04f 33ff 	movlt.w	r3, #4294967295
 8007524:	3402      	adds	r4, #2
 8007526:	9305      	str	r3, [sp, #20]
 8007528:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80075f4 <_svfiprintf_r+0x1fc>
 800752c:	7821      	ldrb	r1, [r4, #0]
 800752e:	2203      	movs	r2, #3
 8007530:	4650      	mov	r0, sl
 8007532:	f7f8 fe5d 	bl	80001f0 <memchr>
 8007536:	b140      	cbz	r0, 800754a <_svfiprintf_r+0x152>
 8007538:	2340      	movs	r3, #64	; 0x40
 800753a:	eba0 000a 	sub.w	r0, r0, sl
 800753e:	fa03 f000 	lsl.w	r0, r3, r0
 8007542:	9b04      	ldr	r3, [sp, #16]
 8007544:	4303      	orrs	r3, r0
 8007546:	3401      	adds	r4, #1
 8007548:	9304      	str	r3, [sp, #16]
 800754a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800754e:	4826      	ldr	r0, [pc, #152]	; (80075e8 <_svfiprintf_r+0x1f0>)
 8007550:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007554:	2206      	movs	r2, #6
 8007556:	f7f8 fe4b 	bl	80001f0 <memchr>
 800755a:	2800      	cmp	r0, #0
 800755c:	d038      	beq.n	80075d0 <_svfiprintf_r+0x1d8>
 800755e:	4b23      	ldr	r3, [pc, #140]	; (80075ec <_svfiprintf_r+0x1f4>)
 8007560:	bb1b      	cbnz	r3, 80075aa <_svfiprintf_r+0x1b2>
 8007562:	9b03      	ldr	r3, [sp, #12]
 8007564:	3307      	adds	r3, #7
 8007566:	f023 0307 	bic.w	r3, r3, #7
 800756a:	3308      	adds	r3, #8
 800756c:	9303      	str	r3, [sp, #12]
 800756e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007570:	4433      	add	r3, r6
 8007572:	9309      	str	r3, [sp, #36]	; 0x24
 8007574:	e767      	b.n	8007446 <_svfiprintf_r+0x4e>
 8007576:	fb0c 3202 	mla	r2, ip, r2, r3
 800757a:	460c      	mov	r4, r1
 800757c:	2001      	movs	r0, #1
 800757e:	e7a5      	b.n	80074cc <_svfiprintf_r+0xd4>
 8007580:	2300      	movs	r3, #0
 8007582:	3401      	adds	r4, #1
 8007584:	9305      	str	r3, [sp, #20]
 8007586:	4619      	mov	r1, r3
 8007588:	f04f 0c0a 	mov.w	ip, #10
 800758c:	4620      	mov	r0, r4
 800758e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007592:	3a30      	subs	r2, #48	; 0x30
 8007594:	2a09      	cmp	r2, #9
 8007596:	d903      	bls.n	80075a0 <_svfiprintf_r+0x1a8>
 8007598:	2b00      	cmp	r3, #0
 800759a:	d0c5      	beq.n	8007528 <_svfiprintf_r+0x130>
 800759c:	9105      	str	r1, [sp, #20]
 800759e:	e7c3      	b.n	8007528 <_svfiprintf_r+0x130>
 80075a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80075a4:	4604      	mov	r4, r0
 80075a6:	2301      	movs	r3, #1
 80075a8:	e7f0      	b.n	800758c <_svfiprintf_r+0x194>
 80075aa:	ab03      	add	r3, sp, #12
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	462a      	mov	r2, r5
 80075b0:	4b0f      	ldr	r3, [pc, #60]	; (80075f0 <_svfiprintf_r+0x1f8>)
 80075b2:	a904      	add	r1, sp, #16
 80075b4:	4638      	mov	r0, r7
 80075b6:	f7fd feb7 	bl	8005328 <_printf_float>
 80075ba:	1c42      	adds	r2, r0, #1
 80075bc:	4606      	mov	r6, r0
 80075be:	d1d6      	bne.n	800756e <_svfiprintf_r+0x176>
 80075c0:	89ab      	ldrh	r3, [r5, #12]
 80075c2:	065b      	lsls	r3, r3, #25
 80075c4:	f53f af2c 	bmi.w	8007420 <_svfiprintf_r+0x28>
 80075c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075ca:	b01d      	add	sp, #116	; 0x74
 80075cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d0:	ab03      	add	r3, sp, #12
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	462a      	mov	r2, r5
 80075d6:	4b06      	ldr	r3, [pc, #24]	; (80075f0 <_svfiprintf_r+0x1f8>)
 80075d8:	a904      	add	r1, sp, #16
 80075da:	4638      	mov	r0, r7
 80075dc:	f7fe f948 	bl	8005870 <_printf_i>
 80075e0:	e7eb      	b.n	80075ba <_svfiprintf_r+0x1c2>
 80075e2:	bf00      	nop
 80075e4:	08008344 	.word	0x08008344
 80075e8:	0800834e 	.word	0x0800834e
 80075ec:	08005329 	.word	0x08005329
 80075f0:	08007341 	.word	0x08007341
 80075f4:	0800834a 	.word	0x0800834a

080075f8 <__sfputc_r>:
 80075f8:	6893      	ldr	r3, [r2, #8]
 80075fa:	3b01      	subs	r3, #1
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	b410      	push	{r4}
 8007600:	6093      	str	r3, [r2, #8]
 8007602:	da08      	bge.n	8007616 <__sfputc_r+0x1e>
 8007604:	6994      	ldr	r4, [r2, #24]
 8007606:	42a3      	cmp	r3, r4
 8007608:	db01      	blt.n	800760e <__sfputc_r+0x16>
 800760a:	290a      	cmp	r1, #10
 800760c:	d103      	bne.n	8007616 <__sfputc_r+0x1e>
 800760e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007612:	f000 b99f 	b.w	8007954 <__swbuf_r>
 8007616:	6813      	ldr	r3, [r2, #0]
 8007618:	1c58      	adds	r0, r3, #1
 800761a:	6010      	str	r0, [r2, #0]
 800761c:	7019      	strb	r1, [r3, #0]
 800761e:	4608      	mov	r0, r1
 8007620:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007624:	4770      	bx	lr

08007626 <__sfputs_r>:
 8007626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007628:	4606      	mov	r6, r0
 800762a:	460f      	mov	r7, r1
 800762c:	4614      	mov	r4, r2
 800762e:	18d5      	adds	r5, r2, r3
 8007630:	42ac      	cmp	r4, r5
 8007632:	d101      	bne.n	8007638 <__sfputs_r+0x12>
 8007634:	2000      	movs	r0, #0
 8007636:	e007      	b.n	8007648 <__sfputs_r+0x22>
 8007638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800763c:	463a      	mov	r2, r7
 800763e:	4630      	mov	r0, r6
 8007640:	f7ff ffda 	bl	80075f8 <__sfputc_r>
 8007644:	1c43      	adds	r3, r0, #1
 8007646:	d1f3      	bne.n	8007630 <__sfputs_r+0xa>
 8007648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800764c <_vfiprintf_r>:
 800764c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007650:	460d      	mov	r5, r1
 8007652:	b09d      	sub	sp, #116	; 0x74
 8007654:	4614      	mov	r4, r2
 8007656:	4698      	mov	r8, r3
 8007658:	4606      	mov	r6, r0
 800765a:	b118      	cbz	r0, 8007664 <_vfiprintf_r+0x18>
 800765c:	6983      	ldr	r3, [r0, #24]
 800765e:	b90b      	cbnz	r3, 8007664 <_vfiprintf_r+0x18>
 8007660:	f7ff f938 	bl	80068d4 <__sinit>
 8007664:	4b89      	ldr	r3, [pc, #548]	; (800788c <_vfiprintf_r+0x240>)
 8007666:	429d      	cmp	r5, r3
 8007668:	d11b      	bne.n	80076a2 <_vfiprintf_r+0x56>
 800766a:	6875      	ldr	r5, [r6, #4]
 800766c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800766e:	07d9      	lsls	r1, r3, #31
 8007670:	d405      	bmi.n	800767e <_vfiprintf_r+0x32>
 8007672:	89ab      	ldrh	r3, [r5, #12]
 8007674:	059a      	lsls	r2, r3, #22
 8007676:	d402      	bmi.n	800767e <_vfiprintf_r+0x32>
 8007678:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800767a:	f7ff f9ce 	bl	8006a1a <__retarget_lock_acquire_recursive>
 800767e:	89ab      	ldrh	r3, [r5, #12]
 8007680:	071b      	lsls	r3, r3, #28
 8007682:	d501      	bpl.n	8007688 <_vfiprintf_r+0x3c>
 8007684:	692b      	ldr	r3, [r5, #16]
 8007686:	b9eb      	cbnz	r3, 80076c4 <_vfiprintf_r+0x78>
 8007688:	4629      	mov	r1, r5
 800768a:	4630      	mov	r0, r6
 800768c:	f000 f9c6 	bl	8007a1c <__swsetup_r>
 8007690:	b1c0      	cbz	r0, 80076c4 <_vfiprintf_r+0x78>
 8007692:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007694:	07dc      	lsls	r4, r3, #31
 8007696:	d50e      	bpl.n	80076b6 <_vfiprintf_r+0x6a>
 8007698:	f04f 30ff 	mov.w	r0, #4294967295
 800769c:	b01d      	add	sp, #116	; 0x74
 800769e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a2:	4b7b      	ldr	r3, [pc, #492]	; (8007890 <_vfiprintf_r+0x244>)
 80076a4:	429d      	cmp	r5, r3
 80076a6:	d101      	bne.n	80076ac <_vfiprintf_r+0x60>
 80076a8:	68b5      	ldr	r5, [r6, #8]
 80076aa:	e7df      	b.n	800766c <_vfiprintf_r+0x20>
 80076ac:	4b79      	ldr	r3, [pc, #484]	; (8007894 <_vfiprintf_r+0x248>)
 80076ae:	429d      	cmp	r5, r3
 80076b0:	bf08      	it	eq
 80076b2:	68f5      	ldreq	r5, [r6, #12]
 80076b4:	e7da      	b.n	800766c <_vfiprintf_r+0x20>
 80076b6:	89ab      	ldrh	r3, [r5, #12]
 80076b8:	0598      	lsls	r0, r3, #22
 80076ba:	d4ed      	bmi.n	8007698 <_vfiprintf_r+0x4c>
 80076bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076be:	f7ff f9ad 	bl	8006a1c <__retarget_lock_release_recursive>
 80076c2:	e7e9      	b.n	8007698 <_vfiprintf_r+0x4c>
 80076c4:	2300      	movs	r3, #0
 80076c6:	9309      	str	r3, [sp, #36]	; 0x24
 80076c8:	2320      	movs	r3, #32
 80076ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80076d2:	2330      	movs	r3, #48	; 0x30
 80076d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007898 <_vfiprintf_r+0x24c>
 80076d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076dc:	f04f 0901 	mov.w	r9, #1
 80076e0:	4623      	mov	r3, r4
 80076e2:	469a      	mov	sl, r3
 80076e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076e8:	b10a      	cbz	r2, 80076ee <_vfiprintf_r+0xa2>
 80076ea:	2a25      	cmp	r2, #37	; 0x25
 80076ec:	d1f9      	bne.n	80076e2 <_vfiprintf_r+0x96>
 80076ee:	ebba 0b04 	subs.w	fp, sl, r4
 80076f2:	d00b      	beq.n	800770c <_vfiprintf_r+0xc0>
 80076f4:	465b      	mov	r3, fp
 80076f6:	4622      	mov	r2, r4
 80076f8:	4629      	mov	r1, r5
 80076fa:	4630      	mov	r0, r6
 80076fc:	f7ff ff93 	bl	8007626 <__sfputs_r>
 8007700:	3001      	adds	r0, #1
 8007702:	f000 80aa 	beq.w	800785a <_vfiprintf_r+0x20e>
 8007706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007708:	445a      	add	r2, fp
 800770a:	9209      	str	r2, [sp, #36]	; 0x24
 800770c:	f89a 3000 	ldrb.w	r3, [sl]
 8007710:	2b00      	cmp	r3, #0
 8007712:	f000 80a2 	beq.w	800785a <_vfiprintf_r+0x20e>
 8007716:	2300      	movs	r3, #0
 8007718:	f04f 32ff 	mov.w	r2, #4294967295
 800771c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007720:	f10a 0a01 	add.w	sl, sl, #1
 8007724:	9304      	str	r3, [sp, #16]
 8007726:	9307      	str	r3, [sp, #28]
 8007728:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800772c:	931a      	str	r3, [sp, #104]	; 0x68
 800772e:	4654      	mov	r4, sl
 8007730:	2205      	movs	r2, #5
 8007732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007736:	4858      	ldr	r0, [pc, #352]	; (8007898 <_vfiprintf_r+0x24c>)
 8007738:	f7f8 fd5a 	bl	80001f0 <memchr>
 800773c:	9a04      	ldr	r2, [sp, #16]
 800773e:	b9d8      	cbnz	r0, 8007778 <_vfiprintf_r+0x12c>
 8007740:	06d1      	lsls	r1, r2, #27
 8007742:	bf44      	itt	mi
 8007744:	2320      	movmi	r3, #32
 8007746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800774a:	0713      	lsls	r3, r2, #28
 800774c:	bf44      	itt	mi
 800774e:	232b      	movmi	r3, #43	; 0x2b
 8007750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007754:	f89a 3000 	ldrb.w	r3, [sl]
 8007758:	2b2a      	cmp	r3, #42	; 0x2a
 800775a:	d015      	beq.n	8007788 <_vfiprintf_r+0x13c>
 800775c:	9a07      	ldr	r2, [sp, #28]
 800775e:	4654      	mov	r4, sl
 8007760:	2000      	movs	r0, #0
 8007762:	f04f 0c0a 	mov.w	ip, #10
 8007766:	4621      	mov	r1, r4
 8007768:	f811 3b01 	ldrb.w	r3, [r1], #1
 800776c:	3b30      	subs	r3, #48	; 0x30
 800776e:	2b09      	cmp	r3, #9
 8007770:	d94e      	bls.n	8007810 <_vfiprintf_r+0x1c4>
 8007772:	b1b0      	cbz	r0, 80077a2 <_vfiprintf_r+0x156>
 8007774:	9207      	str	r2, [sp, #28]
 8007776:	e014      	b.n	80077a2 <_vfiprintf_r+0x156>
 8007778:	eba0 0308 	sub.w	r3, r0, r8
 800777c:	fa09 f303 	lsl.w	r3, r9, r3
 8007780:	4313      	orrs	r3, r2
 8007782:	9304      	str	r3, [sp, #16]
 8007784:	46a2      	mov	sl, r4
 8007786:	e7d2      	b.n	800772e <_vfiprintf_r+0xe2>
 8007788:	9b03      	ldr	r3, [sp, #12]
 800778a:	1d19      	adds	r1, r3, #4
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	9103      	str	r1, [sp, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	bfbb      	ittet	lt
 8007794:	425b      	neglt	r3, r3
 8007796:	f042 0202 	orrlt.w	r2, r2, #2
 800779a:	9307      	strge	r3, [sp, #28]
 800779c:	9307      	strlt	r3, [sp, #28]
 800779e:	bfb8      	it	lt
 80077a0:	9204      	strlt	r2, [sp, #16]
 80077a2:	7823      	ldrb	r3, [r4, #0]
 80077a4:	2b2e      	cmp	r3, #46	; 0x2e
 80077a6:	d10c      	bne.n	80077c2 <_vfiprintf_r+0x176>
 80077a8:	7863      	ldrb	r3, [r4, #1]
 80077aa:	2b2a      	cmp	r3, #42	; 0x2a
 80077ac:	d135      	bne.n	800781a <_vfiprintf_r+0x1ce>
 80077ae:	9b03      	ldr	r3, [sp, #12]
 80077b0:	1d1a      	adds	r2, r3, #4
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	9203      	str	r2, [sp, #12]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	bfb8      	it	lt
 80077ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80077be:	3402      	adds	r4, #2
 80077c0:	9305      	str	r3, [sp, #20]
 80077c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80078a8 <_vfiprintf_r+0x25c>
 80077c6:	7821      	ldrb	r1, [r4, #0]
 80077c8:	2203      	movs	r2, #3
 80077ca:	4650      	mov	r0, sl
 80077cc:	f7f8 fd10 	bl	80001f0 <memchr>
 80077d0:	b140      	cbz	r0, 80077e4 <_vfiprintf_r+0x198>
 80077d2:	2340      	movs	r3, #64	; 0x40
 80077d4:	eba0 000a 	sub.w	r0, r0, sl
 80077d8:	fa03 f000 	lsl.w	r0, r3, r0
 80077dc:	9b04      	ldr	r3, [sp, #16]
 80077de:	4303      	orrs	r3, r0
 80077e0:	3401      	adds	r4, #1
 80077e2:	9304      	str	r3, [sp, #16]
 80077e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077e8:	482c      	ldr	r0, [pc, #176]	; (800789c <_vfiprintf_r+0x250>)
 80077ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077ee:	2206      	movs	r2, #6
 80077f0:	f7f8 fcfe 	bl	80001f0 <memchr>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	d03f      	beq.n	8007878 <_vfiprintf_r+0x22c>
 80077f8:	4b29      	ldr	r3, [pc, #164]	; (80078a0 <_vfiprintf_r+0x254>)
 80077fa:	bb1b      	cbnz	r3, 8007844 <_vfiprintf_r+0x1f8>
 80077fc:	9b03      	ldr	r3, [sp, #12]
 80077fe:	3307      	adds	r3, #7
 8007800:	f023 0307 	bic.w	r3, r3, #7
 8007804:	3308      	adds	r3, #8
 8007806:	9303      	str	r3, [sp, #12]
 8007808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800780a:	443b      	add	r3, r7
 800780c:	9309      	str	r3, [sp, #36]	; 0x24
 800780e:	e767      	b.n	80076e0 <_vfiprintf_r+0x94>
 8007810:	fb0c 3202 	mla	r2, ip, r2, r3
 8007814:	460c      	mov	r4, r1
 8007816:	2001      	movs	r0, #1
 8007818:	e7a5      	b.n	8007766 <_vfiprintf_r+0x11a>
 800781a:	2300      	movs	r3, #0
 800781c:	3401      	adds	r4, #1
 800781e:	9305      	str	r3, [sp, #20]
 8007820:	4619      	mov	r1, r3
 8007822:	f04f 0c0a 	mov.w	ip, #10
 8007826:	4620      	mov	r0, r4
 8007828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800782c:	3a30      	subs	r2, #48	; 0x30
 800782e:	2a09      	cmp	r2, #9
 8007830:	d903      	bls.n	800783a <_vfiprintf_r+0x1ee>
 8007832:	2b00      	cmp	r3, #0
 8007834:	d0c5      	beq.n	80077c2 <_vfiprintf_r+0x176>
 8007836:	9105      	str	r1, [sp, #20]
 8007838:	e7c3      	b.n	80077c2 <_vfiprintf_r+0x176>
 800783a:	fb0c 2101 	mla	r1, ip, r1, r2
 800783e:	4604      	mov	r4, r0
 8007840:	2301      	movs	r3, #1
 8007842:	e7f0      	b.n	8007826 <_vfiprintf_r+0x1da>
 8007844:	ab03      	add	r3, sp, #12
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	462a      	mov	r2, r5
 800784a:	4b16      	ldr	r3, [pc, #88]	; (80078a4 <_vfiprintf_r+0x258>)
 800784c:	a904      	add	r1, sp, #16
 800784e:	4630      	mov	r0, r6
 8007850:	f7fd fd6a 	bl	8005328 <_printf_float>
 8007854:	4607      	mov	r7, r0
 8007856:	1c78      	adds	r0, r7, #1
 8007858:	d1d6      	bne.n	8007808 <_vfiprintf_r+0x1bc>
 800785a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800785c:	07d9      	lsls	r1, r3, #31
 800785e:	d405      	bmi.n	800786c <_vfiprintf_r+0x220>
 8007860:	89ab      	ldrh	r3, [r5, #12]
 8007862:	059a      	lsls	r2, r3, #22
 8007864:	d402      	bmi.n	800786c <_vfiprintf_r+0x220>
 8007866:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007868:	f7ff f8d8 	bl	8006a1c <__retarget_lock_release_recursive>
 800786c:	89ab      	ldrh	r3, [r5, #12]
 800786e:	065b      	lsls	r3, r3, #25
 8007870:	f53f af12 	bmi.w	8007698 <_vfiprintf_r+0x4c>
 8007874:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007876:	e711      	b.n	800769c <_vfiprintf_r+0x50>
 8007878:	ab03      	add	r3, sp, #12
 800787a:	9300      	str	r3, [sp, #0]
 800787c:	462a      	mov	r2, r5
 800787e:	4b09      	ldr	r3, [pc, #36]	; (80078a4 <_vfiprintf_r+0x258>)
 8007880:	a904      	add	r1, sp, #16
 8007882:	4630      	mov	r0, r6
 8007884:	f7fd fff4 	bl	8005870 <_printf_i>
 8007888:	e7e4      	b.n	8007854 <_vfiprintf_r+0x208>
 800788a:	bf00      	nop
 800788c:	080081a8 	.word	0x080081a8
 8007890:	080081c8 	.word	0x080081c8
 8007894:	08008188 	.word	0x08008188
 8007898:	08008344 	.word	0x08008344
 800789c:	0800834e 	.word	0x0800834e
 80078a0:	08005329 	.word	0x08005329
 80078a4:	08007627 	.word	0x08007627
 80078a8:	0800834a 	.word	0x0800834a

080078ac <_sbrk_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4d06      	ldr	r5, [pc, #24]	; (80078c8 <_sbrk_r+0x1c>)
 80078b0:	2300      	movs	r3, #0
 80078b2:	4604      	mov	r4, r0
 80078b4:	4608      	mov	r0, r1
 80078b6:	602b      	str	r3, [r5, #0]
 80078b8:	f7fa fe4a 	bl	8002550 <_sbrk>
 80078bc:	1c43      	adds	r3, r0, #1
 80078be:	d102      	bne.n	80078c6 <_sbrk_r+0x1a>
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	b103      	cbz	r3, 80078c6 <_sbrk_r+0x1a>
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	bd38      	pop	{r3, r4, r5, pc}
 80078c8:	20000380 	.word	0x20000380

080078cc <__sread>:
 80078cc:	b510      	push	{r4, lr}
 80078ce:	460c      	mov	r4, r1
 80078d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d4:	f000 faf2 	bl	8007ebc <_read_r>
 80078d8:	2800      	cmp	r0, #0
 80078da:	bfab      	itete	ge
 80078dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078de:	89a3      	ldrhlt	r3, [r4, #12]
 80078e0:	181b      	addge	r3, r3, r0
 80078e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078e6:	bfac      	ite	ge
 80078e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80078ea:	81a3      	strhlt	r3, [r4, #12]
 80078ec:	bd10      	pop	{r4, pc}

080078ee <__swrite>:
 80078ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078f2:	461f      	mov	r7, r3
 80078f4:	898b      	ldrh	r3, [r1, #12]
 80078f6:	05db      	lsls	r3, r3, #23
 80078f8:	4605      	mov	r5, r0
 80078fa:	460c      	mov	r4, r1
 80078fc:	4616      	mov	r6, r2
 80078fe:	d505      	bpl.n	800790c <__swrite+0x1e>
 8007900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007904:	2302      	movs	r3, #2
 8007906:	2200      	movs	r2, #0
 8007908:	f000 f9f8 	bl	8007cfc <_lseek_r>
 800790c:	89a3      	ldrh	r3, [r4, #12]
 800790e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007912:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007916:	81a3      	strh	r3, [r4, #12]
 8007918:	4632      	mov	r2, r6
 800791a:	463b      	mov	r3, r7
 800791c:	4628      	mov	r0, r5
 800791e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007922:	f000 b869 	b.w	80079f8 <_write_r>

08007926 <__sseek>:
 8007926:	b510      	push	{r4, lr}
 8007928:	460c      	mov	r4, r1
 800792a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800792e:	f000 f9e5 	bl	8007cfc <_lseek_r>
 8007932:	1c43      	adds	r3, r0, #1
 8007934:	89a3      	ldrh	r3, [r4, #12]
 8007936:	bf15      	itete	ne
 8007938:	6560      	strne	r0, [r4, #84]	; 0x54
 800793a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800793e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007942:	81a3      	strheq	r3, [r4, #12]
 8007944:	bf18      	it	ne
 8007946:	81a3      	strhne	r3, [r4, #12]
 8007948:	bd10      	pop	{r4, pc}

0800794a <__sclose>:
 800794a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800794e:	f000 b8f1 	b.w	8007b34 <_close_r>
	...

08007954 <__swbuf_r>:
 8007954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007956:	460e      	mov	r6, r1
 8007958:	4614      	mov	r4, r2
 800795a:	4605      	mov	r5, r0
 800795c:	b118      	cbz	r0, 8007966 <__swbuf_r+0x12>
 800795e:	6983      	ldr	r3, [r0, #24]
 8007960:	b90b      	cbnz	r3, 8007966 <__swbuf_r+0x12>
 8007962:	f7fe ffb7 	bl	80068d4 <__sinit>
 8007966:	4b21      	ldr	r3, [pc, #132]	; (80079ec <__swbuf_r+0x98>)
 8007968:	429c      	cmp	r4, r3
 800796a:	d12b      	bne.n	80079c4 <__swbuf_r+0x70>
 800796c:	686c      	ldr	r4, [r5, #4]
 800796e:	69a3      	ldr	r3, [r4, #24]
 8007970:	60a3      	str	r3, [r4, #8]
 8007972:	89a3      	ldrh	r3, [r4, #12]
 8007974:	071a      	lsls	r2, r3, #28
 8007976:	d52f      	bpl.n	80079d8 <__swbuf_r+0x84>
 8007978:	6923      	ldr	r3, [r4, #16]
 800797a:	b36b      	cbz	r3, 80079d8 <__swbuf_r+0x84>
 800797c:	6923      	ldr	r3, [r4, #16]
 800797e:	6820      	ldr	r0, [r4, #0]
 8007980:	1ac0      	subs	r0, r0, r3
 8007982:	6963      	ldr	r3, [r4, #20]
 8007984:	b2f6      	uxtb	r6, r6
 8007986:	4283      	cmp	r3, r0
 8007988:	4637      	mov	r7, r6
 800798a:	dc04      	bgt.n	8007996 <__swbuf_r+0x42>
 800798c:	4621      	mov	r1, r4
 800798e:	4628      	mov	r0, r5
 8007990:	f000 f966 	bl	8007c60 <_fflush_r>
 8007994:	bb30      	cbnz	r0, 80079e4 <__swbuf_r+0x90>
 8007996:	68a3      	ldr	r3, [r4, #8]
 8007998:	3b01      	subs	r3, #1
 800799a:	60a3      	str	r3, [r4, #8]
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	1c5a      	adds	r2, r3, #1
 80079a0:	6022      	str	r2, [r4, #0]
 80079a2:	701e      	strb	r6, [r3, #0]
 80079a4:	6963      	ldr	r3, [r4, #20]
 80079a6:	3001      	adds	r0, #1
 80079a8:	4283      	cmp	r3, r0
 80079aa:	d004      	beq.n	80079b6 <__swbuf_r+0x62>
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	07db      	lsls	r3, r3, #31
 80079b0:	d506      	bpl.n	80079c0 <__swbuf_r+0x6c>
 80079b2:	2e0a      	cmp	r6, #10
 80079b4:	d104      	bne.n	80079c0 <__swbuf_r+0x6c>
 80079b6:	4621      	mov	r1, r4
 80079b8:	4628      	mov	r0, r5
 80079ba:	f000 f951 	bl	8007c60 <_fflush_r>
 80079be:	b988      	cbnz	r0, 80079e4 <__swbuf_r+0x90>
 80079c0:	4638      	mov	r0, r7
 80079c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079c4:	4b0a      	ldr	r3, [pc, #40]	; (80079f0 <__swbuf_r+0x9c>)
 80079c6:	429c      	cmp	r4, r3
 80079c8:	d101      	bne.n	80079ce <__swbuf_r+0x7a>
 80079ca:	68ac      	ldr	r4, [r5, #8]
 80079cc:	e7cf      	b.n	800796e <__swbuf_r+0x1a>
 80079ce:	4b09      	ldr	r3, [pc, #36]	; (80079f4 <__swbuf_r+0xa0>)
 80079d0:	429c      	cmp	r4, r3
 80079d2:	bf08      	it	eq
 80079d4:	68ec      	ldreq	r4, [r5, #12]
 80079d6:	e7ca      	b.n	800796e <__swbuf_r+0x1a>
 80079d8:	4621      	mov	r1, r4
 80079da:	4628      	mov	r0, r5
 80079dc:	f000 f81e 	bl	8007a1c <__swsetup_r>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	d0cb      	beq.n	800797c <__swbuf_r+0x28>
 80079e4:	f04f 37ff 	mov.w	r7, #4294967295
 80079e8:	e7ea      	b.n	80079c0 <__swbuf_r+0x6c>
 80079ea:	bf00      	nop
 80079ec:	080081a8 	.word	0x080081a8
 80079f0:	080081c8 	.word	0x080081c8
 80079f4:	08008188 	.word	0x08008188

080079f8 <_write_r>:
 80079f8:	b538      	push	{r3, r4, r5, lr}
 80079fa:	4d07      	ldr	r5, [pc, #28]	; (8007a18 <_write_r+0x20>)
 80079fc:	4604      	mov	r4, r0
 80079fe:	4608      	mov	r0, r1
 8007a00:	4611      	mov	r1, r2
 8007a02:	2200      	movs	r2, #0
 8007a04:	602a      	str	r2, [r5, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	f7fa fd51 	bl	80024ae <_write>
 8007a0c:	1c43      	adds	r3, r0, #1
 8007a0e:	d102      	bne.n	8007a16 <_write_r+0x1e>
 8007a10:	682b      	ldr	r3, [r5, #0]
 8007a12:	b103      	cbz	r3, 8007a16 <_write_r+0x1e>
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	bd38      	pop	{r3, r4, r5, pc}
 8007a18:	20000380 	.word	0x20000380

08007a1c <__swsetup_r>:
 8007a1c:	4b32      	ldr	r3, [pc, #200]	; (8007ae8 <__swsetup_r+0xcc>)
 8007a1e:	b570      	push	{r4, r5, r6, lr}
 8007a20:	681d      	ldr	r5, [r3, #0]
 8007a22:	4606      	mov	r6, r0
 8007a24:	460c      	mov	r4, r1
 8007a26:	b125      	cbz	r5, 8007a32 <__swsetup_r+0x16>
 8007a28:	69ab      	ldr	r3, [r5, #24]
 8007a2a:	b913      	cbnz	r3, 8007a32 <__swsetup_r+0x16>
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	f7fe ff51 	bl	80068d4 <__sinit>
 8007a32:	4b2e      	ldr	r3, [pc, #184]	; (8007aec <__swsetup_r+0xd0>)
 8007a34:	429c      	cmp	r4, r3
 8007a36:	d10f      	bne.n	8007a58 <__swsetup_r+0x3c>
 8007a38:	686c      	ldr	r4, [r5, #4]
 8007a3a:	89a3      	ldrh	r3, [r4, #12]
 8007a3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a40:	0719      	lsls	r1, r3, #28
 8007a42:	d42c      	bmi.n	8007a9e <__swsetup_r+0x82>
 8007a44:	06dd      	lsls	r5, r3, #27
 8007a46:	d411      	bmi.n	8007a6c <__swsetup_r+0x50>
 8007a48:	2309      	movs	r3, #9
 8007a4a:	6033      	str	r3, [r6, #0]
 8007a4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a50:	81a3      	strh	r3, [r4, #12]
 8007a52:	f04f 30ff 	mov.w	r0, #4294967295
 8007a56:	e03e      	b.n	8007ad6 <__swsetup_r+0xba>
 8007a58:	4b25      	ldr	r3, [pc, #148]	; (8007af0 <__swsetup_r+0xd4>)
 8007a5a:	429c      	cmp	r4, r3
 8007a5c:	d101      	bne.n	8007a62 <__swsetup_r+0x46>
 8007a5e:	68ac      	ldr	r4, [r5, #8]
 8007a60:	e7eb      	b.n	8007a3a <__swsetup_r+0x1e>
 8007a62:	4b24      	ldr	r3, [pc, #144]	; (8007af4 <__swsetup_r+0xd8>)
 8007a64:	429c      	cmp	r4, r3
 8007a66:	bf08      	it	eq
 8007a68:	68ec      	ldreq	r4, [r5, #12]
 8007a6a:	e7e6      	b.n	8007a3a <__swsetup_r+0x1e>
 8007a6c:	0758      	lsls	r0, r3, #29
 8007a6e:	d512      	bpl.n	8007a96 <__swsetup_r+0x7a>
 8007a70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a72:	b141      	cbz	r1, 8007a86 <__swsetup_r+0x6a>
 8007a74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a78:	4299      	cmp	r1, r3
 8007a7a:	d002      	beq.n	8007a82 <__swsetup_r+0x66>
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	f7ff fb7f 	bl	8007180 <_free_r>
 8007a82:	2300      	movs	r3, #0
 8007a84:	6363      	str	r3, [r4, #52]	; 0x34
 8007a86:	89a3      	ldrh	r3, [r4, #12]
 8007a88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a8c:	81a3      	strh	r3, [r4, #12]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	6063      	str	r3, [r4, #4]
 8007a92:	6923      	ldr	r3, [r4, #16]
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	89a3      	ldrh	r3, [r4, #12]
 8007a98:	f043 0308 	orr.w	r3, r3, #8
 8007a9c:	81a3      	strh	r3, [r4, #12]
 8007a9e:	6923      	ldr	r3, [r4, #16]
 8007aa0:	b94b      	cbnz	r3, 8007ab6 <__swsetup_r+0x9a>
 8007aa2:	89a3      	ldrh	r3, [r4, #12]
 8007aa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aac:	d003      	beq.n	8007ab6 <__swsetup_r+0x9a>
 8007aae:	4621      	mov	r1, r4
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	f000 f95b 	bl	8007d6c <__smakebuf_r>
 8007ab6:	89a0      	ldrh	r0, [r4, #12]
 8007ab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007abc:	f010 0301 	ands.w	r3, r0, #1
 8007ac0:	d00a      	beq.n	8007ad8 <__swsetup_r+0xbc>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	60a3      	str	r3, [r4, #8]
 8007ac6:	6963      	ldr	r3, [r4, #20]
 8007ac8:	425b      	negs	r3, r3
 8007aca:	61a3      	str	r3, [r4, #24]
 8007acc:	6923      	ldr	r3, [r4, #16]
 8007ace:	b943      	cbnz	r3, 8007ae2 <__swsetup_r+0xc6>
 8007ad0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ad4:	d1ba      	bne.n	8007a4c <__swsetup_r+0x30>
 8007ad6:	bd70      	pop	{r4, r5, r6, pc}
 8007ad8:	0781      	lsls	r1, r0, #30
 8007ada:	bf58      	it	pl
 8007adc:	6963      	ldrpl	r3, [r4, #20]
 8007ade:	60a3      	str	r3, [r4, #8]
 8007ae0:	e7f4      	b.n	8007acc <__swsetup_r+0xb0>
 8007ae2:	2000      	movs	r0, #0
 8007ae4:	e7f7      	b.n	8007ad6 <__swsetup_r+0xba>
 8007ae6:	bf00      	nop
 8007ae8:	2000000c 	.word	0x2000000c
 8007aec:	080081a8 	.word	0x080081a8
 8007af0:	080081c8 	.word	0x080081c8
 8007af4:	08008188 	.word	0x08008188

08007af8 <__assert_func>:
 8007af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007afa:	4614      	mov	r4, r2
 8007afc:	461a      	mov	r2, r3
 8007afe:	4b09      	ldr	r3, [pc, #36]	; (8007b24 <__assert_func+0x2c>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4605      	mov	r5, r0
 8007b04:	68d8      	ldr	r0, [r3, #12]
 8007b06:	b14c      	cbz	r4, 8007b1c <__assert_func+0x24>
 8007b08:	4b07      	ldr	r3, [pc, #28]	; (8007b28 <__assert_func+0x30>)
 8007b0a:	9100      	str	r1, [sp, #0]
 8007b0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b10:	4906      	ldr	r1, [pc, #24]	; (8007b2c <__assert_func+0x34>)
 8007b12:	462b      	mov	r3, r5
 8007b14:	f000 f8e0 	bl	8007cd8 <fiprintf>
 8007b18:	f000 f9ef 	bl	8007efa <abort>
 8007b1c:	4b04      	ldr	r3, [pc, #16]	; (8007b30 <__assert_func+0x38>)
 8007b1e:	461c      	mov	r4, r3
 8007b20:	e7f3      	b.n	8007b0a <__assert_func+0x12>
 8007b22:	bf00      	nop
 8007b24:	2000000c 	.word	0x2000000c
 8007b28:	08008355 	.word	0x08008355
 8007b2c:	08008362 	.word	0x08008362
 8007b30:	08008390 	.word	0x08008390

08007b34 <_close_r>:
 8007b34:	b538      	push	{r3, r4, r5, lr}
 8007b36:	4d06      	ldr	r5, [pc, #24]	; (8007b50 <_close_r+0x1c>)
 8007b38:	2300      	movs	r3, #0
 8007b3a:	4604      	mov	r4, r0
 8007b3c:	4608      	mov	r0, r1
 8007b3e:	602b      	str	r3, [r5, #0]
 8007b40:	f7fa fcd1 	bl	80024e6 <_close>
 8007b44:	1c43      	adds	r3, r0, #1
 8007b46:	d102      	bne.n	8007b4e <_close_r+0x1a>
 8007b48:	682b      	ldr	r3, [r5, #0]
 8007b4a:	b103      	cbz	r3, 8007b4e <_close_r+0x1a>
 8007b4c:	6023      	str	r3, [r4, #0]
 8007b4e:	bd38      	pop	{r3, r4, r5, pc}
 8007b50:	20000380 	.word	0x20000380

08007b54 <__sflush_r>:
 8007b54:	898a      	ldrh	r2, [r1, #12]
 8007b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b5a:	4605      	mov	r5, r0
 8007b5c:	0710      	lsls	r0, r2, #28
 8007b5e:	460c      	mov	r4, r1
 8007b60:	d458      	bmi.n	8007c14 <__sflush_r+0xc0>
 8007b62:	684b      	ldr	r3, [r1, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	dc05      	bgt.n	8007b74 <__sflush_r+0x20>
 8007b68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	dc02      	bgt.n	8007b74 <__sflush_r+0x20>
 8007b6e:	2000      	movs	r0, #0
 8007b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b76:	2e00      	cmp	r6, #0
 8007b78:	d0f9      	beq.n	8007b6e <__sflush_r+0x1a>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b80:	682f      	ldr	r7, [r5, #0]
 8007b82:	602b      	str	r3, [r5, #0]
 8007b84:	d032      	beq.n	8007bec <__sflush_r+0x98>
 8007b86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b88:	89a3      	ldrh	r3, [r4, #12]
 8007b8a:	075a      	lsls	r2, r3, #29
 8007b8c:	d505      	bpl.n	8007b9a <__sflush_r+0x46>
 8007b8e:	6863      	ldr	r3, [r4, #4]
 8007b90:	1ac0      	subs	r0, r0, r3
 8007b92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b94:	b10b      	cbz	r3, 8007b9a <__sflush_r+0x46>
 8007b96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b98:	1ac0      	subs	r0, r0, r3
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ba0:	6a21      	ldr	r1, [r4, #32]
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	47b0      	blx	r6
 8007ba6:	1c43      	adds	r3, r0, #1
 8007ba8:	89a3      	ldrh	r3, [r4, #12]
 8007baa:	d106      	bne.n	8007bba <__sflush_r+0x66>
 8007bac:	6829      	ldr	r1, [r5, #0]
 8007bae:	291d      	cmp	r1, #29
 8007bb0:	d82c      	bhi.n	8007c0c <__sflush_r+0xb8>
 8007bb2:	4a2a      	ldr	r2, [pc, #168]	; (8007c5c <__sflush_r+0x108>)
 8007bb4:	40ca      	lsrs	r2, r1
 8007bb6:	07d6      	lsls	r6, r2, #31
 8007bb8:	d528      	bpl.n	8007c0c <__sflush_r+0xb8>
 8007bba:	2200      	movs	r2, #0
 8007bbc:	6062      	str	r2, [r4, #4]
 8007bbe:	04d9      	lsls	r1, r3, #19
 8007bc0:	6922      	ldr	r2, [r4, #16]
 8007bc2:	6022      	str	r2, [r4, #0]
 8007bc4:	d504      	bpl.n	8007bd0 <__sflush_r+0x7c>
 8007bc6:	1c42      	adds	r2, r0, #1
 8007bc8:	d101      	bne.n	8007bce <__sflush_r+0x7a>
 8007bca:	682b      	ldr	r3, [r5, #0]
 8007bcc:	b903      	cbnz	r3, 8007bd0 <__sflush_r+0x7c>
 8007bce:	6560      	str	r0, [r4, #84]	; 0x54
 8007bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bd2:	602f      	str	r7, [r5, #0]
 8007bd4:	2900      	cmp	r1, #0
 8007bd6:	d0ca      	beq.n	8007b6e <__sflush_r+0x1a>
 8007bd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bdc:	4299      	cmp	r1, r3
 8007bde:	d002      	beq.n	8007be6 <__sflush_r+0x92>
 8007be0:	4628      	mov	r0, r5
 8007be2:	f7ff facd 	bl	8007180 <_free_r>
 8007be6:	2000      	movs	r0, #0
 8007be8:	6360      	str	r0, [r4, #52]	; 0x34
 8007bea:	e7c1      	b.n	8007b70 <__sflush_r+0x1c>
 8007bec:	6a21      	ldr	r1, [r4, #32]
 8007bee:	2301      	movs	r3, #1
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	47b0      	blx	r6
 8007bf4:	1c41      	adds	r1, r0, #1
 8007bf6:	d1c7      	bne.n	8007b88 <__sflush_r+0x34>
 8007bf8:	682b      	ldr	r3, [r5, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d0c4      	beq.n	8007b88 <__sflush_r+0x34>
 8007bfe:	2b1d      	cmp	r3, #29
 8007c00:	d001      	beq.n	8007c06 <__sflush_r+0xb2>
 8007c02:	2b16      	cmp	r3, #22
 8007c04:	d101      	bne.n	8007c0a <__sflush_r+0xb6>
 8007c06:	602f      	str	r7, [r5, #0]
 8007c08:	e7b1      	b.n	8007b6e <__sflush_r+0x1a>
 8007c0a:	89a3      	ldrh	r3, [r4, #12]
 8007c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c10:	81a3      	strh	r3, [r4, #12]
 8007c12:	e7ad      	b.n	8007b70 <__sflush_r+0x1c>
 8007c14:	690f      	ldr	r7, [r1, #16]
 8007c16:	2f00      	cmp	r7, #0
 8007c18:	d0a9      	beq.n	8007b6e <__sflush_r+0x1a>
 8007c1a:	0793      	lsls	r3, r2, #30
 8007c1c:	680e      	ldr	r6, [r1, #0]
 8007c1e:	bf08      	it	eq
 8007c20:	694b      	ldreq	r3, [r1, #20]
 8007c22:	600f      	str	r7, [r1, #0]
 8007c24:	bf18      	it	ne
 8007c26:	2300      	movne	r3, #0
 8007c28:	eba6 0807 	sub.w	r8, r6, r7
 8007c2c:	608b      	str	r3, [r1, #8]
 8007c2e:	f1b8 0f00 	cmp.w	r8, #0
 8007c32:	dd9c      	ble.n	8007b6e <__sflush_r+0x1a>
 8007c34:	6a21      	ldr	r1, [r4, #32]
 8007c36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c38:	4643      	mov	r3, r8
 8007c3a:	463a      	mov	r2, r7
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	47b0      	blx	r6
 8007c40:	2800      	cmp	r0, #0
 8007c42:	dc06      	bgt.n	8007c52 <__sflush_r+0xfe>
 8007c44:	89a3      	ldrh	r3, [r4, #12]
 8007c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c4a:	81a3      	strh	r3, [r4, #12]
 8007c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c50:	e78e      	b.n	8007b70 <__sflush_r+0x1c>
 8007c52:	4407      	add	r7, r0
 8007c54:	eba8 0800 	sub.w	r8, r8, r0
 8007c58:	e7e9      	b.n	8007c2e <__sflush_r+0xda>
 8007c5a:	bf00      	nop
 8007c5c:	20400001 	.word	0x20400001

08007c60 <_fflush_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	690b      	ldr	r3, [r1, #16]
 8007c64:	4605      	mov	r5, r0
 8007c66:	460c      	mov	r4, r1
 8007c68:	b913      	cbnz	r3, 8007c70 <_fflush_r+0x10>
 8007c6a:	2500      	movs	r5, #0
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
 8007c70:	b118      	cbz	r0, 8007c7a <_fflush_r+0x1a>
 8007c72:	6983      	ldr	r3, [r0, #24]
 8007c74:	b90b      	cbnz	r3, 8007c7a <_fflush_r+0x1a>
 8007c76:	f7fe fe2d 	bl	80068d4 <__sinit>
 8007c7a:	4b14      	ldr	r3, [pc, #80]	; (8007ccc <_fflush_r+0x6c>)
 8007c7c:	429c      	cmp	r4, r3
 8007c7e:	d11b      	bne.n	8007cb8 <_fflush_r+0x58>
 8007c80:	686c      	ldr	r4, [r5, #4]
 8007c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d0ef      	beq.n	8007c6a <_fflush_r+0xa>
 8007c8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c8c:	07d0      	lsls	r0, r2, #31
 8007c8e:	d404      	bmi.n	8007c9a <_fflush_r+0x3a>
 8007c90:	0599      	lsls	r1, r3, #22
 8007c92:	d402      	bmi.n	8007c9a <_fflush_r+0x3a>
 8007c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c96:	f7fe fec0 	bl	8006a1a <__retarget_lock_acquire_recursive>
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	4621      	mov	r1, r4
 8007c9e:	f7ff ff59 	bl	8007b54 <__sflush_r>
 8007ca2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ca4:	07da      	lsls	r2, r3, #31
 8007ca6:	4605      	mov	r5, r0
 8007ca8:	d4e0      	bmi.n	8007c6c <_fflush_r+0xc>
 8007caa:	89a3      	ldrh	r3, [r4, #12]
 8007cac:	059b      	lsls	r3, r3, #22
 8007cae:	d4dd      	bmi.n	8007c6c <_fflush_r+0xc>
 8007cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cb2:	f7fe feb3 	bl	8006a1c <__retarget_lock_release_recursive>
 8007cb6:	e7d9      	b.n	8007c6c <_fflush_r+0xc>
 8007cb8:	4b05      	ldr	r3, [pc, #20]	; (8007cd0 <_fflush_r+0x70>)
 8007cba:	429c      	cmp	r4, r3
 8007cbc:	d101      	bne.n	8007cc2 <_fflush_r+0x62>
 8007cbe:	68ac      	ldr	r4, [r5, #8]
 8007cc0:	e7df      	b.n	8007c82 <_fflush_r+0x22>
 8007cc2:	4b04      	ldr	r3, [pc, #16]	; (8007cd4 <_fflush_r+0x74>)
 8007cc4:	429c      	cmp	r4, r3
 8007cc6:	bf08      	it	eq
 8007cc8:	68ec      	ldreq	r4, [r5, #12]
 8007cca:	e7da      	b.n	8007c82 <_fflush_r+0x22>
 8007ccc:	080081a8 	.word	0x080081a8
 8007cd0:	080081c8 	.word	0x080081c8
 8007cd4:	08008188 	.word	0x08008188

08007cd8 <fiprintf>:
 8007cd8:	b40e      	push	{r1, r2, r3}
 8007cda:	b503      	push	{r0, r1, lr}
 8007cdc:	4601      	mov	r1, r0
 8007cde:	ab03      	add	r3, sp, #12
 8007ce0:	4805      	ldr	r0, [pc, #20]	; (8007cf8 <fiprintf+0x20>)
 8007ce2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ce6:	6800      	ldr	r0, [r0, #0]
 8007ce8:	9301      	str	r3, [sp, #4]
 8007cea:	f7ff fcaf 	bl	800764c <_vfiprintf_r>
 8007cee:	b002      	add	sp, #8
 8007cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cf4:	b003      	add	sp, #12
 8007cf6:	4770      	bx	lr
 8007cf8:	2000000c 	.word	0x2000000c

08007cfc <_lseek_r>:
 8007cfc:	b538      	push	{r3, r4, r5, lr}
 8007cfe:	4d07      	ldr	r5, [pc, #28]	; (8007d1c <_lseek_r+0x20>)
 8007d00:	4604      	mov	r4, r0
 8007d02:	4608      	mov	r0, r1
 8007d04:	4611      	mov	r1, r2
 8007d06:	2200      	movs	r2, #0
 8007d08:	602a      	str	r2, [r5, #0]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	f7fa fc12 	bl	8002534 <_lseek>
 8007d10:	1c43      	adds	r3, r0, #1
 8007d12:	d102      	bne.n	8007d1a <_lseek_r+0x1e>
 8007d14:	682b      	ldr	r3, [r5, #0]
 8007d16:	b103      	cbz	r3, 8007d1a <_lseek_r+0x1e>
 8007d18:	6023      	str	r3, [r4, #0]
 8007d1a:	bd38      	pop	{r3, r4, r5, pc}
 8007d1c:	20000380 	.word	0x20000380

08007d20 <__swhatbuf_r>:
 8007d20:	b570      	push	{r4, r5, r6, lr}
 8007d22:	460e      	mov	r6, r1
 8007d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d28:	2900      	cmp	r1, #0
 8007d2a:	b096      	sub	sp, #88	; 0x58
 8007d2c:	4614      	mov	r4, r2
 8007d2e:	461d      	mov	r5, r3
 8007d30:	da08      	bge.n	8007d44 <__swhatbuf_r+0x24>
 8007d32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	602a      	str	r2, [r5, #0]
 8007d3a:	061a      	lsls	r2, r3, #24
 8007d3c:	d410      	bmi.n	8007d60 <__swhatbuf_r+0x40>
 8007d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d42:	e00e      	b.n	8007d62 <__swhatbuf_r+0x42>
 8007d44:	466a      	mov	r2, sp
 8007d46:	f000 f8df 	bl	8007f08 <_fstat_r>
 8007d4a:	2800      	cmp	r0, #0
 8007d4c:	dbf1      	blt.n	8007d32 <__swhatbuf_r+0x12>
 8007d4e:	9a01      	ldr	r2, [sp, #4]
 8007d50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d58:	425a      	negs	r2, r3
 8007d5a:	415a      	adcs	r2, r3
 8007d5c:	602a      	str	r2, [r5, #0]
 8007d5e:	e7ee      	b.n	8007d3e <__swhatbuf_r+0x1e>
 8007d60:	2340      	movs	r3, #64	; 0x40
 8007d62:	2000      	movs	r0, #0
 8007d64:	6023      	str	r3, [r4, #0]
 8007d66:	b016      	add	sp, #88	; 0x58
 8007d68:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d6c <__smakebuf_r>:
 8007d6c:	898b      	ldrh	r3, [r1, #12]
 8007d6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d70:	079d      	lsls	r5, r3, #30
 8007d72:	4606      	mov	r6, r0
 8007d74:	460c      	mov	r4, r1
 8007d76:	d507      	bpl.n	8007d88 <__smakebuf_r+0x1c>
 8007d78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d7c:	6023      	str	r3, [r4, #0]
 8007d7e:	6123      	str	r3, [r4, #16]
 8007d80:	2301      	movs	r3, #1
 8007d82:	6163      	str	r3, [r4, #20]
 8007d84:	b002      	add	sp, #8
 8007d86:	bd70      	pop	{r4, r5, r6, pc}
 8007d88:	ab01      	add	r3, sp, #4
 8007d8a:	466a      	mov	r2, sp
 8007d8c:	f7ff ffc8 	bl	8007d20 <__swhatbuf_r>
 8007d90:	9900      	ldr	r1, [sp, #0]
 8007d92:	4605      	mov	r5, r0
 8007d94:	4630      	mov	r0, r6
 8007d96:	f7ff fa5f 	bl	8007258 <_malloc_r>
 8007d9a:	b948      	cbnz	r0, 8007db0 <__smakebuf_r+0x44>
 8007d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007da0:	059a      	lsls	r2, r3, #22
 8007da2:	d4ef      	bmi.n	8007d84 <__smakebuf_r+0x18>
 8007da4:	f023 0303 	bic.w	r3, r3, #3
 8007da8:	f043 0302 	orr.w	r3, r3, #2
 8007dac:	81a3      	strh	r3, [r4, #12]
 8007dae:	e7e3      	b.n	8007d78 <__smakebuf_r+0xc>
 8007db0:	4b0d      	ldr	r3, [pc, #52]	; (8007de8 <__smakebuf_r+0x7c>)
 8007db2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007db4:	89a3      	ldrh	r3, [r4, #12]
 8007db6:	6020      	str	r0, [r4, #0]
 8007db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dbc:	81a3      	strh	r3, [r4, #12]
 8007dbe:	9b00      	ldr	r3, [sp, #0]
 8007dc0:	6163      	str	r3, [r4, #20]
 8007dc2:	9b01      	ldr	r3, [sp, #4]
 8007dc4:	6120      	str	r0, [r4, #16]
 8007dc6:	b15b      	cbz	r3, 8007de0 <__smakebuf_r+0x74>
 8007dc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dcc:	4630      	mov	r0, r6
 8007dce:	f000 f8ad 	bl	8007f2c <_isatty_r>
 8007dd2:	b128      	cbz	r0, 8007de0 <__smakebuf_r+0x74>
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	f023 0303 	bic.w	r3, r3, #3
 8007dda:	f043 0301 	orr.w	r3, r3, #1
 8007dde:	81a3      	strh	r3, [r4, #12]
 8007de0:	89a0      	ldrh	r0, [r4, #12]
 8007de2:	4305      	orrs	r5, r0
 8007de4:	81a5      	strh	r5, [r4, #12]
 8007de6:	e7cd      	b.n	8007d84 <__smakebuf_r+0x18>
 8007de8:	0800686d 	.word	0x0800686d

08007dec <__ascii_mbtowc>:
 8007dec:	b082      	sub	sp, #8
 8007dee:	b901      	cbnz	r1, 8007df2 <__ascii_mbtowc+0x6>
 8007df0:	a901      	add	r1, sp, #4
 8007df2:	b142      	cbz	r2, 8007e06 <__ascii_mbtowc+0x1a>
 8007df4:	b14b      	cbz	r3, 8007e0a <__ascii_mbtowc+0x1e>
 8007df6:	7813      	ldrb	r3, [r2, #0]
 8007df8:	600b      	str	r3, [r1, #0]
 8007dfa:	7812      	ldrb	r2, [r2, #0]
 8007dfc:	1e10      	subs	r0, r2, #0
 8007dfe:	bf18      	it	ne
 8007e00:	2001      	movne	r0, #1
 8007e02:	b002      	add	sp, #8
 8007e04:	4770      	bx	lr
 8007e06:	4610      	mov	r0, r2
 8007e08:	e7fb      	b.n	8007e02 <__ascii_mbtowc+0x16>
 8007e0a:	f06f 0001 	mvn.w	r0, #1
 8007e0e:	e7f8      	b.n	8007e02 <__ascii_mbtowc+0x16>

08007e10 <memmove>:
 8007e10:	4288      	cmp	r0, r1
 8007e12:	b510      	push	{r4, lr}
 8007e14:	eb01 0402 	add.w	r4, r1, r2
 8007e18:	d902      	bls.n	8007e20 <memmove+0x10>
 8007e1a:	4284      	cmp	r4, r0
 8007e1c:	4623      	mov	r3, r4
 8007e1e:	d807      	bhi.n	8007e30 <memmove+0x20>
 8007e20:	1e43      	subs	r3, r0, #1
 8007e22:	42a1      	cmp	r1, r4
 8007e24:	d008      	beq.n	8007e38 <memmove+0x28>
 8007e26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e2e:	e7f8      	b.n	8007e22 <memmove+0x12>
 8007e30:	4402      	add	r2, r0
 8007e32:	4601      	mov	r1, r0
 8007e34:	428a      	cmp	r2, r1
 8007e36:	d100      	bne.n	8007e3a <memmove+0x2a>
 8007e38:	bd10      	pop	{r4, pc}
 8007e3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e42:	e7f7      	b.n	8007e34 <memmove+0x24>

08007e44 <__malloc_lock>:
 8007e44:	4801      	ldr	r0, [pc, #4]	; (8007e4c <__malloc_lock+0x8>)
 8007e46:	f7fe bde8 	b.w	8006a1a <__retarget_lock_acquire_recursive>
 8007e4a:	bf00      	nop
 8007e4c:	20000374 	.word	0x20000374

08007e50 <__malloc_unlock>:
 8007e50:	4801      	ldr	r0, [pc, #4]	; (8007e58 <__malloc_unlock+0x8>)
 8007e52:	f7fe bde3 	b.w	8006a1c <__retarget_lock_release_recursive>
 8007e56:	bf00      	nop
 8007e58:	20000374 	.word	0x20000374

08007e5c <_realloc_r>:
 8007e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e60:	4680      	mov	r8, r0
 8007e62:	4614      	mov	r4, r2
 8007e64:	460e      	mov	r6, r1
 8007e66:	b921      	cbnz	r1, 8007e72 <_realloc_r+0x16>
 8007e68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	f7ff b9f3 	b.w	8007258 <_malloc_r>
 8007e72:	b92a      	cbnz	r2, 8007e80 <_realloc_r+0x24>
 8007e74:	f7ff f984 	bl	8007180 <_free_r>
 8007e78:	4625      	mov	r5, r4
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e80:	f000 f864 	bl	8007f4c <_malloc_usable_size_r>
 8007e84:	4284      	cmp	r4, r0
 8007e86:	4607      	mov	r7, r0
 8007e88:	d802      	bhi.n	8007e90 <_realloc_r+0x34>
 8007e8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e8e:	d812      	bhi.n	8007eb6 <_realloc_r+0x5a>
 8007e90:	4621      	mov	r1, r4
 8007e92:	4640      	mov	r0, r8
 8007e94:	f7ff f9e0 	bl	8007258 <_malloc_r>
 8007e98:	4605      	mov	r5, r0
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	d0ed      	beq.n	8007e7a <_realloc_r+0x1e>
 8007e9e:	42bc      	cmp	r4, r7
 8007ea0:	4622      	mov	r2, r4
 8007ea2:	4631      	mov	r1, r6
 8007ea4:	bf28      	it	cs
 8007ea6:	463a      	movcs	r2, r7
 8007ea8:	f7fe fdc2 	bl	8006a30 <memcpy>
 8007eac:	4631      	mov	r1, r6
 8007eae:	4640      	mov	r0, r8
 8007eb0:	f7ff f966 	bl	8007180 <_free_r>
 8007eb4:	e7e1      	b.n	8007e7a <_realloc_r+0x1e>
 8007eb6:	4635      	mov	r5, r6
 8007eb8:	e7df      	b.n	8007e7a <_realloc_r+0x1e>
	...

08007ebc <_read_r>:
 8007ebc:	b538      	push	{r3, r4, r5, lr}
 8007ebe:	4d07      	ldr	r5, [pc, #28]	; (8007edc <_read_r+0x20>)
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	4608      	mov	r0, r1
 8007ec4:	4611      	mov	r1, r2
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	602a      	str	r2, [r5, #0]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	f7fa fad2 	bl	8002474 <_read>
 8007ed0:	1c43      	adds	r3, r0, #1
 8007ed2:	d102      	bne.n	8007eda <_read_r+0x1e>
 8007ed4:	682b      	ldr	r3, [r5, #0]
 8007ed6:	b103      	cbz	r3, 8007eda <_read_r+0x1e>
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	bd38      	pop	{r3, r4, r5, pc}
 8007edc:	20000380 	.word	0x20000380

08007ee0 <__ascii_wctomb>:
 8007ee0:	b149      	cbz	r1, 8007ef6 <__ascii_wctomb+0x16>
 8007ee2:	2aff      	cmp	r2, #255	; 0xff
 8007ee4:	bf85      	ittet	hi
 8007ee6:	238a      	movhi	r3, #138	; 0x8a
 8007ee8:	6003      	strhi	r3, [r0, #0]
 8007eea:	700a      	strbls	r2, [r1, #0]
 8007eec:	f04f 30ff 	movhi.w	r0, #4294967295
 8007ef0:	bf98      	it	ls
 8007ef2:	2001      	movls	r0, #1
 8007ef4:	4770      	bx	lr
 8007ef6:	4608      	mov	r0, r1
 8007ef8:	4770      	bx	lr

08007efa <abort>:
 8007efa:	b508      	push	{r3, lr}
 8007efc:	2006      	movs	r0, #6
 8007efe:	f000 f855 	bl	8007fac <raise>
 8007f02:	2001      	movs	r0, #1
 8007f04:	f7fa faac 	bl	8002460 <_exit>

08007f08 <_fstat_r>:
 8007f08:	b538      	push	{r3, r4, r5, lr}
 8007f0a:	4d07      	ldr	r5, [pc, #28]	; (8007f28 <_fstat_r+0x20>)
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	4604      	mov	r4, r0
 8007f10:	4608      	mov	r0, r1
 8007f12:	4611      	mov	r1, r2
 8007f14:	602b      	str	r3, [r5, #0]
 8007f16:	f7fa faf2 	bl	80024fe <_fstat>
 8007f1a:	1c43      	adds	r3, r0, #1
 8007f1c:	d102      	bne.n	8007f24 <_fstat_r+0x1c>
 8007f1e:	682b      	ldr	r3, [r5, #0]
 8007f20:	b103      	cbz	r3, 8007f24 <_fstat_r+0x1c>
 8007f22:	6023      	str	r3, [r4, #0]
 8007f24:	bd38      	pop	{r3, r4, r5, pc}
 8007f26:	bf00      	nop
 8007f28:	20000380 	.word	0x20000380

08007f2c <_isatty_r>:
 8007f2c:	b538      	push	{r3, r4, r5, lr}
 8007f2e:	4d06      	ldr	r5, [pc, #24]	; (8007f48 <_isatty_r+0x1c>)
 8007f30:	2300      	movs	r3, #0
 8007f32:	4604      	mov	r4, r0
 8007f34:	4608      	mov	r0, r1
 8007f36:	602b      	str	r3, [r5, #0]
 8007f38:	f7fa faf1 	bl	800251e <_isatty>
 8007f3c:	1c43      	adds	r3, r0, #1
 8007f3e:	d102      	bne.n	8007f46 <_isatty_r+0x1a>
 8007f40:	682b      	ldr	r3, [r5, #0]
 8007f42:	b103      	cbz	r3, 8007f46 <_isatty_r+0x1a>
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	bd38      	pop	{r3, r4, r5, pc}
 8007f48:	20000380 	.word	0x20000380

08007f4c <_malloc_usable_size_r>:
 8007f4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f50:	1f18      	subs	r0, r3, #4
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	bfbc      	itt	lt
 8007f56:	580b      	ldrlt	r3, [r1, r0]
 8007f58:	18c0      	addlt	r0, r0, r3
 8007f5a:	4770      	bx	lr

08007f5c <_raise_r>:
 8007f5c:	291f      	cmp	r1, #31
 8007f5e:	b538      	push	{r3, r4, r5, lr}
 8007f60:	4604      	mov	r4, r0
 8007f62:	460d      	mov	r5, r1
 8007f64:	d904      	bls.n	8007f70 <_raise_r+0x14>
 8007f66:	2316      	movs	r3, #22
 8007f68:	6003      	str	r3, [r0, #0]
 8007f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f6e:	bd38      	pop	{r3, r4, r5, pc}
 8007f70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f72:	b112      	cbz	r2, 8007f7a <_raise_r+0x1e>
 8007f74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f78:	b94b      	cbnz	r3, 8007f8e <_raise_r+0x32>
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f000 f830 	bl	8007fe0 <_getpid_r>
 8007f80:	462a      	mov	r2, r5
 8007f82:	4601      	mov	r1, r0
 8007f84:	4620      	mov	r0, r4
 8007f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f8a:	f000 b817 	b.w	8007fbc <_kill_r>
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d00a      	beq.n	8007fa8 <_raise_r+0x4c>
 8007f92:	1c59      	adds	r1, r3, #1
 8007f94:	d103      	bne.n	8007f9e <_raise_r+0x42>
 8007f96:	2316      	movs	r3, #22
 8007f98:	6003      	str	r3, [r0, #0]
 8007f9a:	2001      	movs	r0, #1
 8007f9c:	e7e7      	b.n	8007f6e <_raise_r+0x12>
 8007f9e:	2400      	movs	r4, #0
 8007fa0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	4798      	blx	r3
 8007fa8:	2000      	movs	r0, #0
 8007faa:	e7e0      	b.n	8007f6e <_raise_r+0x12>

08007fac <raise>:
 8007fac:	4b02      	ldr	r3, [pc, #8]	; (8007fb8 <raise+0xc>)
 8007fae:	4601      	mov	r1, r0
 8007fb0:	6818      	ldr	r0, [r3, #0]
 8007fb2:	f7ff bfd3 	b.w	8007f5c <_raise_r>
 8007fb6:	bf00      	nop
 8007fb8:	2000000c 	.word	0x2000000c

08007fbc <_kill_r>:
 8007fbc:	b538      	push	{r3, r4, r5, lr}
 8007fbe:	4d07      	ldr	r5, [pc, #28]	; (8007fdc <_kill_r+0x20>)
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	4608      	mov	r0, r1
 8007fc6:	4611      	mov	r1, r2
 8007fc8:	602b      	str	r3, [r5, #0]
 8007fca:	f7fa fa39 	bl	8002440 <_kill>
 8007fce:	1c43      	adds	r3, r0, #1
 8007fd0:	d102      	bne.n	8007fd8 <_kill_r+0x1c>
 8007fd2:	682b      	ldr	r3, [r5, #0]
 8007fd4:	b103      	cbz	r3, 8007fd8 <_kill_r+0x1c>
 8007fd6:	6023      	str	r3, [r4, #0]
 8007fd8:	bd38      	pop	{r3, r4, r5, pc}
 8007fda:	bf00      	nop
 8007fdc:	20000380 	.word	0x20000380

08007fe0 <_getpid_r>:
 8007fe0:	f7fa ba26 	b.w	8002430 <_getpid>

08007fe4 <_init>:
 8007fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe6:	bf00      	nop
 8007fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fea:	bc08      	pop	{r3}
 8007fec:	469e      	mov	lr, r3
 8007fee:	4770      	bx	lr

08007ff0 <_fini>:
 8007ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff2:	bf00      	nop
 8007ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ff6:	bc08      	pop	{r3}
 8007ff8:	469e      	mov	lr, r3
 8007ffa:	4770      	bx	lr
